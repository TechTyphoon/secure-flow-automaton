version: '3.8'

services:
  # Development service
  secureflow-dev:
    build:
      context: .
      dockerfile: Dockerfile.ultimate
      target: development
    container_name: secureflow-automaton-dev
    ports:
      - "8080:8080"
    volumes:
      - .:/app:cached
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - VITE_DEV_TOOLS=true
      - VITE_HOT_RELOAD=true
    networks:
      - secureflow-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Production service
  secureflow-prod:
    build:
      context: .
      dockerfile: Dockerfile.ultimate
      target: production
    container_name: secureflow-automaton-prod
    ports:
      - "80:80"
      - "443:443"
    environment:
      - NODE_ENV=production
    networks:
      - secureflow-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # Database service (PostgreSQL for production)
  database:
    image: postgres:15-alpine
    container_name: secureflow-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-secureflow}
      POSTGRES_USER: ${POSTGRES_USER:-secureflow}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secureflow123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - secureflow-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-secureflow}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis service for caching
  redis:
    image: redis:7-alpine
    container_name: secureflow-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - secureflow-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (for production)
  nginx:
    image: nginx:alpine
    container_name: secureflow-nginx
    ports:
      - "8081:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - secureflow-prod
    networks:
      - secureflow-network
    restart: unless-stopped

networks:
  secureflow-network:
    driver: bridge
    name: secureflow-network

volumes:
  postgres_data:
    name: secureflow-postgres-data
  redis_data:
    name: secureflow-redis-data
