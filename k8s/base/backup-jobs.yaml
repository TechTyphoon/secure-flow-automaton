apiVersion: batch/v1
kind: CronJob
metadata:
  name: secureflow-database-backup
  namespace: secureflow-automaton
  labels:
    app.kubernetes.io/name: secureflow-automaton
    app.kubernetes.io/component: backup
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: secureflow-service-account
          containers:
          - name: database-backup
            image: postgres:15-alpine
            command:
              - /bin/sh
              - -c
              - |
                # Create backup directory
                mkdir -p /backup/$(date +%Y%m%d)

                # Backup PostgreSQL database
                pg_dump \
                  --host=$DB_HOST \
                  --port=$DB_PORT \
                  --username=$DB_USER \
                  --dbname=$DB_NAME \
                  --format=custom \
                  --compress=9 \
                  --file=/backup/$(date +%Y%m%d)/secureflow_$(date +%Y%m%d_%H%M%S).backup \
                  --verbose

                # Verify backup integrity
                pg_restore \
                  --list \
                  /backup/$(date +%Y%m%d)/secureflow_$(date +%Y%m%d_%H%M%S).backup > /dev/null

                echo "Database backup completed successfully"
            env:
              - name: DB_HOST
                valueFrom:
                  configMapKeyRef:
                    name: secureflow-config
                    key: DB_HOST
              - name: DB_PORT
                valueFrom:
                  configMapKeyRef:
                    name: secureflow-config
                    key: DB_PORT
              - name: DB_NAME
                valueFrom:
                  configMapKeyRef:
                    name: secureflow-config
                    key: DB_NAME
              - name: PGPASSWORD
                valueFrom:
                  secretKeyRef:
                    name: secureflow-secrets
                    key: db-password
              - name: DB_USER
                valueFrom:
                  secretKeyRef:
                    name: secureflow-secrets
                    key: db-user
            volumeMounts:
              - name: backup-storage
                mountPath: /backup
          volumes:
            - name: backup-storage
              persistentVolumeClaim:
                claimName: secureflow-backup-pvc
          restartPolicy: OnFailure
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: secureflow-config-backup
  namespace: secureflow-automaton
  labels:
    app.kubernetes.io/name: secureflow-automaton
    app.kubernetes.io/component: backup
spec:
  schedule: "0 */6 * * *"  # Every 6 hours
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: secureflow-service-account
          containers:
          - name: config-backup
            image: alpine:latest
            command:
              - /bin/sh
              - -c
              - |
                # Create backup directory
                BACKUP_DIR=/backup/$(date +%Y%m%d)
                mkdir -p $BACKUP_DIR

                # Backup ConfigMaps
                kubectl get configmaps -n secureflow-automaton -o yaml > $BACKUP_DIR/configmaps_$(date +%Y%m%d_%H%M%S).yaml

                # Backup Secrets (without sensitive data)
                kubectl get secrets -n secureflow-automaton -o yaml | \
                  sed 's/data:/data_backup:/g' > $BACKUP_DIR/secrets_structure_$(date +%Y%m%d_%H%M%S).yaml

                # Backup Deployment configurations
                kubectl get deployments -n secureflow-automaton -o yaml > $BACKUP_DIR/deployments_$(date +%Y%m%d_%H%M%S).yaml

                # Backup Service configurations
                kubectl get services -n secureflow-automaton -o yaml > $BACKUP_DIR/services_$(date +%Y%m%d_%H%M%S).yaml

                # Create backup manifest
                cat > $BACKUP_DIR/backup_manifest.txt << EOF
SecureFlow Automaton Configuration Backup
========================================
Backup Date: $(date)
Backup Type: Configuration
Namespace: secureflow-automaton
Kubernetes Version: $(kubectl version --client --short)

Contents:
- ConfigMaps
- Secrets structure
- Deployments
- Services
- Ingress configurations
- Network policies

Restore Instructions:
1. kubectl apply -f configmaps_*.yaml
2. kubectl apply -f services_*.yaml
3. kubectl apply -f deployments_*.yaml
4. kubectl apply -f ingress_*.yaml
5. Update secrets with actual values
EOF

                echo "Configuration backup completed successfully"
          volumeMounts:
            - name: backup-storage
              mountPath: /backup
          restartPolicy: OnFailure
      volumes:
        - name: backup-storage
          persistentVolumeClaim:
            claimName: secureflow-backup-pvc
---
apiVersion: batch/v1
kind: Job
metadata:
  name: secureflow-restore-database
  namespace: secureflow-automaton
  labels:
    app.kubernetes.io/name: secureflow-automaton
    app.kubernetes.io/component: restore
spec:
  template:
    spec:
      serviceAccountName: secureflow-service-account
      containers:
      - name: database-restore
        image: postgres:15-alpine
        command:
          - /bin/sh
          - -c
          - |
            # Check if backup file exists
            BACKUP_FILE=${BACKUP_FILE:-/backup/latest/secureflow_*.backup}
            if [ ! -f $BACKUP_FILE ]; then
              echo "Backup file not found: $BACKUP_FILE"
              exit 1
            fi

            echo "Starting database restore from: $BACKUP_FILE"

            # Terminate active connections to the database
            psql \
              --host=$DB_HOST \
              --port=$DB_PORT \
              --username=$DB_USER \
              --dbname=postgres \
              -c "SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname = '$DB_NAME' AND pid <> pg_backend_pid();"

            # Drop and recreate the database
            psql \
              --host=$DB_HOST \
              --port=$DB_PORT \
              --username=$DB_USER \
              --dbname=postgres \
              -c "DROP DATABASE IF EXISTS $DB_NAME;"

            psql \
              --host=$DB_HOST \
              --port=$DB_PORT \
              --username=$DB_USER \
              --dbname=postgres \
              -c "CREATE DATABASE $DB_NAME;"

            # Restore from backup
            pg_restore \
              --host=$DB_HOST \
              --port=$DB_PORT \
              --username=$DB_USER \
              --dbname=$DB_NAME \
              --format=custom \
              --clean \
              --if-exists \
              --create \
              --verbose \
              $BACKUP_FILE

            # Verify restore
            psql \
              --host=$DB_HOST \
              --port=$DB_PORT \
              --username=$DB_USER \
              --dbname=$DB_NAME \
              -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public';" \
              --tuples-only \
              --quiet

            echo "Database restore completed successfully"
        env:
          - name: BACKUP_FILE
            value: "/backup/latest/secureflow_$(date +%Y%m%d).backup"
          - name: DB_HOST
            valueFrom:
              configMapKeyRef:
                name: secureflow-config
                key: DB_HOST
          - name: DB_PORT
            valueFrom:
              configMapKeyRef:
                name: secureflow-config
                key: DB_PORT
          - name: DB_NAME
            valueFrom:
              configMapKeyRef:
                name: secureflow-config
                key: DB_NAME
          - name: PGPASSWORD
            valueFrom:
              secretKeyRef:
                name: secureflow-secrets
                key: db-password
          - name: DB_USER
            valueFrom:
              secretKeyRef:
                name: secureflow-secrets
                key: db-user
        volumeMounts:
          - name: backup-storage
            mountPath: /backup
      volumes:
        - name: backup-storage
          persistentVolumeClaim:
            claimName: secureflow-backup-pvc
      restartPolicy: Never
---
apiVersion: batch/v1
kind: Job
metadata:
  name: secureflow-database-migration
  namespace: secureflow-automaton
  labels:
    app.kubernetes.io/name: secureflow-automaton
    app.kubernetes.io/component: migration
spec:
  template:
    spec:
      serviceAccountName: secureflow-service-account
      containers:
      - name: database-migration
        image: secureflow-automaton:latest
        command:
          - /bin/sh
          - -c
          - |
            echo "Starting database migration..."

            # Wait for database to be ready
            while ! nc -z $DB_HOST $DB_PORT; do
              echo "Waiting for database..."
              sleep 5
            done

            # Run database migrations
            npm run migration:up

            # Run data seeding if needed
            if [ "$RUN_SEED" = "true" ]; then
              echo "Running data seeding..."
              npm run seed
            fi

            # Verify migration success
            npm run migration:status

            echo "Database migration completed successfully"
        env:
          - name: RUN_SEED
            value: "false"
          - name: DB_HOST
            valueFrom:
              configMapKeyRef:
                name: secureflow-config
                key: DB_HOST
          - name: DB_PORT
            valueFrom:
              configMapKeyRef:
                name: secureflow-config
                key: DB_PORT
          - name: DB_NAME
            valueFrom:
              configMapKeyRef:
                name: secureflow-config
                key: DB_NAME
          - name: DB_USER
            valueFrom:
              secretKeyRef:
                name: secureflow-secrets
                key: db-user
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: secureflow-secrets
                key: db-password
      restartPolicy: Never
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: secureflow-backup-pvc
  namespace: secureflow-automaton
  labels:
    app.kubernetes.io/name: secureflow-automaton
    app.kubernetes.io/component: backup
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: standard
