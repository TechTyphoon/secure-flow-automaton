
import React from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { 
  AlertTriangle, 
  Shield, 
  Clock, 
  ExternalLink,
  GitPullRequest,
  CheckCircle,
  Loader2
} from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { useVulnerabilityDetails } from '@/hooks/useVulnerabilityDetails';
import { useRemediationActions } from '@/hooks/useRemediationActions';
import { Skeleton } from '@/components/ui/skeleton';

interface Vulnerability {
  id: string;
  cve_id?: string;
  title: string;
  description?: string;
  severity: string;
  component?: string;
  status: string;
  auto_fixable?: boolean;
  confidence_score?: number;
  first_detected: string;
  remediation_advice?: string;
  file_path?: string;
  line_number?: number;
}

interface VulnerabilityDetailsModalProps {
  vulnerability: Vulnerability | null;
  isOpen: boolean;
  onClose: () => void;
}

const VulnerabilityDetailsModal = ({ vulnerability, isOpen, onClose }: VulnerabilityDetailsModalProps) => {
  const { toast } = useToast();
  const { triggerRemediation, isRemediating } = useRemediationActions();
  const { data: detailedVuln, isLoading } = useVulnerabilityDetails(vulnerability?.id || null);

  if (!vulnerability) return null;

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-security-critical text-white';
      case 'high': return 'bg-security-high text-white';
      case 'medium': return 'bg-security-medium text-white';
      case 'low': return 'bg-security-low text-white';
      default: return 'bg-muted text-muted-foreground';
    }
  };

  const handleAutoFix = () => {
    triggerRemediation({
      vulnerabilityIds: [vulnerability.id],
      action: 'fix-single',
      projectName: 'demo-project',
    });
    
    toast({
      title: "Auto-remediation initiated",
      description: `Creating automated fix for ${vulnerability.title}`,
    });
    
    onClose();
  };

  const handleManualReview = () => {
    toast({
      title: "Manual review requested",
      description: "Vulnerability assigned to security team for review",
    });
    console.log('Manual review requested for vulnerability:', vulnerability.id);
    onClose();
  };

  const handleIgnore = () => {
    toast({
      title: "Vulnerability ignored",
      description: "This vulnerability has been marked as ignored",
    });
    console.log('Ignoring vulnerability:', vulnerability.id);
    onClose();
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center space-x-3">
            <Badge className={getSeverityColor(vulnerability.severity)}>
              {vulnerability.severity.toUpperCase()}
            </Badge>
            <span>{vulnerability.cve_id || 'INTERNAL-001'}</span>
          </DialogTitle>
        </DialogHeader>
        
        {isLoading ? (
          <div className="space-y-6">
            <Skeleton className="h-6 w-3/4" />
            <Skeleton className="h-20 w-full" />
            <div className="grid grid-cols-2 gap-4">
              <Skeleton className="h-16 w-full" />
              <Skeleton className="h-16 w-full" />
            </div>
          </div>
        ) : (
          <div className="space-y-6">
            <div>
              <h3 className="font-semibold text-lg mb-2">{vulnerability.title}</h3>
              <p className="text-muted-foreground">
                {detailedVuln?.external_details?.description || vulnerability.description}
              </p>
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div>
                <h4 className="font-medium mb-1">Component</h4>
                <p className="text-sm text-muted-foreground">{vulnerability.component || 'N/A'}</p>
              </div>
              <div>
                <h4 className="font-medium mb-1">Confidence Score</h4>
                <p className="text-sm text-muted-foreground">{vulnerability.confidence_score}%</p>
              </div>
              <div>
                <h4 className="font-medium mb-1">File Path</h4>
                <p className="text-sm text-muted-foreground font-mono">{vulnerability.file_path || 'N/A'}</p>
              </div>
              <div>
                <h4 className="font-medium mb-1">Line Number</h4>
                <p className="text-sm text-muted-foreground">{vulnerability.line_number || 'N/A'}</p>
              </div>
            </div>

            {detailedVuln?.external_details && (
              <div>
                <h4 className="font-medium mb-2">CVE Details</h4>
                <div className="bg-muted p-4 rounded-lg space-y-2">
                  <div className="flex justify-between">
                    <span className="text-sm">CVSS Score:</span>
                    <span className="text-sm font-medium">{detailedVuln.external_details.cvss_score}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-sm">Published:</span>
                    <span className="text-sm">{new Date(detailedVuln.external_details.published_date).toLocaleDateString()}</span>
                  </div>
                  <div className="mt-3">
                    <span className="text-sm font-medium">References:</span>
                    <div className="mt-1 space-y-1">
                      {detailedVuln.external_details.references?.map((ref: string, idx: number) => (
                        <a 
                          key={idx} 
                          href={ref} 
                          target="_blank" 
                          rel="noopener noreferrer"
                          className="block text-xs text-blue-600 hover:underline"
                        >
                          {ref}
                        </a>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            )}

            {detailedVuln?.remediation_recommendations && (
              <div>
                <h4 className="font-medium mb-2">Remediation Recommendations</h4>
                <div className="space-y-3">
                  {detailedVuln.remediation_recommendations.map((rec: any, idx: number) => (
                    <div key={idx} className="p-3 border rounded-lg">
                      <div className="flex items-center justify-between mb-1">
                        <span className="font-medium text-sm">{rec.type.replace('_', ' ').toUpperCase()}</span>
                        <Badge variant={rec.priority === 'high' ? 'destructive' : rec.priority === 'medium' ? 'default' : 'secondary'}>
                          {rec.priority}
                        </Badge>
                      </div>
                      <p className="text-sm text-muted-foreground">{rec.description}</p>
                      {rec.automated && (
                        <span className="text-xs text-green-600 mt-1 block">âœ“ Can be automated</span>
                      )}
                    </div>
                  ))}
                </div>
              </div>
            )}

            {vulnerability.remediation_advice && (
              <div>
                <h4 className="font-medium mb-2">Remediation Advice</h4>
                <p className="text-sm text-muted-foreground bg-muted p-3 rounded">
                  {vulnerability.remediation_advice}
                </p>
              </div>
            )}

            {detailedVuln?.related_vulnerabilities?.length > 0 && (
              <div>
                <h4 className="font-medium mb-2">Related Vulnerabilities</h4>
                <div className="space-y-2">
                  {detailedVuln.related_vulnerabilities.map((relatedVuln: any) => (
                    <div key={relatedVuln.id} className="flex items-center justify-between p-2 border rounded">
                      <div>
                        <span className="text-sm font-medium">{relatedVuln.cve_id || relatedVuln.title}</span>
                        <Badge className={`ml-2 ${getSeverityColor(relatedVuln.severity)}`} size="sm">
                          {relatedVuln.severity}
                        </Badge>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}

            <div className="flex space-x-3 pt-4 border-t">
              {vulnerability.auto_fixable && (
                <Button 
                  onClick={handleAutoFix} 
                  className="security-gradient"
                  disabled={isRemediating}
                >
                  {isRemediating ? (
                    <>
                      <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                      Fixing...
                    </>
                  ) : (
                    <>
                      <GitPullRequest className="h-4 w-4 mr-2" />
                      Auto-Fix
                    </>
                  )}
                </Button>
              )}
              <Button variant="outline" onClick={handleManualReview}>
                <Shield className="h-4 w-4 mr-2" />
                Manual Review
              </Button>
              <Button variant="outline" onClick={handleIgnore}>
                <Clock className="h-4 w-4 mr-2" />
                Ignore
              </Button>
              <Button variant="outline" onClick={onClose}>
                <ExternalLink className="h-4 w-4 mr-2" />
                Close
              </Button>
            </div>
          </div>
        )}
      </DialogContent>
    </Dialog>
  );
};

export default VulnerabilityDetailsModal;
