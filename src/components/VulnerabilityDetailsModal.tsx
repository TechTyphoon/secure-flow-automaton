import React from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { ExternalLink, Shield, AlertTriangle, CheckCircle, XCircle } from 'lucide-react';
import { useVulnerabilityDetails } from '@/hooks/useVulnerabilityDetails';
import { useRemediationActions } from '@/hooks/useRemediationActions';
import { useToast } from '@/hooks/use-toast';

interface VulnerabilityDetailsModalProps {
  vulnerabilityId: string | null;
  isOpen: boolean;
  onClose: () => void;
}

const VulnerabilityDetailsModal = ({ vulnerabilityId, isOpen, onClose }: VulnerabilityDetailsModalProps) => {
  const { data: vulnerability, isLoading } = useVulnerabilityDetails(vulnerabilityId);
  const { triggerRemediation, isRemediating } = useRemediationActions();
  const { toast } = useToast();

  const handleAutoFix = async () => {
    if (!vulnerability) return;
    
    triggerRemediation({
      vulnerabilityIds: [vulnerability.id],
      action: 'fix-single',
    });
    
    toast({
      title: "Auto-Fix Initiated",
      description: `Starting automated remediation for ${vulnerability.cve_id}`,
    });
  };

  const handleManualReview = () => {
    toast({
      title: "Manual Review Assigned",
      description: "Vulnerability assigned to security team for manual review",
    });
  };

  const handleIgnore = () => {
    toast({
      title: "Vulnerability Ignored",
      description: "Risk has been accepted and vulnerability marked as ignored",
    });
  };

  const handleViewDetails = () => {
    if (vulnerability?.external_references?.[0]) {
      window.open(vulnerability.external_references[0], '_blank');
    }
    toast({
      title: "Opening External Details",
      description: "Redirecting to vulnerability database",
    });
  };

  if (isLoading) {
    return (
      <Dialog open={isOpen} onOpenChange={onClose}>
        <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto">
          <div className="flex items-center justify-center p-8">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
          </div>
        </DialogContent>
      </Dialog>
    );
  }

  if (!vulnerability) {
    return (
      <Dialog open={isOpen} onOpenChange={onClose}>
        <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto">
          <div className="text-center p-8">
            <p className="text-muted-foreground">Vulnerability details not found</p>
          </div>
        </DialogContent>
      </Dialog>
    );
  }

  const getSeverityColor = (severity: string) => {
    switch (severity.toUpperCase()) {
      case 'CRITICAL': return 'bg-red-500 hover:bg-red-600';
      case 'HIGH': return 'bg-orange-500 hover:bg-orange-600';
      case 'MEDIUM': return 'bg-yellow-500 hover:bg-yellow-600';
      case 'LOW': return 'bg-blue-500 hover:bg-blue-600';
      default: return 'bg-gray-500 hover:bg-gray-600';
    }
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity.toUpperCase()) {
      case 'CRITICAL': return <XCircle className="h-4 w-4" />;
      case 'HIGH': return <AlertTriangle className="h-4 w-4" />;
      case 'MEDIUM': return <Shield className="h-4 w-4" />;
      case 'LOW': return <CheckCircle className="h-4 w-4" />;
      default: return <Shield className="h-4 w-4" />;
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center space-x-3">
            <div className="flex items-center space-x-2">
              {getSeverityIcon(vulnerability.severity)}
              <span>{vulnerability.cve_id}</span>
            </div>
            <Badge className={`${getSeverityColor(vulnerability.severity)} text-white`}>
              {vulnerability.severity}
            </Badge>
          </DialogTitle>
        </DialogHeader>

        <div className="space-y-6">
          {/* Vulnerability Overview */}
          <div className="bg-card p-4 rounded-lg border">
            <h3 className="font-semibold text-lg mb-2">Overview</h3>
            <p className="text-muted-foreground mb-3">{vulnerability.description}</p>
            
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
              <div>
                <span className="font-medium">CVSS Score:</span>
                <p className="text-muted-foreground">{vulnerability.cvss_score || 'N/A'}</p>
              </div>
              <div>
                <span className="font-medium">Status:</span>
                <p className="text-muted-foreground capitalize">{vulnerability.status}</p>
              </div>
              <div>
                <span className="font-medium">Detected:</span>
                <p className="text-muted-foreground">
                  {new Date(vulnerability.created_at).toLocaleDateString()}
                </p>
              </div>
              <div>
                <span className="font-medium">Package:</span>
                <p className="text-muted-foreground">{vulnerability.affected_package || 'Unknown'}</p>
              </div>
            </div>
          </div>

          {/* Affected Components */}
          {vulnerability.affected_package && (
            <div className="bg-card p-4 rounded-lg border">
              <h3 className="font-semibold text-lg mb-2">Affected Components</h3>
              <div className="space-y-2">
                <div className="flex items-center justify-between p-2 bg-muted rounded">
                  <span className="font-medium">{vulnerability.affected_package}</span>
                  <Badge variant="outline">
                    Version: {vulnerability.package_version || 'Unknown'}
                  </Badge>
                </div>
              </div>
            </div>
          )}

          {/* Remediation Recommendations */}
          <div className="bg-card p-4 rounded-lg border">
            <h3 className="font-semibold text-lg mb-2">Remediation</h3>
            <div className="space-y-3">
              <div>
                <h4 className="font-medium mb-1">Recommended Action:</h4>
                <p className="text-muted-foreground">
                  {vulnerability.fix_available 
                    ? `Upgrade ${vulnerability.affected_package} to version ${vulnerability.fixed_version || 'latest'} or higher`
                    : 'No automated fix available. Manual review required.'
                  }
                </p>
              </div>
              
              {vulnerability.fix_available && (
                <div className="bg-green-50 dark:bg-green-900/20 p-3 rounded border border-green-200 dark:border-green-800">
                  <div className="flex items-center space-x-2 text-green-800 dark:text-green-200">
                    <CheckCircle className="h-4 w-4" />
                    <span className="font-medium">Automated Fix Available</span>
                  </div>
                  <p className="text-green-700 dark:text-green-300 text-sm mt-1">
                    This vulnerability can be automatically resolved by updating dependencies.
                  </p>
                </div>
              )}
            </div>
          </div>

          {/* External References */}
          {vulnerability.external_references && vulnerability.external_references.length > 0 && (
            <div className="bg-card p-4 rounded-lg border">
              <h3 className="font-semibold text-lg mb-2">External References</h3>
              <div className="space-y-2">
                {vulnerability.external_references.map((ref: string, index: number) => (
                  <a
                    key={index}
                    href={ref}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="flex items-center space-x-2 text-primary hover:underline"
                  >
                    <ExternalLink className="h-4 w-4" />
                    <span>{ref}</span>
                  </a>
                ))}
              </div>
            </div>
          )}

          {/* Action Buttons */}
          <div className="flex flex-wrap gap-3 pt-4 border-t">
            {vulnerability.fix_available && (
              <Button 
                onClick={handleAutoFix}
                disabled={isRemediating}
                className="bg-green-600 hover:bg-green-700 text-white"
              >
                {isRemediating ? 'Fixing...' : 'Auto-Fix'}
              </Button>
            )}
            
            <Button 
              variant="outline" 
              onClick={handleManualReview}
            >
              Manual Review
            </Button>
            
            <Button 
              variant="outline" 
              onClick={handleIgnore}
            >
              Ignore Risk
            </Button>
            
            <Button 
              variant="outline" 
              onClick={handleViewDetails}
            >
              <ExternalLink className="h-4 w-4 mr-2" />
              View Details
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default VulnerabilityDetailsModal;
