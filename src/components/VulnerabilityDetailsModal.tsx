
import React from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { 
  AlertTriangle, 
  Shield, 
  Clock, 
  ExternalLink,
  GitPullRequest,
  CheckCircle
} from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface Vulnerability {
  id: string;
  cve_id?: string;
  title: string;
  description?: string;
  severity: string;
  component?: string;
  status: string;
  auto_fixable?: boolean;
  confidence_score?: number;
  first_detected: string;
  remediation_advice?: string;
  file_path?: string;
  line_number?: number;
}

interface VulnerabilityDetailsModalProps {
  vulnerability: Vulnerability | null;
  isOpen: boolean;
  onClose: () => void;
}

const VulnerabilityDetailsModal = ({ vulnerability, isOpen, onClose }: VulnerabilityDetailsModalProps) => {
  const { toast } = useToast();

  if (!vulnerability) return null;

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-security-critical text-white';
      case 'high': return 'bg-security-high text-white';
      case 'medium': return 'bg-security-medium text-white';
      case 'low': return 'bg-security-low text-white';
      default: return 'bg-muted text-muted-foreground';
    }
  };

  const handleAutoFix = () => {
    toast({
      title: "Auto-remediation initiated",
      description: `Creating automated fix for ${vulnerability.title}`,
    });
    console.log('Auto-fixing vulnerability:', vulnerability.id);
    onClose();
  };

  const handleManualReview = () => {
    toast({
      title: "Manual review requested",
      description: "Vulnerability assigned to security team for review",
    });
    console.log('Manual review requested for vulnerability:', vulnerability.id);
    onClose();
  };

  const handleIgnore = () => {
    toast({
      title: "Vulnerability ignored",
      description: "This vulnerability has been marked as ignored",
    });
    console.log('Ignoring vulnerability:', vulnerability.id);
    onClose();
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-2xl">
        <DialogHeader>
          <DialogTitle className="flex items-center space-x-3">
            <Badge className={getSeverityColor(vulnerability.severity)}>
              {vulnerability.severity.toUpperCase()}
            </Badge>
            <span>{vulnerability.cve_id || 'INTERNAL-001'}</span>
          </DialogTitle>
        </DialogHeader>
        
        <div className="space-y-6">
          <div>
            <h3 className="font-semibold text-lg mb-2">{vulnerability.title}</h3>
            <p className="text-muted-foreground">{vulnerability.description}</p>
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div>
              <h4 className="font-medium mb-1">Component</h4>
              <p className="text-sm text-muted-foreground">{vulnerability.component}</p>
            </div>
            <div>
              <h4 className="font-medium mb-1">Confidence Score</h4>
              <p className="text-sm text-muted-foreground">{vulnerability.confidence_score}%</p>
            </div>
            <div>
              <h4 className="font-medium mb-1">File Path</h4>
              <p className="text-sm text-muted-foreground">{vulnerability.file_path || 'N/A'}</p>
            </div>
            <div>
              <h4 className="font-medium mb-1">Line Number</h4>
              <p className="text-sm text-muted-foreground">{vulnerability.line_number || 'N/A'}</p>
            </div>
          </div>

          {vulnerability.remediation_advice && (
            <div>
              <h4 className="font-medium mb-2">Remediation Advice</h4>
              <p className="text-sm text-muted-foreground bg-muted p-3 rounded">
                {vulnerability.remediation_advice}
              </p>
            </div>
          )}

          <div className="flex space-x-3">
            {vulnerability.auto_fixable && (
              <Button onClick={handleAutoFix} className="security-gradient">
                <GitPullRequest className="h-4 w-4 mr-2" />
                Auto-Fix
              </Button>
            )}
            <Button variant="outline" onClick={handleManualReview}>
              <Shield className="h-4 w-4 mr-2" />
              Manual Review
            </Button>
            <Button variant="outline" onClick={handleIgnore}>
              <Clock className="h-4 w-4 mr-2" />
              Ignore
            </Button>
            <Button variant="outline" onClick={onClose}>
              <ExternalLink className="h-4 w-4 mr-2" />
              View Details
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default VulnerabilityDetailsModal;
