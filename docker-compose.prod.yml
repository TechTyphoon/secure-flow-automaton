version: '3.8'

services:
  # Production SecureFlow Application
  secureflow-app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
        VITE_APP_NAME: "SecureFlow Automaton"
        VITE_APP_VERSION: "1.0.0"
    container_name: secureflow-app-prod
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=production
      - TZ=UTC
    networks:
      - secureflow-network
    healthcheck:
      test: ["CMD", "/usr/local/bin/health-check.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "com.secureflow.environment=production"
      - "com.secureflow.service=frontend"
    depends_on:
      - redis
      - postgres
    volumes:
      - app-logs:/var/log/nginx
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: secureflow-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: secureflow
      POSTGRES_USER: secureflow
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secureflow_password_2024}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./supabase/migrations:/docker-entrypoint-initdb.d
    networks:
      - secureflow-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U secureflow -d secureflow"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    labels:
      - "com.secureflow.environment=production"
      - "com.secureflow.service=database"
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: secureflow-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password_2024}
    volumes:
      - redis-data:/data
    networks:
      - secureflow-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s
    labels:
      - "com.secureflow.environment=production"
      - "com.secureflow.service=cache"
    logging:
      driver: json-file
      options:
        max-size: "5m"
        max-file: "3"

  # Nginx Load Balancer (optional, for scaling)
  nginx-lb:
    image: nginx:alpine
    container_name: secureflow-nginx-lb
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx-lb.conf:/etc/nginx/nginx.conf
      - ./docker/ssl:/etc/ssl/certs
    networks:
      - secureflow-network
    depends_on:
      - secureflow-app
    labels:
      - "com.secureflow.environment=production"
      - "com.secureflow.service=loadbalancer"
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Security Scanner Service (optional)
  security-scanner:
    build:
      context: .
      dockerfile: docker/Dockerfile.scanner
    container_name: secureflow-scanner
    restart: unless-stopped
    environment:
      - SCANNER_MODE=production
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - SONARCLOUD_TOKEN=${SONARCLOUD_TOKEN}
    networks:
      - secureflow-network
    depends_on:
      - postgres
      - redis
    volumes:
      - scanner-data:/app/data
    labels:
      - "com.secureflow.environment=production"
      - "com.secureflow.service=scanner"
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: secureflow-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - secureflow-network
    labels:
      - "com.secureflow.environment=production"
      - "com.secureflow.service=monitoring"
    profiles:
      - monitoring

  # Grafana Dashboard (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: secureflow-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - secureflow-network
    depends_on:
      - prometheus
    labels:
      - "com.secureflow.environment=production"
      - "com.secureflow.service=dashboard"
    profiles:
      - monitoring

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  app-logs:
    driver: local
  scanner-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  secureflow-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
