
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.50.0';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const url = new URL(req.url);
    const vulnerabilityId = url.searchParams.get('id');
    const cveId = url.searchParams.get('cve_id');

    if (!vulnerabilityId && !cveId) {
      throw new Error('Either vulnerability ID or CVE ID is required');
    }

    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? ''
    );

    // Fetch vulnerability details
    let query = supabaseClient
      .from('vulnerabilities')
      .select(`
        *,
        security_scans (
          project_name,
          scan_type,
          branch,
          started_at
        ),
        remediation_activities (
          action_type,
          status,
          started_at,
          completed_at,
          pr_url,
          fix_description
        )
      `);

    if (vulnerabilityId) {
      query = query.eq('id', vulnerabilityId);
    } else {
      query = query.eq('cve_id', cveId);
    }

    const { data: vulnerability, error } = await query.single();

    if (error) {
      throw new Error(`Vulnerability not found: ${error.message}`);
    }

    // Enhance with external CVE data if available
    let enhancedDetails = { ...vulnerability };
    
    if (vulnerability.cve_id) {
      try {
        const cveDetails = await fetchCVEDetails(vulnerability.cve_id);
        enhancedDetails = {
          ...enhancedDetails,
          external_details: cveDetails,
        };
      } catch (cveError) {
        console.warn(`Failed to fetch CVE details for ${vulnerability.cve_id}:`, cveError);
      }
    }

    // Add remediation recommendations
    enhancedDetails.remediation_recommendations = generateRemediationRecommendations(vulnerability);

    // Add related vulnerabilities
    const { data: relatedVulns } = await supabaseClient
      .from('vulnerabilities')
      .select('id, title, severity, cve_id')
      .eq('component', vulnerability.component)
      .neq('id', vulnerability.id)
      .limit(5);

    enhancedDetails.related_vulnerabilities = relatedVulns || [];

    return new Response(JSON.stringify({
      success: true,
      vulnerability: enhancedDetails,
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Error in vulnerability-details function:', error);
    return new Response(JSON.stringify({ 
      error: error.message,
      success: false 
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});

async function fetchCVEDetails(cveId: string) {
  // Simulate fetching from external CVE database
  return {
    description: `Detailed description for ${cveId} from external database`,
    cvss_score: (Math.random() * 10).toFixed(1),
    cvss_vector: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H',
    references: [
      `https://cve.mitre.org/cgi-bin/cvename.cgi?name=${cveId}`,
      `https://nvd.nist.gov/vuln/detail/${cveId}`,
    ],
    published_date: new Date(Date.now() - Math.random() * 365 * 24 * 60 * 60 * 1000).toISOString(),
  };
}

function generateRemediationRecommendations(vulnerability: any) {
  const recommendations = [];

  if (vulnerability.component) {
    recommendations.push({
      type: 'dependency_update',
      priority: 'high',
      description: `Update ${vulnerability.component} to the latest secure version`,
      automated: vulnerability.auto_fixable,
    });
  }

  if (vulnerability.file_path) {
    recommendations.push({
      type: 'code_review',
      priority: 'medium',
      description: `Review and update code in ${vulnerability.file_path}`,
      automated: false,
    });
  }

  recommendations.push({
    type: 'monitoring',
    priority: 'low',
    description: 'Add monitoring for this vulnerability type in future scans',
    automated: true,
  });

  return recommendations;
}
