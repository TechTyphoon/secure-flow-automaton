import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { 
  AlertTriangle, 
  Shield, 
  Zap, 
  Clock,
  ChevronRight,
  ExternalLink,
  RefreshCw,
  Play
} from 'lucide-react';
import { useVulnerabilities, useSecurityScans, useVulnerabilitiesDemo, useSecurityScansReal } from '@/hooks/useSecurityData';
import { useVulnerabilities as useRealVulnerabilities, useRemediationActions } from '@/hooks/useRealSecurityData';
import { Skeleton } from '@/components/ui/skeleton';
import { useToast } from '@/hooks/use-toast';
import VulnerabilityDetailsModal from './VulnerabilityDetailsModal';
import { Link } from 'react-router-dom';
import { useAuth } from '@/components/AuthContext';

const VulnerabilityDashboard = () => {
  const { user } = useAuth();
  
  // Call all hooks unconditionally to avoid React Hooks rules violation
  const vulnerabilitiesResult = useVulnerabilities();
  const vulnerabilitiesDemoResult = useVulnerabilitiesDemo();
  const realVulnerabilitiesResult = useRealVulnerabilities();
  const securityScansResult = useSecurityScans();
  const securityScansRealResult = useSecurityScansReal();
  const remediationActions = useRemediationActions();
  
  // Temporarily bypass authentication for development to show colorful dashboard
  // const isDemo = !user;
  const isDemo = false; // Force to show real data for development
  const vulnerabilities = isDemo ? vulnerabilitiesDemoResult.data : (realVulnerabilitiesResult.data || vulnerabilitiesResult.data);
  const vulnLoading = isDemo ? vulnerabilitiesDemoResult.isLoading : (realVulnerabilitiesResult.isLoading || vulnerabilitiesResult.isLoading);
  const refetchVulns = isDemo ? vulnerabilitiesDemoResult.refetch : (realVulnerabilitiesResult.refetch || vulnerabilitiesResult.refetch);
  const scans = isDemo ? securityScansRealResult.data : securityScansResult.data;
  const scanLoading = isDemo ? securityScansRealResult.isLoading : securityScansResult.isLoading;
    
  const { triggerRemediation, triggerPipeline, isRemediating, isTriggeringPipeline } = useRemediationActions();
  const { toast } = useToast();
  const [selectedVulnerability, setSelectedVulnerability] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);

  const getSeverityColor = (severity: string) => {
    switch (severity?.toLowerCase()) {
      case 'critical': return 'bg-security-critical text-white';
      case 'high': return 'bg-security-high text-white';
      case 'medium': return 'bg-security-medium text-white';
      case 'low': return 'bg-security-low text-white';
      default: return 'bg-muted text-muted-foreground';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'open': return <AlertTriangle className="h-4 w-4 text-security-critical" />;
      case 'new': return <AlertTriangle className="h-4 w-4 text-security-critical" />;
      case 'fixed': return <Shield className="h-4 w-4 text-security-secure" />;
      case 'ignored': return <Clock className="h-4 w-4 text-security-medium" />;
      default: return <AlertTriangle className="h-4 w-4 text-muted-foreground" />;
    }
  };

  const formatTimeAgo = (dateString: string) => {
    const date = new Date(dateString);
    const now = new Date();
    const diffInHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60));
    
    if (diffInHours < 1) return 'Just now';
    if (diffInHours < 24) return `${diffInHours}h ago`;
    return `${Math.floor(diffInHours / 24)}d ago`;
  };

  const handleVulnerabilityClick = (vulnerability: { id: string; cve: string; [key: string]: unknown }) => {
    setSelectedVulnerability(vulnerability);
    setIsModalOpen(true);
  };

  const handleRefresh = () => {
    refetchVulns();
    toast({
      title: "Refreshing vulnerabilities",
      description: "Fetching latest security scan results...",
    });
  };

  const handleViewFullReport = () => {
    toast({
      title: "Opening Security Report",
      description: "Redirecting to comprehensive security dashboard...",
    });
    console.log('Opening full security report');
  };

  const handleFixAll = () => {
    if (autoFixableCount === 0) {
      toast({
        title: "No Auto-Fixable Vulnerabilities",
        description: "There are currently no vulnerabilities that can be automatically fixed.",
        variant: "destructive",
      });
      return;
    }

    const vulnerabilityIds = autoFixableVulns.map(v => v.id);
    
    triggerRemediation({
      vulnerabilityIds,
      action: 'fix-all',
      projectName: 'demo-project',
    });
  };

  const handleTriggerPipeline = () => {
    triggerPipeline({
      projectName: 'demo-project',
      branch: 'main',
      triggeredBy: 'dashboard-user',
    });
  };

  const activeVulns = vulnerabilities?.filter(v => v.status === 'new').slice(0, 4) || [];
  const totalActiveVulns = vulnerabilities?.filter(v => v.status === 'new').length || 0;
  const autoFixableVulns = vulnerabilities?.filter(v => v.auto_fixable && v.status === 'new') || [];
  const autoFixableCount = autoFixableVulns.length;
  const recentFixes = vulnerabilities?.filter(v => v.status === 'fixed').length || 0;

  if (vulnLoading || scanLoading) {
    return (
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {[...Array(2)].map((_, i) => (
          <Card key={i} className="glass-morphism">
            <CardHeader>
              <Skeleton className="h-6 w-48" />
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {[...Array(3)].map((_, j) => (
                  <div key={j} className="p-3 rounded-lg border">
                    <Skeleton className="h-4 w-full mb-2" />
                    <Skeleton className="h-3 w-3/4" />
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    );
  }

  return (
    <>
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <Card className="glass-morphism">
          <CardHeader>
            <div className="flex items-center justify-between">
              <CardTitle className="flex items-center space-x-2">
                <AlertTriangle className="h-5 w-5 text-security-critical" />
                <span>Active Vulnerabilities</span>
                <Badge variant="secondary" className="ml-2">{totalActiveVulns} total</Badge>
              </CardTitle>
              <div className="flex space-x-2">
                <Button 
                  variant="ghost" 
                  size="icon"
                  onClick={handleTriggerPipeline}
                  disabled={isTriggeringPipeline}
                  className="h-8 w-8"
                  title="Trigger Security Pipeline"
                >
                  <Play className="h-4 w-4" />
                </Button>
                <Button 
                  variant="ghost" 
                  size="icon"
                  onClick={handleRefresh}
                  className="h-8 w-8"
                >
                  <RefreshCw className="h-4 w-4" />
                </Button>
              </div>
            </div>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {activeVulns.length > 0 ? activeVulns.map((vuln) => (
                <Link 
                  key={vuln.id} 
                  to={`/vulnerability/${vuln.cve_id || vuln.id}`}
                  className="block"
                >
                  <div 
                    className="flex items-center justify-between p-3 rounded-lg border border-border hover:bg-white/5 transition-colors cursor-pointer"
                  >
                    <div className="flex-1">
                      <div className="flex items-center space-x-3 mb-2">
                        <Badge className={getSeverityColor(vuln.severity)}>
                          {vuln.severity.toUpperCase()}
                        </Badge>
                        <span className="text-sm font-medium text-foreground">{vuln.cve_id || 'INTERNAL-001'}</span>
                        {getStatusIcon(vuln.status)}
                      </div>
                      <h4 className="font-medium text-foreground mb-1">{vuln.title}</h4>
                      <div className="flex items-center space-x-4 text-xs text-muted-foreground">
                        <span>Component: {vuln.component}</span>
                        <span>Detected: {formatTimeAgo(vuln.first_detected)}</span>
                        <span>Confidence: {vuln.confidence_score}%</span>
                      </div>
                    </div>
                    <Button variant="ghost" size="icon">
                      <ChevronRight className="h-4 w-4" />
                    </Button>
                  </div>
                </Link>
              )) : (
                <div className="text-center py-8 text-muted-foreground">
                  <Shield className="h-12 w-12 mx-auto mb-4 text-security-secure" />
                  <p>No active vulnerabilities found!</p>
                  <p className="text-sm">Your security posture is looking good.</p>
                </div>
              )}
            </div>
            
            {activeVulns.length > 0 && (
              <div className="mt-6 pt-4 border-t border-border">
                <Link to="/security-report">
                  <Button 
                    className="w-full security-gradient hover:opacity-90 transition-opacity"
                  >
                    <ExternalLink className="h-4 w-4 mr-2" />
                    View Full Security Report
                  </Button>
                </Link>
              </div>
            )}
          </CardContent>
        </Card>

        <Card className="glass-morphism">
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <Zap className="h-5 w-5 text-security-scanning" />
              <span>Auto-Remediation Status</span>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-6">
              <div className="flex items-center justify-between">
                <div>
                  <h4 className="font-medium text-foreground">Automated Fixes Available</h4>
                  <p className="text-sm text-muted-foreground">{autoFixableCount} vulnerabilities can be auto-fixed</p>
                </div>
                {autoFixableCount > 0 && (
                  <Button 
                    size="sm" 
                    className="security-gradient" 
                    onClick={handleFixAll}
                    disabled={isRemediating}
                  >
                    {isRemediating ? 'Fixing...' : 'Fix All'}
                  </Button>
                )}
              </div>
              
              <div className="space-y-3">
                <div className="flex justify-between text-sm">
                  <span className="text-muted-foreground">Success Rate</span>
                  <span className="text-security-secure font-medium">94%</span>
                </div>
                <div className="w-full bg-muted rounded-full h-2">
                  <div className="security-gradient h-2 rounded-full" style={{ width: '94%' }}></div>
                </div>
              </div>
              
              <div className="grid grid-cols-2 gap-4 pt-4">
                <div className="text-center">
                  <div className="text-2xl font-bold text-security-secure">{recentFixes}</div>
                  <div className="text-xs text-muted-foreground">Fixed This Week</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-security-scanning">4.2m</div>
                  <div className="text-xs text-muted-foreground">Avg Fix Time</div>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      <VulnerabilityDetailsModal
        vulnerabilityId={selectedVulnerability?.id || null}
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
      />
    </>
  );
};

// Helper functions (keep existing implementations)
const getSeverityColor = (severity: string) => {
  switch (severity) {
    case 'critical': return 'bg-security-critical text-white';
    case 'high': return 'bg-security-high text-white';
    case 'medium': return 'bg-security-medium text-white';
    case 'low': return 'bg-security-low text-white';
    default: return 'bg-muted text-muted-foreground';
  }
};

const getStatusIcon = (status: string) => {
  switch (status) {
    case 'open': return <AlertTriangle className="h-4 w-4 text-security-critical" />;
    case 'fixed': return <Shield className="h-4 w-4 text-security-secure" />;
    case 'ignored': return <Clock className="h-4 w-4 text-security-medium" />;
    default: return <AlertTriangle className="h-4 w-4 text-muted-foreground" />;
  }
};

const formatTimeAgo = (dateString: string) => {
  const date = new Date(dateString);
  const now = new Date();
  const diffInHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60));
  
  if (diffInHours < 1) return 'Just now';
  if (diffInHours < 24) return `${diffInHours}h ago`;
  return `${Math.floor(diffInHours / 24)}d ago`;
};

export default VulnerabilityDashboard;
