[{"filePath":"/home/reddy/clones/secure-flow-automaton/.eslintrc.security.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/coverage/block-navigation.js","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported).","line":1,"column":1,"severity":1,"nodeType":null,"fix":{"range":[0,20],"text":" "}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"/* eslint-disable */\nvar jumpToCode = (function init() {\n    // Classes of code we would like to highlight in the file view\n    var missingCoverageClasses = ['.cbranch-no', '.cstat-no', '.fstat-no'];\n\n    // Elements to highlight in the file listing view\n    var fileListingElements = ['td.pct.low'];\n\n    // We don't want to select elements that are direct descendants of another match\n    var notSelector = ':not(' + missingCoverageClasses.join('):not(') + ') > '; // becomes `:not(a):not(b) > `\n\n    // Selecter that finds elements on the page to which we can jump\n    var selector =\n        fileListingElements.join(', ') +\n        ', ' +\n        notSelector +\n        missingCoverageClasses.join(', ' + notSelector); // becomes `:not(a):not(b) > a, :not(a):not(b) > b`\n\n    // The NodeList of matching elements\n    var missingCoverageElements = document.querySelectorAll(selector);\n\n    var currentIndex;\n\n    function toggleClass(index) {\n        missingCoverageElements\n            .item(currentIndex)\n            .classList.remove('highlighted');\n        missingCoverageElements.item(index).classList.add('highlighted');\n    }\n\n    function makeCurrent(index) {\n        toggleClass(index);\n        currentIndex = index;\n        missingCoverageElements.item(index).scrollIntoView({\n            behavior: 'smooth',\n            block: 'center',\n            inline: 'center'\n        });\n    }\n\n    function goToPrevious() {\n        var nextIndex = 0;\n        if (typeof currentIndex !== 'number' || currentIndex === 0) {\n            nextIndex = missingCoverageElements.length - 1;\n        } else if (missingCoverageElements.length > 1) {\n            nextIndex = currentIndex - 1;\n        }\n\n        makeCurrent(nextIndex);\n    }\n\n    function goToNext() {\n        var nextIndex = 0;\n\n        if (\n            typeof currentIndex === 'number' &&\n            currentIndex < missingCoverageElements.length - 1\n        ) {\n            nextIndex = currentIndex + 1;\n        }\n\n        makeCurrent(nextIndex);\n    }\n\n    return function jump(event) {\n        if (\n            document.getElementById('fileSearch') === document.activeElement &&\n            document.activeElement != null\n        ) {\n            // if we're currently focused on the search input, we don't want to navigate\n            return;\n        }\n\n        switch (event.which) {\n            case 78: // n\n            case 74: // j\n                goToNext();\n                break;\n            case 66: // b\n            case 75: // k\n            case 80: // p\n                goToPrevious();\n                break;\n        }\n    };\n})();\nwindow.addEventListener('keydown', jumpToCode);\n","usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/coverage/prettify.js","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported).","line":1,"column":1,"severity":1,"nodeType":null,"fix":{"range":[0,20],"text":" "}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"/* eslint-disable */\nwindow.PR_SHOULD_USE_CONTINUATION=true;(function(){var h=[\"break,continue,do,else,for,if,return,while\"];var u=[h,\"auto,case,char,const,default,double,enum,extern,float,goto,int,long,register,short,signed,sizeof,static,struct,switch,typedef,union,unsigned,void,volatile\"];var p=[u,\"catch,class,delete,false,import,new,operator,private,protected,public,this,throw,true,try,typeof\"];var l=[p,\"alignof,align_union,asm,axiom,bool,concept,concept_map,const_cast,constexpr,decltype,dynamic_cast,explicit,export,friend,inline,late_check,mutable,namespace,nullptr,reinterpret_cast,static_assert,static_cast,template,typeid,typename,using,virtual,where\"];var x=[p,\"abstract,boolean,byte,extends,final,finally,implements,import,instanceof,null,native,package,strictfp,super,synchronized,throws,transient\"];var R=[x,\"as,base,by,checked,decimal,delegate,descending,dynamic,event,fixed,foreach,from,group,implicit,in,interface,internal,into,is,lock,object,out,override,orderby,params,partial,readonly,ref,sbyte,sealed,stackalloc,string,select,uint,ulong,unchecked,unsafe,ushort,var\"];var r=\"all,and,by,catch,class,else,extends,false,finally,for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,true,try,unless,until,when,while,yes\";var w=[p,\"debugger,eval,export,function,get,null,set,undefined,var,with,Infinity,NaN\"];var s=\"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,goto,if,import,last,local,my,next,no,our,print,package,redo,require,sub,undef,unless,until,use,wantarray,while,BEGIN,END\";var I=[h,\"and,as,assert,class,def,del,elif,except,exec,finally,from,global,import,in,is,lambda,nonlocal,not,or,pass,print,raise,try,with,yield,False,True,None\"];var f=[h,\"alias,and,begin,case,class,def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,rescue,retry,self,super,then,true,undef,unless,until,when,yield,BEGIN,END\"];var H=[h,\"case,done,elif,esac,eval,fi,function,in,local,set,then,until\"];var A=[l,R,w,s+I,f,H];var e=/^(DIR|FILE|vector|(de|priority_)?queue|list|stack|(const_)?iterator|(multi)?(set|map)|bitset|u?(int|float)\\d*)/;var C=\"str\";var z=\"kwd\";var j=\"com\";var O=\"typ\";var G=\"lit\";var L=\"pun\";var F=\"pln\";var m=\"tag\";var E=\"dec\";var J=\"src\";var P=\"atn\";var n=\"atv\";var N=\"nocode\";var M=\"(?:^^\\\\.?|[+-]|\\\\!|\\\\!=|\\\\!==|\\\\#|\\\\%|\\\\%=|&|&&|&&=|&=|\\\\(|\\\\*|\\\\*=|\\\\+=|\\\\,|\\\\-=|\\\\->|\\\\/|\\\\/=|:|::|\\\\;|<|<<|<<=|<=|=|==|===|>|>=|>>|>>=|>>>|>>>=|\\\\?|\\\\@|\\\\[|\\\\^|\\\\^=|\\\\^\\\\^|\\\\^\\\\^=|\\\\{|\\\\||\\\\|=|\\\\|\\\\||\\\\|\\\\|=|\\\\~|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\\\s*\";function k(Z){var ad=0;var S=false;var ac=false;for(var V=0,U=Z.length;V<U;++V){var ae=Z[V];if(ae.ignoreCase){ac=true}else{if(/[a-z]/i.test(ae.source.replace(/\\\\u[0-9a-f]{4}|\\\\x[0-9a-f]{2}|\\\\[^ux]/gi,\"\"))){S=true;ac=false;break}}}var Y={b:8,t:9,n:10,v:11,f:12,r:13};function ab(ah){var ag=ah.charCodeAt(0);if(ag!==92){return ag}var af=ah.charAt(1);ag=Y[af];if(ag){return ag}else{if(\"0\"<=af&&af<=\"7\"){return parseInt(ah.substring(1),8)}else{if(af===\"u\"||af===\"x\"){return parseInt(ah.substring(2),16)}else{return ah.charCodeAt(1)}}}}function T(af){if(af<32){return(af<16?\"\\\\x0\":\"\\\\x\")+af.toString(16)}var ag=String.fromCharCode(af);if(ag===\"\\\\\"||ag===\"-\"||ag===\"[\"||ag===\"]\"){ag=\"\\\\\"+ag}return ag}function X(am){var aq=am.substring(1,am.length-1).match(new RegExp(\"\\\\\\\\u[0-9A-Fa-f]{4}|\\\\\\\\x[0-9A-Fa-f]{2}|\\\\\\\\[0-3][0-7]{0,2}|\\\\\\\\[0-7]{1,2}|\\\\\\\\[\\\\s\\\\S]|-|[^-\\\\\\\\]\",\"g\"));var ak=[];var af=[];var ao=aq[0]===\"^\";for(var ar=ao?1:0,aj=aq.length;ar<aj;++ar){var ah=aq[ar];if(/\\\\[bdsw]/i.test(ah)){ak.push(ah)}else{var ag=ab(ah);var al;if(ar+2<aj&&\"-\"===aq[ar+1]){al=ab(aq[ar+2]);ar+=2}else{al=ag}af.push([ag,al]);if(!(al<65||ag>122)){if(!(al<65||ag>90)){af.push([Math.max(65,ag)|32,Math.min(al,90)|32])}if(!(al<97||ag>122)){af.push([Math.max(97,ag)&~32,Math.min(al,122)&~32])}}}}af.sort(function(av,au){return(av[0]-au[0])||(au[1]-av[1])});var ai=[];var ap=[NaN,NaN];for(var ar=0;ar<af.length;++ar){var at=af[ar];if(at[0]<=ap[1]+1){ap[1]=Math.max(ap[1],at[1])}else{ai.push(ap=at)}}var an=[\"[\"];if(ao){an.push(\"^\")}an.push.apply(an,ak);for(var ar=0;ar<ai.length;++ar){var at=ai[ar];an.push(T(at[0]));if(at[1]>at[0]){if(at[1]+1>at[0]){an.push(\"-\")}an.push(T(at[1]))}}an.push(\"]\");return an.join(\"\")}function W(al){var aj=al.source.match(new RegExp(\"(?:\\\\[(?:[^\\\\x5C\\\\x5D]|\\\\\\\\[\\\\s\\\\S])*\\\\]|\\\\\\\\u[A-Fa-f0-9]{4}|\\\\\\\\x[A-Fa-f0-9]{2}|\\\\\\\\[0-9]+|\\\\\\\\[^ux0-9]|\\\\(\\\\?[:!=]|[\\\\(\\\\)\\\\^]|[^\\\\x5B\\\\x5C\\\\(\\\\)\\\\^]+)\",\"g\"));var ah=aj.length;var an=[];for(var ak=0,am=0;ak<ah;++ak){var ag=aj[ak];if(ag===\"(\"){++am}else{if(\"\\\\\"===ag.charAt(0)){var af=+ag.substring(1);if(af&&af<=am){an[af]=-1}}}}for(var ak=1;ak<an.length;++ak){if(-1===an[ak]){an[ak]=++ad}}for(var ak=0,am=0;ak<ah;++ak){var ag=aj[ak];if(ag===\"(\"){++am;if(an[am]===undefined){aj[ak]=\"(?:\"}}else{if(\"\\\\\"===ag.charAt(0)){var af=+ag.substring(1);if(af&&af<=am){aj[ak]=\"\\\\\"+an[am]}}}}for(var ak=0,am=0;ak<ah;++ak){if(\"^\"===aj[ak]&&\"^\"!==aj[ak+1]){aj[ak]=\"\"}}if(al.ignoreCase&&S){for(var ak=0;ak<ah;++ak){var ag=aj[ak];var ai=ag.charAt(0);if(ag.length>=2&&ai===\"[\"){aj[ak]=X(ag)}else{if(ai!==\"\\\\\"){aj[ak]=ag.replace(/[a-zA-Z]/g,function(ao){var ap=ao.charCodeAt(0);return\"[\"+String.fromCharCode(ap&~32,ap|32)+\"]\"})}}}}return aj.join(\"\")}var aa=[];for(var V=0,U=Z.length;V<U;++V){var ae=Z[V];if(ae.global||ae.multiline){throw new Error(\"\"+ae)}aa.push(\"(?:\"+W(ae)+\")\")}return new RegExp(aa.join(\"|\"),ac?\"gi\":\"g\")}function a(V){var U=/(?:^|\\s)nocode(?:\\s|$)/;var X=[];var T=0;var Z=[];var W=0;var S;if(V.currentStyle){S=V.currentStyle.whiteSpace}else{if(window.getComputedStyle){S=document.defaultView.getComputedStyle(V,null).getPropertyValue(\"white-space\")}}var Y=S&&\"pre\"===S.substring(0,3);function aa(ab){switch(ab.nodeType){case 1:if(U.test(ab.className)){return}for(var ae=ab.firstChild;ae;ae=ae.nextSibling){aa(ae)}var ad=ab.nodeName;if(\"BR\"===ad||\"LI\"===ad){X[W]=\"\\n\";Z[W<<1]=T++;Z[(W++<<1)|1]=ab}break;case 3:case 4:var ac=ab.nodeValue;if(ac.length){if(!Y){ac=ac.replace(/[ \\t\\r\\n]+/g,\" \")}else{ac=ac.replace(/\\r\\n?/g,\"\\n\")}X[W]=ac;Z[W<<1]=T;T+=ac.length;Z[(W++<<1)|1]=ab}break}}aa(V);return{sourceCode:X.join(\"\").replace(/\\n$/,\"\"),spans:Z}}function B(S,U,W,T){if(!U){return}var V={sourceCode:U,basePos:S};W(V);T.push.apply(T,V.decorations)}var v=/\\S/;function o(S){var V=undefined;for(var U=S.firstChild;U;U=U.nextSibling){var T=U.nodeType;V=(T===1)?(V?S:U):(T===3)?(v.test(U.nodeValue)?S:V):V}return V===S?undefined:V}function g(U,T){var S={};var V;(function(){var ad=U.concat(T);var ah=[];var ag={};for(var ab=0,Z=ad.length;ab<Z;++ab){var Y=ad[ab];var ac=Y[3];if(ac){for(var ae=ac.length;--ae>=0;){S[ac.charAt(ae)]=Y}}var af=Y[1];var aa=\"\"+af;if(!ag.hasOwnProperty(aa)){ah.push(af);ag[aa]=null}}ah.push(/[\\0-\\uffff]/);V=k(ah)})();var X=T.length;var W=function(ah){var Z=ah.sourceCode,Y=ah.basePos;var ad=[Y,F];var af=0;var an=Z.match(V)||[];var aj={};for(var ae=0,aq=an.length;ae<aq;++ae){var ag=an[ae];var ap=aj[ag];var ai=void 0;var am;if(typeof ap===\"string\"){am=false}else{var aa=S[ag.charAt(0)];if(aa){ai=ag.match(aa[1]);ap=aa[0]}else{for(var ao=0;ao<X;++ao){aa=T[ao];ai=ag.match(aa[1]);if(ai){ap=aa[0];break}}if(!ai){ap=F}}am=ap.length>=5&&\"lang-\"===ap.substring(0,5);if(am&&!(ai&&typeof ai[1]===\"string\")){am=false;ap=J}if(!am){aj[ag]=ap}}var ab=af;af+=ag.length;if(!am){ad.push(Y+ab,ap)}else{var al=ai[1];var ak=ag.indexOf(al);var ac=ak+al.length;if(ai[2]){ac=ag.length-ai[2].length;ak=ac-al.length}var ar=ap.substring(5);B(Y+ab,ag.substring(0,ak),W,ad);B(Y+ab+ak,al,q(ar,al),ad);B(Y+ab+ac,ag.substring(ac),W,ad)}}ah.decorations=ad};return W}function i(T){var W=[],S=[];if(T.tripleQuotedStrings){W.push([C,/^(?:\\'\\'\\'(?:[^\\'\\\\]|\\\\[\\s\\S]|\\'{1,2}(?=[^\\']))*(?:\\'\\'\\'|$)|\\\"\\\"\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S]|\\\"{1,2}(?=[^\\\"]))*(?:\\\"\\\"\\\"|$)|\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$))/,null,\"'\\\"\"])}else{if(T.multiLineStrings){W.push([C,/^(?:\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$)|\\`(?:[^\\\\\\`]|\\\\[\\s\\S])*(?:\\`|$))/,null,\"'\\\"`\"])}else{W.push([C,/^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*(?:\\'|$)|\\\"(?:[^\\\\\\\"\\r\\n]|\\\\.)*(?:\\\"|$))/,null,\"\\\"'\"])}}if(T.verbatimStrings){S.push([C,/^@\\\"(?:[^\\\"]|\\\"\\\")*(?:\\\"|$)/,null])}var Y=T.hashComments;if(Y){if(T.cStyleComments){if(Y>1){W.push([j,/^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/,null,\"#\"])}else{W.push([j,/^#(?:(?:define|elif|else|endif|error|ifdef|include|ifndef|line|pragma|undef|warning)\\b|[^\\r\\n]*)/,null,\"#\"])}S.push([C,/^<(?:(?:(?:\\.\\.\\/)*|\\/?)(?:[\\w-]+(?:\\/[\\w-]+)+)?[\\w-]+\\.h|[a-z]\\w*)>/,null])}else{W.push([j,/^#[^\\r\\n]*/,null,\"#\"])}}if(T.cStyleComments){S.push([j,/^\\/\\/[^\\r\\n]*/,null]);S.push([j,/^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,null])}if(T.regexLiterals){var X=(\"/(?=[^/*])(?:[^/\\\\x5B\\\\x5C]|\\\\x5C[\\\\s\\\\S]|\\\\x5B(?:[^\\\\x5C\\\\x5D]|\\\\x5C[\\\\s\\\\S])*(?:\\\\x5D|$))+/\");S.push([\"lang-regex\",new RegExp(\"^\"+M+\"(\"+X+\")\")])}var V=T.types;if(V){S.push([O,V])}var U=(\"\"+T.keywords).replace(/^ | $/g,\"\");if(U.length){S.push([z,new RegExp(\"^(?:\"+U.replace(/[\\s,]+/g,\"|\")+\")\\\\b\"),null])}W.push([F,/^\\s+/,null,\" \\r\\n\\t\\xA0\"]);S.push([G,/^@[a-z_$][a-z_$@0-9]*/i,null],[O,/^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\\w+_t\\b)/,null],[F,/^[a-z_$][a-z_$@0-9]*/i,null],[G,new RegExp(\"^(?:0x[a-f0-9]+|(?:\\\\d(?:_\\\\d+)*\\\\d*(?:\\\\.\\\\d*)?|\\\\.\\\\d\\\\+)(?:e[+\\\\-]?\\\\d+)?)[a-z]*\",\"i\"),null,\"0123456789\"],[F,/^\\\\[\\s\\S]?/,null],[L,/^.[^\\s\\w\\.$@\\'\\\"\\`\\/\\#\\\\]*/,null]);return g(W,S)}var K=i({keywords:A,hashComments:true,cStyleComments:true,multiLineStrings:true,regexLiterals:true});function Q(V,ag){var U=/(?:^|\\s)nocode(?:\\s|$)/;var ab=/\\r\\n?|\\n/;var ac=V.ownerDocument;var S;if(V.currentStyle){S=V.currentStyle.whiteSpace}else{if(window.getComputedStyle){S=ac.defaultView.getComputedStyle(V,null).getPropertyValue(\"white-space\")}}var Z=S&&\"pre\"===S.substring(0,3);var af=ac.createElement(\"LI\");while(V.firstChild){af.appendChild(V.firstChild)}var W=[af];function ae(al){switch(al.nodeType){case 1:if(U.test(al.className)){break}if(\"BR\"===al.nodeName){ad(al);if(al.parentNode){al.parentNode.removeChild(al)}}else{for(var an=al.firstChild;an;an=an.nextSibling){ae(an)}}break;case 3:case 4:if(Z){var am=al.nodeValue;var aj=am.match(ab);if(aj){var ai=am.substring(0,aj.index);al.nodeValue=ai;var ah=am.substring(aj.index+aj[0].length);if(ah){var ak=al.parentNode;ak.insertBefore(ac.createTextNode(ah),al.nextSibling)}ad(al);if(!ai){al.parentNode.removeChild(al)}}}break}}function ad(ak){while(!ak.nextSibling){ak=ak.parentNode;if(!ak){return}}function ai(al,ar){var aq=ar?al.cloneNode(false):al;var ao=al.parentNode;if(ao){var ap=ai(ao,1);var an=al.nextSibling;ap.appendChild(aq);for(var am=an;am;am=an){an=am.nextSibling;ap.appendChild(am)}}return aq}var ah=ai(ak.nextSibling,0);for(var aj;(aj=ah.parentNode)&&aj.nodeType===1;){ah=aj}W.push(ah)}for(var Y=0;Y<W.length;++Y){ae(W[Y])}if(ag===(ag|0)){W[0].setAttribute(\"value\",ag)}var aa=ac.createElement(\"OL\");aa.className=\"linenums\";var X=Math.max(0,((ag-1))|0)||0;for(var Y=0,T=W.length;Y<T;++Y){af=W[Y];af.className=\"L\"+((Y+X)%10);if(!af.firstChild){af.appendChild(ac.createTextNode(\"\\xA0\"))}aa.appendChild(af)}V.appendChild(aa)}function D(ac){var aj=/\\bMSIE\\b/.test(navigator.userAgent);var am=/\\n/g;var al=ac.sourceCode;var an=al.length;var V=0;var aa=ac.spans;var T=aa.length;var ah=0;var X=ac.decorations;var Y=X.length;var Z=0;X[Y]=an;var ar,aq;for(aq=ar=0;aq<Y;){if(X[aq]!==X[aq+2]){X[ar++]=X[aq++];X[ar++]=X[aq++]}else{aq+=2}}Y=ar;for(aq=ar=0;aq<Y;){var at=X[aq];var ab=X[aq+1];var W=aq+2;while(W+2<=Y&&X[W+1]===ab){W+=2}X[ar++]=at;X[ar++]=ab;aq=W}Y=X.length=ar;var ae=null;while(ah<T){var af=aa[ah];var S=aa[ah+2]||an;var ag=X[Z];var ap=X[Z+2]||an;var W=Math.min(S,ap);var ak=aa[ah+1];var U;if(ak.nodeType!==1&&(U=al.substring(V,W))){if(aj){U=U.replace(am,\"\\r\")}ak.nodeValue=U;var ai=ak.ownerDocument;var ao=ai.createElement(\"SPAN\");ao.className=X[Z+1];var ad=ak.parentNode;ad.replaceChild(ao,ak);ao.appendChild(ak);if(V<S){aa[ah+1]=ak=ai.createTextNode(al.substring(W,S));ad.insertBefore(ak,ao.nextSibling)}}V=W;if(V>=S){ah+=2}if(V>=ap){Z+=2}}}var t={};function c(U,V){for(var S=V.length;--S>=0;){var T=V[S];if(!t.hasOwnProperty(T)){t[T]=U}else{if(window.console){console.warn(\"cannot override language handler %s\",T)}}}}function q(T,S){if(!(T&&t.hasOwnProperty(T))){T=/^\\s*</.test(S)?\"default-markup\":\"default-code\"}return t[T]}c(K,[\"default-code\"]);c(g([],[[F,/^[^<?]+/],[E,/^<!\\w[^>]*(?:>|$)/],[j,/^<\\!--[\\s\\S]*?(?:-\\->|$)/],[\"lang-\",/^<\\?([\\s\\S]+?)(?:\\?>|$)/],[\"lang-\",/^<%([\\s\\S]+?)(?:%>|$)/],[L,/^(?:<[%?]|[%?]>)/],[\"lang-\",/^<xmp\\b[^>]*>([\\s\\S]+?)<\\/xmp\\b[^>]*>/i],[\"lang-js\",/^<script\\b[^>]*>([\\s\\S]*?)(<\\/script\\b[^>]*>)/i],[\"lang-css\",/^<style\\b[^>]*>([\\s\\S]*?)(<\\/style\\b[^>]*>)/i],[\"lang-in.tag\",/^(<\\/?[a-z][^<>]*>)/i]]),[\"default-markup\",\"htm\",\"html\",\"mxml\",\"xhtml\",\"xml\",\"xsl\"]);c(g([[F,/^[\\s]+/,null,\" \\t\\r\\n\"],[n,/^(?:\\\"[^\\\"]*\\\"?|\\'[^\\']*\\'?)/,null,\"\\\"'\"]],[[m,/^^<\\/?[a-z](?:[\\w.:-]*\\w)?|\\/?>$/i],[P,/^(?!style[\\s=]|on)[a-z](?:[\\w:-]*\\w)?/i],[\"lang-uq.val\",/^=\\s*([^>\\'\\\"\\s]*(?:[^>\\'\\\"\\s\\/]|\\/(?=\\s)))/],[L,/^[=<>\\/]+/],[\"lang-js\",/^on\\w+\\s*=\\s*\\\"([^\\\"]+)\\\"/i],[\"lang-js\",/^on\\w+\\s*=\\s*\\'([^\\']+)\\'/i],[\"lang-js\",/^on\\w+\\s*=\\s*([^\\\"\\'>\\s]+)/i],[\"lang-css\",/^style\\s*=\\s*\\\"([^\\\"]+)\\\"/i],[\"lang-css\",/^style\\s*=\\s*\\'([^\\']+)\\'/i],[\"lang-css\",/^style\\s*=\\s*([^\\\"\\'>\\s]+)/i]]),[\"in.tag\"]);c(g([],[[n,/^[\\s\\S]+/]]),[\"uq.val\"]);c(i({keywords:l,hashComments:true,cStyleComments:true,types:e}),[\"c\",\"cc\",\"cpp\",\"cxx\",\"cyc\",\"m\"]);c(i({keywords:\"null,true,false\"}),[\"json\"]);c(i({keywords:R,hashComments:true,cStyleComments:true,verbatimStrings:true,types:e}),[\"cs\"]);c(i({keywords:x,cStyleComments:true}),[\"java\"]);c(i({keywords:H,hashComments:true,multiLineStrings:true}),[\"bsh\",\"csh\",\"sh\"]);c(i({keywords:I,hashComments:true,multiLineStrings:true,tripleQuotedStrings:true}),[\"cv\",\"py\"]);c(i({keywords:s,hashComments:true,multiLineStrings:true,regexLiterals:true}),[\"perl\",\"pl\",\"pm\"]);c(i({keywords:f,hashComments:true,multiLineStrings:true,regexLiterals:true}),[\"rb\"]);c(i({keywords:w,cStyleComments:true,regexLiterals:true}),[\"js\"]);c(i({keywords:r,hashComments:3,cStyleComments:true,multilineStrings:true,tripleQuotedStrings:true,regexLiterals:true}),[\"coffee\"]);c(g([],[[C,/^[\\s\\S]+/]]),[\"regex\"]);function d(V){var U=V.langExtension;try{var S=a(V.sourceNode);var T=S.sourceCode;V.sourceCode=T;V.spans=S.spans;V.basePos=0;q(U,T)(V);D(V)}catch(W){if(\"console\" in window){console.log(W&&W.stack?W.stack:W)}}}function y(W,V,U){var S=document.createElement(\"PRE\");S.innerHTML=W;if(U){Q(S,U)}var T={langExtension:V,numberLines:U,sourceNode:S};d(T);return S.innerHTML}function b(ad){function Y(af){return document.getElementsByTagName(af)}var ac=[Y(\"pre\"),Y(\"code\"),Y(\"xmp\")];var T=[];for(var aa=0;aa<ac.length;++aa){for(var Z=0,V=ac[aa].length;Z<V;++Z){T.push(ac[aa][Z])}}ac=null;var W=Date;if(!W.now){W={now:function(){return +(new Date)}}}var X=0;var S;var ab=/\\blang(?:uage)?-([\\w.]+)(?!\\S)/;var ae=/\\bprettyprint\\b/;function U(){var ag=(window.PR_SHOULD_USE_CONTINUATION?W.now()+250:Infinity);for(;X<T.length&&W.now()<ag;X++){var aj=T[X];var ai=aj.className;if(ai.indexOf(\"prettyprint\")>=0){var ah=ai.match(ab);var am;if(!ah&&(am=o(aj))&&\"CODE\"===am.tagName){ah=am.className.match(ab)}if(ah){ah=ah[1]}var al=false;for(var ak=aj.parentNode;ak;ak=ak.parentNode){if((ak.tagName===\"pre\"||ak.tagName===\"code\"||ak.tagName===\"xmp\")&&ak.className&&ak.className.indexOf(\"prettyprint\")>=0){al=true;break}}if(!al){var af=aj.className.match(/\\blinenums\\b(?::(\\d+))?/);af=af?af[1]&&af[1].length?+af[1]:true:false;if(af){Q(aj,af)}S={langExtension:ah,sourceNode:aj,numberLines:af};d(S)}}}if(X<T.length){setTimeout(U,250)}else{if(ad){ad()}}}U()}window.prettyPrintOne=y;window.prettyPrint=b;window.PR={createSimpleLexer:g,registerLangHandler:c,sourceDecorator:i,PR_ATTRIB_NAME:P,PR_ATTRIB_VALUE:n,PR_COMMENT:j,PR_DECLARATION:E,PR_KEYWORD:z,PR_LITERAL:G,PR_NOCODE:N,PR_PLAIN:F,PR_PUNCTUATION:L,PR_SOURCE:J,PR_STRING:C,PR_TAG:m,PR_TYPE:O}})();PR.registerLangHandler(PR.createSimpleLexer([],[[PR.PR_DECLARATION,/^<!\\w[^>]*(?:>|$)/],[PR.PR_COMMENT,/^<\\!--[\\s\\S]*?(?:-\\->|$)/],[PR.PR_PUNCTUATION,/^(?:<[%?]|[%?]>)/],[\"lang-\",/^<\\?([\\s\\S]+?)(?:\\?>|$)/],[\"lang-\",/^<%([\\s\\S]+?)(?:%>|$)/],[\"lang-\",/^<xmp\\b[^>]*>([\\s\\S]+?)<\\/xmp\\b[^>]*>/i],[\"lang-handlebars\",/^<script\\b[^>]*type\\s*=\\s*['\"]?text\\/x-handlebars-template['\"]?\\b[^>]*>([\\s\\S]*?)(<\\/script\\b[^>]*>)/i],[\"lang-js\",/^<script\\b[^>]*>([\\s\\S]*?)(<\\/script\\b[^>]*>)/i],[\"lang-css\",/^<style\\b[^>]*>([\\s\\S]*?)(<\\/style\\b[^>]*>)/i],[\"lang-in.tag\",/^(<\\/?[a-z][^<>]*>)/i],[PR.PR_DECLARATION,/^{{[#^>/]?\\s*[\\w.][^}]*}}/],[PR.PR_DECLARATION,/^{{&?\\s*[\\w.][^}]*}}/],[PR.PR_DECLARATION,/^{{{>?\\s*[\\w.][^}]*}}}/],[PR.PR_COMMENT,/^{{![^}]*}}/]]),[\"handlebars\",\"hbs\"]);PR.registerLangHandler(PR.createSimpleLexer([[PR.PR_PLAIN,/^[ \\t\\r\\n\\f]+/,null,\" \\t\\r\\n\\f\"]],[[PR.PR_STRING,/^\\\"(?:[^\\n\\r\\f\\\\\\\"]|\\\\(?:\\r\\n?|\\n|\\f)|\\\\[\\s\\S])*\\\"/,null],[PR.PR_STRING,/^\\'(?:[^\\n\\r\\f\\\\\\']|\\\\(?:\\r\\n?|\\n|\\f)|\\\\[\\s\\S])*\\'/,null],[\"lang-css-str\",/^url\\(([^\\)\\\"\\']*)\\)/i],[PR.PR_KEYWORD,/^(?:url|rgb|\\!important|@import|@page|@media|@charset|inherit)(?=[^\\-\\w]|$)/i,null],[\"lang-css-kw\",/^(-?(?:[_a-z]|(?:\\\\[0-9a-f]+ ?))(?:[_a-z0-9\\-]|\\\\(?:\\\\[0-9a-f]+ ?))*)\\s*:/i],[PR.PR_COMMENT,/^\\/\\*[^*]*\\*+(?:[^\\/*][^*]*\\*+)*\\//],[PR.PR_COMMENT,/^(?:<!--|-->)/],[PR.PR_LITERAL,/^(?:\\d+|\\d*\\.\\d+)(?:%|[a-z]+)?/i],[PR.PR_LITERAL,/^#(?:[0-9a-f]{3}){1,2}/i],[PR.PR_PLAIN,/^-?(?:[_a-z]|(?:\\\\[\\da-f]+ ?))(?:[_a-z\\d\\-]|\\\\(?:\\\\[\\da-f]+ ?))*/i],[PR.PR_PUNCTUATION,/^[^\\s\\w\\'\\\"]+/]]),[\"css\"]);PR.registerLangHandler(PR.createSimpleLexer([],[[PR.PR_KEYWORD,/^-?(?:[_a-z]|(?:\\\\[\\da-f]+ ?))(?:[_a-z\\d\\-]|\\\\(?:\\\\[\\da-f]+ ?))*/i]]),[\"css-kw\"]);PR.registerLangHandler(PR.createSimpleLexer([],[[PR.PR_STRING,/^[^\\)\\\"\\']+/]]),[\"css-str\"]);\n","usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/coverage/sorter.js","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported).","line":1,"column":1,"severity":1,"nodeType":null,"fix":{"range":[0,20],"text":" "}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"/* eslint-disable */\nvar addSorting = (function() {\n    'use strict';\n    var cols,\n        currentSort = {\n            index: 0,\n            desc: false\n        };\n\n    // returns the summary table element\n    function getTable() {\n        return document.querySelector('.coverage-summary');\n    }\n    // returns the thead element of the summary table\n    function getTableHeader() {\n        return getTable().querySelector('thead tr');\n    }\n    // returns the tbody element of the summary table\n    function getTableBody() {\n        return getTable().querySelector('tbody');\n    }\n    // returns the th element for nth column\n    function getNthColumn(n) {\n        return getTableHeader().querySelectorAll('th')[n];\n    }\n\n    function onFilterInput() {\n        const searchValue = document.getElementById('fileSearch').value;\n        const rows = document.getElementsByTagName('tbody')[0].children;\n        for (let i = 0; i < rows.length; i++) {\n            const row = rows[i];\n            if (\n                row.textContent\n                    .toLowerCase()\n                    .includes(searchValue.toLowerCase())\n            ) {\n                row.style.display = '';\n            } else {\n                row.style.display = 'none';\n            }\n        }\n    }\n\n    // loads the search box\n    function addSearchBox() {\n        var template = document.getElementById('filterTemplate');\n        var templateClone = template.content.cloneNode(true);\n        templateClone.getElementById('fileSearch').oninput = onFilterInput;\n        template.parentElement.appendChild(templateClone);\n    }\n\n    // loads all columns\n    function loadColumns() {\n        var colNodes = getTableHeader().querySelectorAll('th'),\n            colNode,\n            cols = [],\n            col,\n            i;\n\n        for (i = 0; i < colNodes.length; i += 1) {\n            colNode = colNodes[i];\n            col = {\n                key: colNode.getAttribute('data-col'),\n                sortable: !colNode.getAttribute('data-nosort'),\n                type: colNode.getAttribute('data-type') || 'string'\n            };\n            cols.push(col);\n            if (col.sortable) {\n                col.defaultDescSort = col.type === 'number';\n                colNode.innerHTML =\n                    colNode.innerHTML + '<span class=\"sorter\"></span>';\n            }\n        }\n        return cols;\n    }\n    // attaches a data attribute to every tr element with an object\n    // of data values keyed by column name\n    function loadRowData(tableRow) {\n        var tableCols = tableRow.querySelectorAll('td'),\n            colNode,\n            col,\n            data = {},\n            i,\n            val;\n        for (i = 0; i < tableCols.length; i += 1) {\n            colNode = tableCols[i];\n            col = cols[i];\n            val = colNode.getAttribute('data-value');\n            if (col.type === 'number') {\n                val = Number(val);\n            }\n            data[col.key] = val;\n        }\n        return data;\n    }\n    // loads all row data\n    function loadData() {\n        var rows = getTableBody().querySelectorAll('tr'),\n            i;\n\n        for (i = 0; i < rows.length; i += 1) {\n            rows[i].data = loadRowData(rows[i]);\n        }\n    }\n    // sorts the table using the data for the ith column\n    function sortByIndex(index, desc) {\n        var key = cols[index].key,\n            sorter = function(a, b) {\n                a = a.data[key];\n                b = b.data[key];\n                return a < b ? -1 : a > b ? 1 : 0;\n            },\n            finalSorter = sorter,\n            tableBody = document.querySelector('.coverage-summary tbody'),\n            rowNodes = tableBody.querySelectorAll('tr'),\n            rows = [],\n            i;\n\n        if (desc) {\n            finalSorter = function(a, b) {\n                return -1 * sorter(a, b);\n            };\n        }\n\n        for (i = 0; i < rowNodes.length; i += 1) {\n            rows.push(rowNodes[i]);\n            tableBody.removeChild(rowNodes[i]);\n        }\n\n        rows.sort(finalSorter);\n\n        for (i = 0; i < rows.length; i += 1) {\n            tableBody.appendChild(rows[i]);\n        }\n    }\n    // removes sort indicators for current column being sorted\n    function removeSortIndicators() {\n        var col = getNthColumn(currentSort.index),\n            cls = col.className;\n\n        cls = cls.replace(/ sorted$/, '').replace(/ sorted-desc$/, '');\n        col.className = cls;\n    }\n    // adds sort indicators for current column being sorted\n    function addSortIndicators() {\n        getNthColumn(currentSort.index).className += currentSort.desc\n            ? ' sorted-desc'\n            : ' sorted';\n    }\n    // adds event listeners for all sorter widgets\n    function enableUI() {\n        var i,\n            el,\n            ithSorter = function ithSorter(i) {\n                var col = cols[i];\n\n                return function() {\n                    var desc = col.defaultDescSort;\n\n                    if (currentSort.index === i) {\n                        desc = !currentSort.desc;\n                    }\n                    sortByIndex(i, desc);\n                    removeSortIndicators();\n                    currentSort.index = i;\n                    currentSort.desc = desc;\n                    addSortIndicators();\n                };\n            };\n        for (i = 0; i < cols.length; i += 1) {\n            if (cols[i].sortable) {\n                // add the click event handler on the th so users\n                // dont have to click on those tiny arrows\n                el = getNthColumn(i).querySelector('.sorter').parentElement;\n                if (el.addEventListener) {\n                    el.addEventListener('click', ithSorter(i));\n                } else {\n                    el.attachEvent('onclick', ithSorter(i));\n                }\n            }\n        }\n    }\n    // adds sorting functionality to the UI\n    return function() {\n        if (!getTable()) {\n            return;\n        }\n        cols = loadColumns();\n        loadData();\n        addSearchBox();\n        addSortIndicators();\n        enableUI();\n    };\n})();\n\nwindow.addEventListener('load', addSorting);\n","usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/dist/assets/Auth.tsx.Bd15r5J6.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/dist/assets/ComplianceOverview.tsx.xlY21X68.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/dist/assets/HowItWorksModal.tsx.BnkqI7wK.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/dist/assets/Index.tsx.CxjjOm_T.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/dist/assets/Monitoring.tsx.OZTIleWF.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/dist/assets/NotFound.tsx.B1NAKICB.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/dist/assets/PipelineFlow.tsx.C2atfssf.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/dist/assets/Profile.tsx.8I6xK4Eq.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/dist/assets/ProjectTimeline.tsx.C63PYvOL.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/dist/assets/SecurityMetrics.tsx.DAMQwfQh.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/dist/assets/Settings.tsx.BEk4q7wa.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/dist/assets/ToolSelection.tsx.Cqy3wFnq.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/dist/assets/UserPersonas.tsx.4dcm9VDE.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/dist/assets/VulnerabilityDashboard.tsx.Dy-4OMKc.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/dist/assets/chunk.BT-fEzk8.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/dist/assets/chunk.COrQoTlU.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/dist/assets/chunk.Cglz113D.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/dist/assets/chunk.DGHC3bKr.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/dist/assets/chunk.DKJFotcd.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/dist/assets/chunk.DaJLI9Vn.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/dist/assets/chunk.Dan7uXoO.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/dist/assets/chunk.DwL3lv6Y.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/dist/assets/chunk.DxMkKKHV.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/dist/assets/chunk.EmSGdJEW.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/dist/assets/chunk.IGvU4XGq.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/dist/assets/chunk.j697RUXv.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/dist/assets/main.Dw-v8kHB.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/dist/sw.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/postcss.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/public/sw.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/scripts/auto-setup.js","messages":[{"ruleId":"security/detect-non-literal-fs-filename","severity":1,"message":"Found appendFileSync from package \"fs\" with non literal argument at index 0","line":30,"column":9,"nodeType":"CallExpression","endLine":30,"endColumn":57},{"ruleId":"security/detect-non-literal-fs-filename","severity":1,"message":"Found writeFileSync from package \"fs\" with non literal argument at index 0","line":179,"column":9,"nodeType":"CallExpression","endLine":179,"endColumn":83},{"ruleId":"security/detect-non-literal-fs-filename","severity":1,"message":"Found writeFileSync from package \"fs\" with non literal argument at index 0","line":222,"column":9,"nodeType":"CallExpression","endLine":222,"endColumn":86}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\n\n/**\n * 🤖 SECURE-FLOW-AUTOMATON - FULL AUTOMATION SETUP\n * This script sets up everything from scratch automatically\n */\n\nimport { execSync, spawn } from 'child_process';\nimport fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nclass FullAutomationSetup {\n    constructor() {\n        this.projectRoot = process.cwd();\n        this.logFile = path.join(this.projectRoot, 'automation.log');\n        this.setupComplete = false;\n        \n        console.log('🚀 SECURE-FLOW-AUTOMATON FULL AUTOMATION STARTING...');\n        console.log('==================================================');\n    }\n\n    log(message, level = 'INFO') {\n        const timestamp = new Date().toISOString();\n        const logEntry = `[${timestamp}] [${level}] ${message}`;\n        console.log(logEntry);\n        fs.appendFileSync(this.logFile, logEntry + '\\n');\n    }\n\n    async executeCommand(command, description) {\n        try {\n            this.log(`🔄 ${description}...`);\n            const result = execSync(command, { \n                stdio: 'pipe',\n                encoding: 'utf8',\n                cwd: this.projectRoot \n            });\n            this.log(`✅ ${description} completed`);\n            return result;\n        } catch (error) {\n            this.log(`❌ ${description} failed: ${error.message}`, 'ERROR');\n            throw error;\n        }\n    }\n\n    async setupProject() {\n        this.log('🏗️ Setting up project from scratch...');\n        \n        // 1. Verify we're in the right directory\n        if (!fs.existsSync('package.json')) {\n            throw new Error('package.json not found. Are you in the right directory?');\n        }\n\n        // 2. Clean install dependencies\n        await this.executeCommand('npm ci', 'Installing dependencies');\n\n        // 3. Run all tests to ensure everything works\n        await this.executeCommand('npm test', 'Running tests');\n\n        // 4. Build the project\n        await this.executeCommand('npm run build', 'Building project');\n\n        // 5. Run linting\n        await this.executeCommand('npm run lint', 'Running lint checks');\n\n        // 6. Run security scans\n        await this.executeCommand('npm run lint:security', 'Running security scans');\n\n        this.log('✅ Project setup completed successfully');\n    }\n\n    async fixIssuesAutomatically() {\n        this.log('🔧 Auto-fixing common issues...');\n\n        try {\n            // Fix npm audit issues\n            await this.executeCommand('npm audit fix', 'Fixing security vulnerabilities');\n        } catch (error) {\n            this.log('⚠️ Some audit issues require manual intervention', 'WARN');\n        }\n\n        try {\n            // Fix lint issues that can be auto-fixed\n            await this.executeCommand('npm run lint:fix', 'Auto-fixing lint issues');\n        } catch (error) {\n            this.log('⚠️ Some lint issues require manual intervention', 'WARN');\n        }\n\n        this.log('✅ Auto-fixes completed');\n    }\n\n    async commitAndPush() {\n        this.log('📤 Committing and pushing changes...');\n\n        try {\n            // Check if there are changes\n            const status = execSync('git status --porcelain', { encoding: 'utf8' });\n            \n            if (!status.trim()) {\n                this.log('📝 No changes to commit');\n                return;\n            }\n\n            // Configure git if needed\n            try {\n                execSync('git config user.name', { stdio: 'pipe' });\n            } catch {\n                await this.executeCommand('git config user.name \"AutoBot\"', 'Setting git username');\n                await this.executeCommand('git config user.email \"autobot@secure-flow.dev\"', 'Setting git email');\n            }\n\n            // Add all changes\n            await this.executeCommand('git add .', 'Adding changes to git');\n\n            // Create commit message\n            const timestamp = new Date().toISOString();\n            const commitMessage = `🤖 AUTOMATED SETUP & FIXES - ${timestamp}\n\n✅ Project setup completed automatically\n✅ Dependencies installed and updated\n✅ All tests passing\n✅ Security scans completed\n✅ Lint issues auto-fixed\n✅ Build successful\n\nGenerated by: Full Automation Setup Script`;\n\n            await this.executeCommand(`git commit -m \"${commitMessage}\"`, 'Committing changes');\n            await this.executeCommand('git push origin main', 'Pushing to GitHub');\n\n            this.log('✅ Successfully pushed to GitHub');\n        } catch (error) {\n            this.log(`❌ Git operations failed: ${error.message}`, 'ERROR');\n            throw error;\n        }\n    }\n\n    async monitorWorkflows() {\n        this.log('👀 Monitoring GitHub Actions workflows...');\n        \n        // Give GitHub Actions time to start\n        this.log('⏳ Waiting for GitHub Actions to start...');\n        await new Promise(resolve => setTimeout(resolve, 10000));\n\n        this.log('🔍 GitHub Actions should now be running');\n        this.log('📊 Check your repository Actions tab for real-time status');\n        \n        return true;\n    }\n\n    async setupContinuousMonitoring() {\n        this.log('🔄 Setting up continuous monitoring...');\n\n        const monitorScript = `\n#!/bin/bash\n\n# Continuous monitoring script\nwhile true; do\n    echo \"🔍 \\$(date): Checking project status...\"\n    \n    # Pull latest changes\n    git pull origin main\n    \n    # Run tests\n    if npm test; then\n        echo \"✅ Tests passing\"\n    else\n        echo \"❌ Tests failing - investigation needed\"\n    fi\n    \n    # Wait 5 minutes before next check\n    sleep 300\ndone\n`;\n\n        fs.writeFileSync(path.join(this.projectRoot, 'monitor.sh'), monitorScript);\n        execSync('chmod +x monitor.sh');\n        \n        this.log('✅ Continuous monitoring script created (monitor.sh)');\n    }\n\n    async generateReport() {\n        const report = `\n🎉 SECURE-FLOW-AUTOMATON - AUTOMATION COMPLETE!\n===============================================\n\n📊 SETUP SUMMARY:\n✅ Dependencies: Installed and updated\n✅ Tests: All passing\n✅ Build: Successful  \n✅ Security: Scanned and secured\n✅ Linting: Clean code\n✅ Git: Committed and pushed\n✅ GitHub Actions: Triggered\n✅ Monitoring: Enabled\n\n🚀 WHAT'S RUNNING AUTOMATICALLY:\n- GitHub Actions workflows (every push)\n- Security scans (daily)\n- Dependency updates (automated)\n- Code quality checks (every commit)\n- Build and deployment pipeline\n\n📱 MONITORING:\n- Check GitHub Actions tab for workflow status\n- Run './monitor.sh' for continuous local monitoring\n- Logs available in: automation.log\n\n🔗 NEXT STEPS:\n1. Monitor GitHub Actions workflows\n2. Set up production deployment\n3. Configure real security integrations\n4. Enable advanced monitoring features\n\nGenerated: ${new Date().toISOString()}\nProject: ${path.basename(this.projectRoot)}\n`;\n\n        fs.writeFileSync(path.join(this.projectRoot, 'AUTOMATION_REPORT.md'), report);\n        console.log(report);\n        \n        this.log('📄 Automation report generated: AUTOMATION_REPORT.md');\n    }\n\n    async runFullAutomation() {\n        try {\n            this.log('🤖 STARTING FULL AUTOMATION FROM SCRATCH...');\n            \n            // Phase 1: Project Setup\n            await this.setupProject();\n            \n            // Phase 2: Auto-fix Issues\n            await this.fixIssuesAutomatically();\n            \n            // Phase 3: Commit & Push\n            await this.commitAndPush();\n            \n            // Phase 4: Monitor Workflows\n            await this.monitorWorkflows();\n            \n            // Phase 5: Setup Continuous Monitoring\n            await this.setupContinuousMonitoring();\n            \n            // Phase 6: Generate Report\n            await this.generateReport();\n            \n            this.log('🎉 FULL AUTOMATION COMPLETED SUCCESSFULLY!');\n            this.setupComplete = true;\n            \n        } catch (error) {\n            this.log(`💥 AUTOMATION FAILED: ${error.message}`, 'ERROR');\n            console.error('\\n❌ Automation failed. Check automation.log for details.');\n            process.exit(1);\n        }\n    }\n}\n\n// Auto-run if called directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n    const automation = new FullAutomationSetup();\n    automation.runFullAutomation();\n}\n\nexport default FullAutomationSetup;\n","usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/scripts/load-data-to-supabase.js","messages":[{"ruleId":"security/detect-non-literal-fs-filename","severity":1,"message":"Found readFileSync from package \"fs\" with non literal argument at index 0","line":101,"column":31,"nodeType":"CallExpression","endLine":101,"endColumn":80}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// scripts/load-data-to-supabase.js\n// Usage: node scripts/load-data-to-supabase.js <scan-report.json>\n// This script uploads a security scan and its vulnerabilities to Supabase.\n\nimport { createClient } from '@supabase/supabase-js';\nimport fs from 'fs';\nimport path from 'path';\n\n\n// Use environment variables for credentials (works for Netlify, GitHub Actions, and local .env)\nconst SUPABASE_URL = process.env.SUPABASE_URL;\nconst SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_KEY;\n\nif (!SUPABASE_URL || !SUPABASE_SERVICE_KEY) {\n  console.error('Missing SUPABASE_URL or SUPABASE_SERVICE_KEY. Set them as environment variables.');\n  process.exit(1);\n}\n\nconst supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);\n\nfunction countBySeverity(vulnerabilities, severity) {\n  return vulnerabilities.filter(v => v.severity === severity).length;\n}\n\nasync function uploadScan(scanData, userId) {\n  try {\n    // Insert into security_scans\n    const { data: scan, error: scanError } = await supabase\n      .from('security_scans')\n      .insert([\n        {\n          project_name: scanData.project_name,\n          branch: scanData.branch || 'main',\n          scan_type: scanData.scan_type || 'manual',\n          status: scanData.status || 'completed',\n          started_at: scanData.started_at || new Date().toISOString(),\n          completed_at: scanData.completed_at || new Date().toISOString(),\n          total_vulnerabilities: scanData.vulnerabilities.length,\n          critical_count: countBySeverity(scanData.vulnerabilities, 'critical'),\n          high_count: countBySeverity(scanData.vulnerabilities, 'high'),\n          medium_count: countBySeverity(scanData.vulnerabilities, 'medium'),\n          low_count: countBySeverity(scanData.vulnerabilities, 'low'),\n          scan_results: scanData,\n        user_id: userId,\n        },\n      ])\n      .select()\n      .single();\n\n    if (scanError) {\n      console.error('Error inserting scan:', scanError);\n      return;\n    }\n    console.log(`Inserted scan with id: ${scan.id}`);\n\n    // Insert vulnerabilities\n    const vulnerabilities = scanData.vulnerabilities.map(v => ({\n      scan_id: scan.id,\n      title: v.title,\n      description: v.description,\n      severity: v.severity,\n      cve_id: v.cve_id,\n      component: v.component,\n      file_path: v.file_path,\n      line_number: v.line_number,\n      status: v.status || 'open',\n      auto_fixable: v.auto_fixable || false,\n      confidence_score: v.confidence_score || 0,\n      remediation_advice: v.remediation_advice,\n      first_detected: v.first_detected || new Date().toISOString(),\n      last_seen: v.last_seen || new Date().toISOString(),\n      user_id: userId,\n    }));\n\n    if (vulnerabilities.length > 0) {\n      const { error: vulnError } = await supabase\n        .from('vulnerabilities')\n        .insert(vulnerabilities);\n      if (vulnError) {\n        console.error('Error inserting vulnerabilities:', vulnError);\n        return;\n      }\n      console.log(`Inserted ${vulnerabilities.length} vulnerabilities.`);\n    } else {\n      console.log('No vulnerabilities to insert.');\n    }\n    console.log('Scan and vulnerabilities uploaded successfully!');\n  } catch (err) {\n    console.error('Unexpected error:', err);\n  }\n}\n\n// If run directly, load JSON file and upload\nif (process.argv[1] && process.argv[1].endsWith('load-data-to-supabase.js')) {\n  const inputFile = process.argv[2];\n  const userId = process.argv[3];\n  if (!inputFile || !userId) {\n    console.error('Usage: node scripts/load-data-to-supabase.js <scan-report.json> <user_id>');\n    process.exit(1);\n  }\n  const scanData = JSON.parse(fs.readFileSync(path.resolve(inputFile), 'utf-8'));\n  uploadScan(scanData, userId);\n}\n\n// Export for programmatic use\nexport { uploadScan };\n","usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/scripts/post-install-verify.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/scripts/post-install-verify.js","messages":[{"ruleId":"security/detect-non-literal-fs-filename","severity":1,"message":"Found existsSync from package \"fs\" with non literal argument at index 0","line":29,"column":9,"nodeType":"CallExpression","endLine":29,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\n\nconsole.log('🔍 Running post-install verification...');\n\nimport fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\nconst projectRoot = path.resolve(__dirname, '..');\n\nconst requiredFiles = [\n  'package.json',\n  'vite.config.ts',\n  'tsconfig.json',\n  'src/main.tsx',\n  'src/App.tsx',\n  'index.html'\n];\n\nlet hasErrors = false;\n\n// Check required files\nconsole.log('\\n📄 Checking required files...');\nfor (const file of requiredFiles) {\n  const filePath = path.join(projectRoot, file);\n  try {\n    if (fs.existsSync(filePath)) {\n      console.log(`✅ ${file}`);\n    } else {\n      console.log(`❌ Missing: ${file}`);\n      hasErrors = true;\n    }\n  } catch (error) {\n    console.log(`❌ Error checking ${file}: ${error.message}`);\n    hasErrors = true;\n  }\n}\n\n// Generate system report\nconsole.log('\\n📊 Generating system report...');\ntry {\n  const reportContent = `SecureFlow Automaton - System Report\nGenerated: ${new Date().toISOString()}\n\nEnvironment:\n- Node.js: ${process.version}\n- Platform: ${process.platform}\n- Architecture: ${process.arch}\n- Working Directory: ${process.cwd()}\n\nVerification Status: ${hasErrors ? 'FAILED' : 'PASSED'}\n${hasErrors ? 'Some issues were found that need attention.' : 'All checks passed successfully!'}\n`;\n\n  fs.writeFileSync(path.join(projectRoot, 'system-report.txt'), reportContent);\n  console.log('✅ System report generated');\n} catch (error) {\n  console.log(`❌ Error generating system report: ${error.message}`);\n  hasErrors = true;\n}\n\nconsole.log('\\n' + '='.repeat(50));\nif (hasErrors) {\n  console.log('❌ Post-install verification FAILED');\n  process.exit(1);\n} else {\n  console.log('✅ Post-install verification PASSED');\n}\nconsole.log('='.repeat(50));\n","usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/scripts/post-security-results.js","messages":[{"ruleId":"security/detect-non-literal-fs-filename","severity":1,"message":"Found existsSync from package \"fs\" with non literal argument at index 0","line":51,"column":9,"nodeType":"CallExpression","endLine":51,"endColumn":32},{"ruleId":"security/detect-non-literal-fs-filename","severity":1,"message":"Found readFileSync from package \"fs\" with non literal argument at index 0","line":52,"column":23,"nodeType":"CallExpression","endLine":52,"endColumn":56}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import fs from 'fs';\nimport path from 'path';\nimport { createClient } from '@supabase/supabase-js';\n\n// Initialize Supabase client\nconst supabaseUrl = process.env.SUPABASE_URL || 'http://127.0.0.1:54321';\nconst supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n\n// Check for required environment variables\nif (!supabaseKey) {\n  console.log('⚠️  SUPABASE_SERVICE_ROLE_KEY not found. Running in dry-run mode.');\n  console.log('📊 Security scan results would be posted if credentials were available.');\n  process.exit(0);\n}\n\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\nasync function postSecurityResults() {\n  try {\n    console.log('📊 Processing security scan results...');\n    \n    // Read scan results\n    const eslintResults = await readJsonFile('eslint-results.json');\n    const auditResults = await readJsonFile('npm-audit-results.json');\n    \n    // Get GitHub context\n    const githubContext = {\n      owner: process.env.GITHUB_REPOSITORY_OWNER || 'TechTyphoon',\n      repo: process.env.GITHUB_REPOSITORY?.split('/')[1] || 'secure-flow-automaton',\n      sha: process.env.GITHUB_SHA || 'unknown',\n      ref: process.env.GITHUB_REF || 'refs/heads/main',\n      runId: process.env.GITHUB_RUN_ID || Math.floor(Math.random() * 1000000)\n    };\n    \n    // Create security scan record\n    const scanResult = await createSecurityScan(githubContext, eslintResults, auditResults);\n    console.log('✅ Security scan results posted successfully:', scanResult.id);\n    \n    // Create pipeline run record\n    const pipelineResult = await createPipelineRun(githubContext, scanResult);\n    console.log('✅ Pipeline run recorded successfully:', pipelineResult.id);\n    \n  } catch (error) {\n    console.error('❌ Error posting security results:', error);\n    process.exit(1);\n  }\n}\n\nasync function readJsonFile(filename) {\n  try {\n    if (fs.existsSync(filename)) {\n      const content = fs.readFileSync(filename, 'utf8');\n      return JSON.parse(content);\n    }\n    return null;\n  } catch (error) {\n    console.warn(`⚠️  Could not read ${filename}:`, error.message);\n    return null;\n  }\n}\n\nasync function createSecurityScan(context, eslintResults, auditResults) {\n  const vulnerabilities = [];\n  let criticalCount = 0;\n  let highCount = 0;\n  let mediumCount = 0;\n  let lowCount = 0;\n  \n  // Process ESLint security results\n  if (eslintResults) {\n    eslintResults.forEach(file => {\n      file.messages.forEach(message => {\n        if (message.ruleId && message.ruleId.includes('security/')) {\n          const severity = getSeverityFromESLint(message.severity);\n          const vulnerability = {\n            id: `eslint-${file.filePath}-${message.line}-${message.column}`,\n            title: message.message,\n            description: `Security issue found by ESLint rule: ${message.ruleId}`,\n            severity: severity,\n            file_path: file.filePath,\n            line_number: message.line,\n            column_number: message.column,\n            tool: 'ESLint Security',\n            rule_id: message.ruleId,\n            first_detected: new Date().toISOString()\n          };\n          \n          vulnerabilities.push(vulnerability);\n          updateSeverityCount(severity);\n        }\n      });\n    });\n  }\n  \n  // Process npm audit results\n  if (auditResults && auditResults.vulnerabilities) {\n    Object.entries(auditResults.vulnerabilities).forEach(([packageName, vuln]) => {\n      const severity = mapNpmSeverity(vuln.severity);\n      const vulnerability = {\n        id: `npm-${packageName}-${vuln.range}`,\n        title: `${packageName}: ${vuln.title || 'Dependency vulnerability'}`,\n        description: vuln.overview || 'Vulnerability found in npm dependency',\n        severity: severity,\n        file_path: 'package.json',\n        tool: 'npm audit',\n        cve_id: vuln.cves?.[0] || null,\n        package_name: packageName,\n        affected_versions: vuln.range,\n        first_detected: new Date().toISOString()\n      };\n      \n      vulnerabilities.push(vulnerability);\n      updateSeverityCount(severity);\n    });\n  }\n  \n  function updateSeverityCount(severity) {\n    switch (severity) {\n      case 'critical': criticalCount++; break;\n      case 'high': highCount++; break;\n      case 'medium': mediumCount++; break;\n      case 'low': lowCount++; break;\n    }\n  }\n  \n  // Create security scan record\n  const { data: scanData, error: scanError } = await supabase\n    .from('security_scans')\n    .insert({\n      project_name: context.repo,\n      branch: context.ref.replace('refs/heads/', ''),\n      scan_type: 'automated',\n      status: 'completed',\n      started_at: new Date().toISOString(),\n      completed_at: new Date().toISOString(),\n      total_vulnerabilities: vulnerabilities.length,\n      critical_count: criticalCount,\n      high_count: highCount,\n      medium_count: mediumCount,\n      low_count: lowCount,\n      scan_results: {\n        eslint_results: eslintResults,\n        audit_results: auditResults,\n        vulnerabilities: vulnerabilities,\n        github_context: context\n      }\n    })\n    .select()\n    .single();\n  \n  if (scanError) {\n    throw new Error(`Failed to create security scan: ${scanError.message}`);\n  }\n  \n  // Insert vulnerabilities if any were found\n  if (vulnerabilities.length > 0) {\n    const vulnerabilityRecords = vulnerabilities.map(vuln => ({\n      ...vuln,\n      scan_id: scanData.id,\n      status: 'open',\n      scanned_at: new Date().toISOString()\n    }));\n    \n    const { error: vulnError } = await supabase\n      .from('vulnerabilities')\n      .insert(vulnerabilityRecords);\n    \n    if (vulnError) {\n      console.warn('⚠️  Failed to insert vulnerabilities:', vulnError.message);\n    }\n  }\n  \n  return scanData;\n}\n\nasync function createPipelineRun(context, scanResult) {\n  const { data, error } = await supabase\n    .from('pipeline_runs')\n    .insert({\n      run_id: parseInt(context.runId),\n      branch_name: context.ref.replace('refs/heads/', ''),\n      status: scanResult.total_vulnerabilities > 0 ? 'completed_with_issues' : 'success',\n      started_at: new Date().toISOString(),\n      completed_at: new Date().toISOString()\n    })\n    .select()\n    .single();\n  \n  if (error) {\n    throw new Error(`Failed to create pipeline run: ${error.message}`);\n  }\n  \n  return data;\n}\n\nfunction getSeverityFromESLint(severity) {\n  switch (severity) {\n    case 2: return 'high';\n    case 1: return 'medium';\n    default: return 'low';\n  }\n}\n\nfunction mapNpmSeverity(severity) {\n  switch (severity) {\n    case 'critical': return 'critical';\n    case 'high': return 'high';\n    case 'moderate': return 'medium';\n    case 'low': return 'low';\n    default: return 'low';\n  }\n}\n\n// Run the script\npostSecurityResults();\n","usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/scripts/production-security-pipeline.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/scripts/pushSecurityScan.js","messages":[{"ruleId":"security/detect-non-literal-fs-filename","severity":1,"message":"Found readFileSync from package \"fs\" with non literal argument at index 0","line":33,"column":31,"nodeType":"CallExpression","endLine":33,"endColumn":80}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// scripts/pushSecurityScan.js\n// Usage: node scripts/pushSecurityScan.js <scan-results.json> <user_id>\n// This script uploads a security scan and its vulnerabilities to Supabase.\n\n\nimport 'dotenv/config';\nimport { createClient } from '@supabase/supabase-js';\nimport fs from 'fs';\nimport path from 'path';\n\n// Load environment variables\n\nconst SUPABASE_URL = process.env.SUPABASE_URL || 'https://znubqwefuxqkzjgtrdcf.supabase.co';\nconst SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpudWJxd2VmdXhxa3pqZ3RyZGNmIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0OTgyMzI2MCwiZXhwIjoyMDY1Mzk5MjYwfQ.O05oilmlVAu9_jjIRTFnj5rCvZjybxt6PiBY4OTtKUo';\n\nif (!SUPABASE_URL || !SUPABASE_SERVICE_KEY) {\n  console.error('Missing SUPABASE_URL or SUPABASE_SERVICE_KEY. Set them in your .env file.');\n  process.exit(1);\n}\n\nconst supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);\n\n\n\nasync function main() {\n  const inputFile = process.argv[2];\n  const userId = process.argv[3];\n  if (!inputFile || !userId) {\n    console.error('Usage: node scripts/pushSecurityScan.js <scan-results.json> <user_id>');\n    process.exit(1);\n  }\n\n  const scanData = JSON.parse(fs.readFileSync(path.resolve(inputFile), 'utf-8'));\n\n  // Insert into security_scans\n  const { data: scan, error: scanError } = await supabase\n    .from('security_scans')\n    .insert([\n      {\n        project_name: scanData.project_name,\n        branch: scanData.branch || 'main',\n        scan_type: scanData.scan_type || 'manual',\n        status: scanData.status || 'completed',\n        started_at: scanData.started_at || new Date().toISOString(),\n        completed_at: scanData.completed_at || new Date().toISOString(),\n        total_vulnerabilities: scanData.vulnerabilities.length,\n        critical_count: scanData.vulnerabilities.filter(v => v.severity === 'critical').length,\n        high_count: scanData.vulnerabilities.filter(v => v.severity === 'high').length,\n        medium_count: scanData.vulnerabilities.filter(v => v.severity === 'medium').length,\n        low_count: scanData.vulnerabilities.filter(v => v.severity === 'low').length,\n        scan_results: scanData,\n        user_id: userId,\n      },\n    ])\n    .select()\n    .single();\n\n  if (scanError) {\n    console.error('Error inserting scan:', scanError);\n    process.exit(1);\n  }\n\n  // Insert vulnerabilities\n  const vulnerabilities = scanData.vulnerabilities.map(v => ({\n    scan_id: scan.id,\n    title: v.title,\n    description: v.description,\n    severity: v.severity,\n    cve_id: v.cve_id,\n    component: v.component,\n    file_path: v.file_path,\n    line_number: v.line_number,\n    status: v.status || 'open',\n    auto_fixable: v.auto_fixable || false,\n    confidence_score: v.confidence_score || 0,\n    remediation_advice: v.remediation_advice,\n    first_detected: v.first_detected || new Date().toISOString(),\n    last_seen: v.last_seen || new Date().toISOString(),\n    user_id: userId,\n  }));\n\n  if (vulnerabilities.length > 0) {\n    const { error: vulnError } = await supabase\n      .from('vulnerabilities')\n      .insert(vulnerabilities);\n    if (vulnError) {\n      console.error('Error inserting vulnerabilities:', vulnError);\n      process.exit(1);\n    }\n  }\n\n  console.log('Scan and vulnerabilities uploaded successfully!');\n}\n\nmain();\n","usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/scripts/run-pipeline.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/AdvancedPerformanceAnalytics.tsx","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":329,"column":19,"nodeType":"MemberExpression","endLine":334,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState, useMemo } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { \n  LineChart, \n  Line, \n  AreaChart, \n  Area, \n  BarChart, \n  Bar, \n  XAxis, \n  YAxis, \n  CartesianGrid, \n  Tooltip, \n  ResponsiveContainer,\n  PieChart,\n  Pie,\n  Cell,\n  ScatterChart,\n  Scatter,\n  ComposedChart\n} from 'recharts';\nimport { \n  BarChart3, \n  TrendingUp, \n  TrendingDown, \n  Users, \n  Globe, \n  Smartphone,\n  Monitor,\n  Clock,\n  Zap,\n  Activity,\n  Target,\n  Eye,\n  MousePointer,\n  Gauge,\n  Wifi,\n  Server,\n  Database\n} from 'lucide-react';\n\ninterface PerformanceMetric {\n  timestamp: Date;\n  lcp: number;\n  fid: number;\n  cls: number;\n  ttfb: number;\n  fcp: number;\n  tti: number;\n  speedIndex: number;\n  totalBlockingTime: number;\n  pageViews: number;\n  userSatisfactionScore: number;\n}\n\ninterface UserExperienceData {\n  device: string;\n  connection: string;\n  avgLcp: number;\n  avgFid: number;\n  avgCls: number;\n  userCount: number;\n  satisfactionScore: number;\n}\n\ninterface PerformanceCorrelation {\n  metric1: string;\n  metric2: string;\n  correlation: number;\n  description: string;\n}\n\ninterface BusinessImpactMetric {\n  metric: string;\n  performanceThreshold: number;\n  conversionRate: number;\n  bounceRate: number;\n  revenueImpact: number;\n  userSatisfaction: number;\n}\n\ninterface CompetitorBenchmark {\n  competitor: string;\n  lcp: number;\n  fid: number;\n  cls: number;\n  speedIndex: number;\n  overallScore: number;\n  industry: string;\n}\n\nconst AdvancedPerformanceAnalytics: React.FC = () => {\n  const [timeRange, setTimeRange] = useState<'1h' | '24h' | '7d' | '30d'>('24h');\n  const [performanceMetrics, setPerformanceMetrics] = useState<PerformanceMetric[]>([]);\n  const [userExperienceData, setUserExperienceData] = useState<UserExperienceData[]>([]);\n  const [performanceCorrelations, setPerformanceCorrelations] = useState<PerformanceCorrelation[]>([]);\n  const [businessImpactMetrics, setBusinessImpactMetrics] = useState<BusinessImpactMetric[]>([]);\n  const [competitorBenchmarks, setCompetitorBenchmarks] = useState<CompetitorBenchmark[]>([]);\n\n  const generatePerformanceMetrics = (hours: number): PerformanceMetric[] => {\n    const metrics: PerformanceMetric[] = [];\n    const now = new Date();\n    \n    for (let i = hours; i >= 0; i--) {\n      const timestamp = new Date(now.getTime() - i * 60 * 60 * 1000);\n      \n      // Simulate realistic performance variations\n      const basePerformance = {\n        lcp: 2500 + Math.sin(i / 6) * 500 + Math.random() * 800,\n        fid: 100 + Math.sin(i / 4) * 30 + Math.random() * 50,\n        cls: 0.1 + Math.sin(i / 8) * 0.05 + Math.random() * 0.1,\n        ttfb: 400 + Math.sin(i / 12) * 200 + Math.random() * 300,\n        fcp: 1800 + Math.sin(i / 10) * 400 + Math.random() * 600,\n        tti: 3500 + Math.sin(i / 14) * 800 + Math.random() * 1000,\n        speedIndex: 2800 + Math.sin(i / 16) * 600 + Math.random() * 800,\n        totalBlockingTime: 300 + Math.sin(i / 5) * 100 + Math.random() * 200\n      };\n      \n      // Calculate user satisfaction based on Core Web Vitals\n      const lcpScore = basePerformance.lcp <= 2500 ? 100 : basePerformance.lcp <= 4000 ? 60 : 30;\n      const fidScore = basePerformance.fid <= 100 ? 100 : basePerformance.fid <= 300 ? 60 : 30;\n      const clsScore = basePerformance.cls <= 0.1 ? 100 : basePerformance.cls <= 0.25 ? 60 : 30;\n      const userSatisfactionScore = (lcpScore + fidScore + clsScore) / 3;\n      \n      metrics.push({\n        timestamp,\n        ...basePerformance,\n        pageViews: Math.floor(Math.random() * 100) + 50,\n        userSatisfactionScore\n      });\n    }\n    \n    return metrics;\n  };\n\n  const generateUserExperienceData = (): UserExperienceData[] => {\n    const devices = ['Desktop', 'Mobile', 'Tablet'];\n    const connections = ['4G', '3G', 'WiFi', '5G'];\n    const data: UserExperienceData[] = [];\n    \n    devices.forEach(device => {\n      connections.forEach(connection => {\n        // Mobile and 3G typically have worse performance\n        const deviceMultiplier = device === 'Mobile' ? 1.5 : device === 'Tablet' ? 1.2 : 1.0;\n        const connectionMultiplier = connection === '3G' ? 2.0 : connection === '4G' ? 1.3 : connection === '5G' ? 0.8 : 1.0;\n        const multiplier = deviceMultiplier * connectionMultiplier;\n        \n        const avgLcp = (2000 + Math.random() * 1000) * multiplier;\n        const avgFid = (80 + Math.random() * 40) * multiplier;\n        const avgCls = (0.08 + Math.random() * 0.12) * multiplier;\n        \n        // Calculate satisfaction score\n        const lcpScore = avgLcp <= 2500 ? 100 : avgLcp <= 4000 ? 60 : 30;\n        const fidScore = avgFid <= 100 ? 100 : avgFid <= 300 ? 60 : 30;\n        const clsScore = avgCls <= 0.1 ? 100 : avgCls <= 0.25 ? 60 : 30;\n        const satisfactionScore = (lcpScore + fidScore + clsScore) / 3;\n        \n        data.push({\n          device,\n          connection,\n          avgLcp,\n          avgFid,\n          avgCls,\n          userCount: Math.floor(Math.random() * 1000) + 100,\n          satisfactionScore\n        });\n      });\n    });\n    \n    return data;\n  };\n\n  const generatePerformanceCorrelations = (): PerformanceCorrelation[] => {\n    return [\n      {\n        metric1: 'Largest Contentful Paint',\n        metric2: 'Bounce Rate',\n        correlation: 0.85,\n        description: 'Strong positive correlation: slower LCP significantly increases bounce rate'\n      },\n      {\n        metric1: 'First Input Delay',\n        metric2: 'User Engagement',\n        correlation: -0.72,\n        description: 'Strong negative correlation: higher FID reduces user engagement'\n      },\n      {\n        metric1: 'Cumulative Layout Shift',\n        metric2: 'Conversion Rate',\n        correlation: -0.68,\n        description: 'Moderate negative correlation: layout shifts harm conversions'\n      },\n      {\n        metric1: 'Speed Index',\n        metric2: 'Page Views per Session',\n        correlation: -0.61,\n        description: 'Moderate negative correlation: faster loading increases page views'\n      },\n      {\n        metric1: 'Total Blocking Time',\n        metric2: 'User Satisfaction',\n        correlation: -0.79,\n        description: 'Strong negative correlation: blocking time hurts user satisfaction'\n      },\n      {\n        metric1: 'Time to Interactive',\n        metric2: 'Form Completion Rate',\n        correlation: -0.65,\n        description: 'Moderate negative correlation: delayed interactivity reduces form completions'\n      }\n    ];\n  };\n\n  const generateBusinessImpactMetrics = (): BusinessImpactMetric[] => {\n    return [\n      {\n        metric: 'Excellent Performance (LCP < 2.5s)',\n        performanceThreshold: 2.5,\n        conversionRate: 3.8,\n        bounceRate: 28,\n        revenueImpact: 100,\n        userSatisfaction: 92\n      },\n      {\n        metric: 'Good Performance (LCP 2.5-4s)',\n        performanceThreshold: 4.0,\n        conversionRate: 2.9,\n        bounceRate: 42,\n        revenueImpact: 76,\n        userSatisfaction: 74\n      },\n      {\n        metric: 'Poor Performance (LCP > 4s)',\n        performanceThreshold: 6.0,\n        conversionRate: 1.8,\n        bounceRate: 58,\n        revenueImpact: 45,\n        userSatisfaction: 51\n      }\n    ];\n  };\n\n  const generateCompetitorBenchmarks = (): CompetitorBenchmark[] => {\n    return [\n      {\n        competitor: 'Our Application',\n        lcp: 3.2,\n        fid: 85,\n        cls: 0.15,\n        speedIndex: 2.8,\n        overallScore: 78,\n        industry: 'DevSecOps'\n      },\n      {\n        competitor: 'GitLab Security',\n        lcp: 2.9,\n        fid: 92,\n        cls: 0.12,\n        speedIndex: 2.6,\n        overallScore: 82,\n        industry: 'DevSecOps'\n      },\n      {\n        competitor: 'GitHub Advanced Security',\n        lcp: 2.4,\n        fid: 78,\n        cls: 0.08,\n        speedIndex: 2.2,\n        overallScore: 89,\n        industry: 'DevSecOps'\n      },\n      {\n        competitor: 'Snyk Platform',\n        lcp: 3.8,\n        fid: 105,\n        cls: 0.18,\n        speedIndex: 3.1,\n        overallScore: 71,\n        industry: 'DevSecOps'\n      },\n      {\n        competitor: 'Checkmarx One',\n        lcp: 4.1,\n        fid: 125,\n        cls: 0.22,\n        speedIndex: 3.4,\n        overallScore: 65,\n        industry: 'DevSecOps'\n      }\n    ];\n  };\n\n  // Calculate trend analysis\n  const trendAnalysis = useMemo(() => {\n    if (performanceMetrics.length < 2) return null;\n    \n    const recent = performanceMetrics.slice(-10);\n    const older = performanceMetrics.slice(-20, -10);\n    \n    const avgRecent = {\n      lcp: recent.reduce((sum, m) => sum + m.lcp, 0) / recent.length,\n      fid: recent.reduce((sum, m) => sum + m.fid, 0) / recent.length,\n      cls: recent.reduce((sum, m) => sum + m.cls, 0) / recent.length,\n      tti: recent.reduce((sum, m) => sum + m.tti, 0) / recent.length,\n      userSatisfactionScore: recent.reduce((sum, m) => sum + m.userSatisfactionScore, 0) / recent.length\n    };\n    \n    const avgOlder = {\n      lcp: older.reduce((sum, m) => sum + m.lcp, 0) / older.length,\n      fid: older.reduce((sum, m) => sum + m.fid, 0) / older.length,\n      cls: older.reduce((sum, m) => sum + m.cls, 0) / older.length,\n      tti: older.reduce((sum, m) => sum + m.tti, 0) / older.length,\n      userSatisfactionScore: older.reduce((sum, m) => sum + m.userSatisfactionScore, 0) / older.length\n    };\n    \n    return {\n      lcpTrend: ((avgRecent.lcp - avgOlder.lcp) / avgOlder.lcp) * 100,\n      fidTrend: ((avgRecent.fid - avgOlder.fid) / avgOlder.fid) * 100,\n      clsTrend: ((avgRecent.cls - avgOlder.cls) / avgOlder.cls) * 100,\n      ttiTrend: ((avgRecent.tti - avgOlder.tti) / avgOlder.tti) * 100,\n      satisfactionTrend: ((avgRecent.userSatisfactionScore - avgOlder.userSatisfactionScore) / avgOlder.userSatisfactionScore) * 100\n    };\n  }, [performanceMetrics]);\n\n  useEffect(() => {\n    const hours = {\n      '1h': 1,\n      '24h': 24,\n      '7d': 168,\n      '30d': 720\n    }[timeRange];\n    \n    setPerformanceMetrics(generatePerformanceMetrics(hours));\n    setUserExperienceData(generateUserExperienceData());\n    setPerformanceCorrelations(generatePerformanceCorrelations());\n    setBusinessImpactMetrics(generateBusinessImpactMetrics());\n    setCompetitorBenchmarks(generateCompetitorBenchmarks());\n  }, [timeRange]);\n\n  const getTrendIcon = (trend: number) => {\n    if (Math.abs(trend) < 1) return <Activity className=\"h-4 w-4 text-gray-400\" />;\n    return trend > 0 ? \n      <TrendingUp className=\"h-4 w-4 text-red-600\" /> : \n      <TrendingDown className=\"h-4 w-4 text-green-600\" />;\n  };\n\n  const getTrendColor = (trend: number, isGoodWhenLower = true) => {\n    if (Math.abs(trend) < 1) return 'text-gray-500';\n    const isGoodTrend = isGoodWhenLower ? trend < 0 : trend > 0;\n    return isGoodTrend ? 'text-green-600' : 'text-red-600';\n  };\n\n  const getCorrelationStrength = (correlation: number) => {\n    const abs = Math.abs(correlation);\n    if (abs >= 0.7) return 'Strong';\n    if (abs >= 0.5) return 'Moderate';\n    if (abs >= 0.3) return 'Weak';\n    return 'Very Weak';\n  };\n\n  // Prepare data for visualizations\n  const devicePerformanceData = userExperienceData.reduce((acc, item) => {\n    const existing = acc.find(d => d.device === item.device);\n    if (existing) {\n      existing.avgLcp = (existing.avgLcp + item.avgLcp) / 2;\n      existing.avgFid = (existing.avgFid + item.avgFid) / 2;\n      existing.userCount += item.userCount;\n    } else {\n      acc.push({\n        device: item.device,\n        avgLcp: item.avgLcp,\n        avgFid: item.avgFid,\n        userCount: item.userCount\n      });\n    }\n    return acc;\n  }, [] as any[]);\n\n  const satisfactionDistribution = userExperienceData.map(item => ({\n    segment: `${item.device} - ${item.connection}`,\n    satisfaction: item.satisfactionScore,\n    users: item.userCount,\n    color: item.satisfactionScore >= 80 ? '#22c55e' : item.satisfactionScore >= 60 ? '#eab308' : '#ef4444'\n  }));\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Time Range Selector */}\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-2xl font-bold\">Advanced Performance Analytics</h2>\n        <div className=\"flex space-x-2\">\n          {(['1h', '24h', '7d', '30d'] as const).map((range) => (\n            <Button\n              key={range}\n              onClick={() => setTimeRange(range)}\n              variant={timeRange === range ? \"default\" : \"outline\"}\n              size=\"sm\"\n            >\n              {range}\n            </Button>\n          ))}\n        </div>\n      </div>\n\n      {/* Trend Summary */}\n      {trendAnalysis && (\n        <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">LCP Trend</CardTitle>\n              {getTrendIcon(trendAnalysis.lcpTrend)}\n            </CardHeader>\n            <CardContent>\n              <div className={`text-2xl font-bold ${getTrendColor(trendAnalysis.lcpTrend, true)}`}>\n                {trendAnalysis.lcpTrend > 0 ? '+' : ''}{trendAnalysis.lcpTrend.toFixed(1)}%\n              </div>\n              <p className=\"text-xs text-muted-foreground\">vs previous period</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">FID Trend</CardTitle>\n              {getTrendIcon(trendAnalysis.fidTrend)}\n            </CardHeader>\n            <CardContent>\n              <div className={`text-2xl font-bold ${getTrendColor(trendAnalysis.fidTrend, true)}`}>\n                {trendAnalysis.fidTrend > 0 ? '+' : ''}{trendAnalysis.fidTrend.toFixed(1)}%\n              </div>\n              <p className=\"text-xs text-muted-foreground\">vs previous period</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">CLS Trend</CardTitle>\n              {getTrendIcon(trendAnalysis.clsTrend)}\n            </CardHeader>\n            <CardContent>\n              <div className={`text-2xl font-bold ${getTrendColor(trendAnalysis.clsTrend, true)}`}>\n                {trendAnalysis.clsTrend > 0 ? '+' : ''}{trendAnalysis.clsTrend.toFixed(1)}%\n              </div>\n              <p className=\"text-xs text-muted-foreground\">vs previous period</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">TTI Trend</CardTitle>\n              {getTrendIcon(trendAnalysis.ttiTrend)}\n            </CardHeader>\n            <CardContent>\n              <div className={`text-2xl font-bold ${getTrendColor(trendAnalysis.ttiTrend, true)}`}>\n                {trendAnalysis.ttiTrend > 0 ? '+' : ''}{trendAnalysis.ttiTrend.toFixed(1)}%\n              </div>\n              <p className=\"text-xs text-muted-foreground\">vs previous period</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Satisfaction</CardTitle>\n              {getTrendIcon(trendAnalysis.satisfactionTrend)}\n            </CardHeader>\n            <CardContent>\n              <div className={`text-2xl font-bold ${getTrendColor(trendAnalysis.satisfactionTrend, false)}`}>\n                {trendAnalysis.satisfactionTrend > 0 ? '+' : ''}{trendAnalysis.satisfactionTrend.toFixed(1)}%\n              </div>\n              <p className=\"text-xs text-muted-foreground\">vs previous period</p>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Main Analytics Tabs */}\n      <Tabs defaultValue=\"trends\" className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"trends\">Performance Trends</TabsTrigger>\n          <TabsTrigger value=\"segments\">User Segments</TabsTrigger>\n          <TabsTrigger value=\"correlations\">Correlations</TabsTrigger>\n          <TabsTrigger value=\"business\">Business Impact</TabsTrigger>\n          <TabsTrigger value=\"benchmarks\">Benchmarks</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"trends\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Core Web Vitals Trends */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Core Web Vitals Over Time</CardTitle>\n                <CardDescription>Track performance metrics evolution</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <ComposedChart data={performanceMetrics.slice(-50)}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis \n                      dataKey=\"timestamp\" \n                      tickFormatter={(time) => new Date(time).toLocaleTimeString()}\n                    />\n                    <YAxis yAxisId=\"left\" />\n                    <YAxis yAxisId=\"right\" orientation=\"right\" />\n                    <Tooltip \n                      labelFormatter={(time) => new Date(time).toLocaleString()}\n                      formatter={(value: number, name: string) => [\n                        name === 'cls' ? value.toFixed(3) : `${Math.round(value)}${name === 'userSatisfactionScore' ? '%' : 'ms'}`,\n                        name.toUpperCase()\n                      ]}\n                    />\n                    <Line yAxisId=\"left\" type=\"monotone\" dataKey=\"lcp\" stroke=\"#8884d8\" name=\"LCP\" />\n                    <Line yAxisId=\"left\" type=\"monotone\" dataKey=\"fid\" stroke=\"#82ca9d\" name=\"FID\" />\n                    <Line yAxisId=\"right\" type=\"monotone\" dataKey=\"userSatisfactionScore\" stroke=\"#ff7300\" name=\"Satisfaction\" />\n                  </ComposedChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            {/* Performance Distribution */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Performance Score Distribution</CardTitle>\n                <CardDescription>User satisfaction breakdown over time</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <AreaChart data={performanceMetrics.slice(-20)}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis \n                      dataKey=\"timestamp\" \n                      tickFormatter={(time) => new Date(time).toLocaleTimeString()}\n                    />\n                    <YAxis />\n                    <Tooltip \n                      labelFormatter={(time) => new Date(time).toLocaleString()}\n                    />\n                    <Area \n                      type=\"monotone\" \n                      dataKey=\"userSatisfactionScore\" \n                      stroke=\"#8884d8\" \n                      fill=\"#8884d8\"\n                      fillOpacity={0.6}\n                      name=\"User Satisfaction %\"\n                    />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            {/* Loading Metrics */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Loading Performance Metrics</CardTitle>\n                <CardDescription>TTFB, FCP, and TTI trends</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <LineChart data={performanceMetrics.slice(-30)}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis \n                      dataKey=\"timestamp\" \n                      tickFormatter={(time) => new Date(time).toLocaleTimeString()}\n                    />\n                    <YAxis />\n                    <Tooltip \n                      labelFormatter={(time) => new Date(time).toLocaleString()}\n                      formatter={(value: number, name: string) => [`${Math.round(value)}ms`, name.toUpperCase()]}\n                    />\n                    <Line type=\"monotone\" dataKey=\"ttfb\" stroke=\"#8884d8\" name=\"TTFB\" />\n                    <Line type=\"monotone\" dataKey=\"fcp\" stroke=\"#82ca9d\" name=\"FCP\" />\n                    <Line type=\"monotone\" dataKey=\"tti\" stroke=\"#ffc658\" name=\"TTI\" />\n                  </LineChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            {/* Interactivity Metrics */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Interactivity Performance</CardTitle>\n                <CardDescription>FID and Total Blocking Time analysis</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <AreaChart data={performanceMetrics.slice(-30)}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis \n                      dataKey=\"timestamp\" \n                      tickFormatter={(time) => new Date(time).toLocaleTimeString()}\n                    />\n                    <YAxis />\n                    <Tooltip \n                      labelFormatter={(time) => new Date(time).toLocaleString()}\n                      formatter={(value: number, name: string) => [`${Math.round(value)}ms`, name.toUpperCase()]}\n                    />\n                    <Area \n                      type=\"monotone\" \n                      dataKey=\"fid\" \n                      stackId=\"1\"\n                      stroke=\"#8884d8\" \n                      fill=\"#8884d8\"\n                      name=\"FID\"\n                    />\n                    <Area \n                      type=\"monotone\" \n                      dataKey=\"totalBlockingTime\" \n                      stackId=\"1\"\n                      stroke=\"#ff7300\" \n                      fill=\"#ff7300\"\n                      name=\"Total Blocking Time\"\n                    />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"segments\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Device Performance */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Performance by Device Type</CardTitle>\n                <CardDescription>LCP and FID comparison across devices</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <BarChart data={devicePerformanceData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"device\" />\n                    <YAxis />\n                    <Tooltip \n                      formatter={(value: number, name: string) => [\n                        `${value.toFixed(1)}${name.includes('Lcp') ? 'ms' : 'ms'}`,\n                        name.includes('Lcp') ? 'LCP' : 'FID'\n                      ]}\n                    />\n                    <Bar dataKey=\"avgLcp\" fill=\"#8884d8\" name=\"avgLcp\" />\n                    <Bar dataKey=\"avgFid\" fill=\"#82ca9d\" name=\"avgFid\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            {/* User Satisfaction by Segment */}\n            <Card>\n              <CardHeader>\n                <CardTitle>User Satisfaction Distribution</CardTitle>\n                <CardDescription>Satisfaction scores across user segments</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <ScatterChart data={satisfactionDistribution}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"users\" name=\"Users\" />\n                    <YAxis dataKey=\"satisfaction\" name=\"Satisfaction\" />\n                    <Tooltip \n                      cursor={{ strokeDasharray: '3 3' }}\n                      content={({ active, payload }) => {\n                        if (active && payload && payload.length) {\n                          const data = payload[0].payload;\n                          return (\n                            <div className=\"bg-white p-2 border rounded shadow\">\n                              <p>{data.segment}</p>\n                              <p>Users: {data.users}</p>\n                              <p>Satisfaction: {data.satisfaction.toFixed(1)}%</p>\n                            </div>\n                          );\n                        }\n                        return null;\n                      }}\n                    />\n                    <Scatter dataKey=\"satisfaction\" fill=\"#8884d8\" />\n                  </ScatterChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            {/* Connection Type Analysis */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Performance by Connection Type</CardTitle>\n                <CardDescription>Network impact on user experience</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {['WiFi', '5G', '4G', '3G'].map(connection => {\n                    const data = userExperienceData.filter(item => item.connection === connection);\n                    const avgSatisfaction = data.reduce((sum, item) => sum + item.satisfactionScore, 0) / data.length;\n                    const totalUsers = data.reduce((sum, item) => sum + item.userCount, 0);\n                    \n                    return (\n                      <div key={connection} className=\"flex items-center justify-between p-3 border rounded\">\n                        <div className=\"flex items-center space-x-3\">\n                          <Wifi className=\"h-5 w-5 text-muted-foreground\" />\n                          <div>\n                            <h4 className=\"font-medium\">{connection}</h4>\n                            <p className=\"text-sm text-muted-foreground\">{totalUsers} users</p>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"text-lg font-bold\">{avgSatisfaction.toFixed(1)}%</div>\n                          <Badge variant={avgSatisfaction >= 80 ? 'default' : avgSatisfaction >= 60 ? 'secondary' : 'destructive'}>\n                            {avgSatisfaction >= 80 ? 'Excellent' : avgSatisfaction >= 60 ? 'Good' : 'Poor'}\n                          </Badge>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Geographic Performance */}\n            <Card>\n              <CardHeader>\n                <CardTitle>User Experience Heatmap</CardTitle>\n                <CardDescription>Performance visualization by user segments</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-4 gap-2\">\n                  {userExperienceData.map((item, index) => (\n                    <div \n                      key={index}\n                      className={`p-2 rounded text-center text-xs ${\n                        item.satisfactionScore >= 80 ? 'bg-green-100 text-green-800' :\n                        item.satisfactionScore >= 60 ? 'bg-yellow-100 text-yellow-800' :\n                        'bg-red-100 text-red-800'\n                      }`}\n                    >\n                      <div className=\"font-medium\">{item.device}</div>\n                      <div>{item.connection}</div>\n                      <div className=\"text-xs\">{item.satisfactionScore.toFixed(0)}%</div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"correlations\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Performance Correlation Analysis</CardTitle>\n              <CardDescription>\n                Statistical relationships between performance metrics and business outcomes\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {performanceCorrelations.map((correlation, index) => (\n                  <div key={index} className=\"border rounded-lg p-4\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <h4 className=\"font-medium\">\n                        {correlation.metric1} ↔ {correlation.metric2}\n                      </h4>\n                      <div className=\"flex items-center space-x-2\">\n                        <Badge variant={Math.abs(correlation.correlation) >= 0.7 ? 'default' : Math.abs(correlation.correlation) >= 0.5 ? 'secondary' : 'outline'}>\n                          {getCorrelationStrength(correlation.correlation)}\n                        </Badge>\n                        <span className={`font-bold ${correlation.correlation > 0 ? 'text-red-600' : 'text-green-600'}`}>\n                          r = {correlation.correlation.toFixed(2)}\n                        </span>\n                      </div>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">{correlation.description}</p>\n                    <div className=\"mt-2 w-full bg-gray-200 rounded-full h-2\">\n                      <div \n                        className={`h-2 rounded-full ${Math.abs(correlation.correlation) >= 0.7 ? 'bg-red-600' : Math.abs(correlation.correlation) >= 0.5 ? 'bg-yellow-600' : 'bg-blue-600'}`}\n                        style={{ width: `${Math.abs(correlation.correlation) * 100}%` }}\n                      ></div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"business\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Business Impact Analysis</CardTitle>\n              <CardDescription>\n                How performance directly affects business metrics and revenue\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                {businessImpactMetrics.map((metric, index) => (\n                  <div key={index} className=\"border rounded-lg p-4\">\n                    <h4 className=\"font-medium mb-3\">{metric.metric}</h4>\n                    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                      <div className=\"text-center\">\n                        <div className=\"text-2xl font-bold text-blue-600\">\n                          {metric.conversionRate.toFixed(1)}%\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">Conversion Rate</div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"text-2xl font-bold text-orange-600\">\n                          {metric.bounceRate}%\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">Bounce Rate</div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"text-2xl font-bold text-green-600\">\n                          {metric.revenueImpact}%\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">Revenue Impact</div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"text-2xl font-bold text-purple-600\">\n                          {metric.userSatisfaction}%\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">User Satisfaction</div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"benchmarks\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Competitive Performance Benchmarks</CardTitle>\n              <CardDescription>\n                Compare your performance against industry competitors\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {competitorBenchmarks.map((competitor, index) => (\n                  <div key={index} className={`border rounded-lg p-4 ${competitor.competitor === 'Our Application' ? 'bg-blue-50 border-blue-200' : ''}`}>\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <h4 className=\"font-medium\">{competitor.competitor}</h4>\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-2xl font-bold\">{competitor.overallScore}</span>\n                        <Badge variant={competitor.overallScore >= 85 ? 'default' : competitor.overallScore >= 70 ? 'secondary' : 'destructive'}>\n                          {competitor.overallScore >= 85 ? 'Excellent' : competitor.overallScore >= 70 ? 'Good' : 'Poor'}\n                        </Badge>\n                      </div>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-4 gap-4 text-sm\">\n                      <div className=\"text-center\">\n                        <div className=\"font-medium\">{competitor.lcp.toFixed(1)}s</div>\n                        <div className=\"text-muted-foreground\">LCP</div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"font-medium\">{competitor.fid}ms</div>\n                        <div className=\"text-muted-foreground\">FID</div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"font-medium\">{competitor.cls.toFixed(3)}</div>\n                        <div className=\"text-muted-foreground\">CLS</div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"font-medium\">{competitor.speedIndex.toFixed(1)}s</div>\n                        <div className=\"text-muted-foreground\">Speed Index</div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default AdvancedPerformanceAnalytics;\n","usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/AuthContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/AutomatedSecurityResponse.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ComplianceOverview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/Header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/HealthDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/HealthProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/HowItWorksModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/IntelligentPerformanceOptimizer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/NotificationsModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/OfflineComponent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/PWAStatus.tsx","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":126,"column":68,"nodeType":"MemberExpression","endLine":126,"endColumn":76},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":580,"column":10,"nodeType":"MemberExpression","endLine":580,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Progress } from '@/components/ui/progress';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { \n  Download, \n  RefreshCw, \n  Wifi, \n  WifiOff, \n  Bell, \n  BellOff,\n  Smartphone,\n  Monitor,\n  Share2,\n  Settings,\n  Info,\n  CheckCircle,\n  AlertTriangle,\n  Clock,\n  Trash2,\n  Zap,\n  Shield,\n  Activity\n} from 'lucide-react';\nimport usePWA from '@/hooks/usePWA';\n\nconst PWAStatus: React.FC = () => {\n  const {\n    isInstallable,\n    isInstalled,\n    isOffline,\n    isUpdateAvailable,\n    offlineActions,\n    capabilities,\n    installPWA,\n    updatePWA,\n    requestNotificationPermission,\n    subscribeToPushNotifications,\n    clearOfflineActions,\n    shareContent,\n    getAppInfo\n  } = usePWA();\n\n  const [notificationPermission, setNotificationPermission] = useState<NotificationPermission>('default');\n  const [isInstalling, setIsInstalling] = useState(false);\n  const [isUpdating, setIsUpdating] = useState(false);\n  const [appInfo, setAppInfo] = useState<any>(null);\n  const [showPWAPrompt, setShowPWAPrompt] = useState(false);\n\n  useEffect(() => {\n    // Check notification permission\n    if ('Notification' in window) {\n      setNotificationPermission(Notification.permission);\n    }\n\n    // Load app info\n    getAppInfo().then(setAppInfo);\n\n    // Show PWA prompt for non-installed users\n    if (isInstallable && !isInstalled && !localStorage.getItem('pwa-prompt-dismissed')) {\n      setTimeout(() => setShowPWAPrompt(true), 5000);\n    }\n  }, [isInstallable, isInstalled, getAppInfo]);\n\n  const handleInstall = async () => {\n    setIsInstalling(true);\n    try {\n      const success = await installPWA();\n      if (success) {\n        setShowPWAPrompt(false);\n      }\n    } catch (error) {\n      console.error('Installation failed:', error);\n    } finally {\n      setIsInstalling(false);\n    }\n  };\n\n  const handleUpdate = async () => {\n    setIsUpdating(true);\n    try {\n      await updatePWA();\n    } catch (error) {\n      console.error('Update failed:', error);\n    } finally {\n      setIsUpdating(false);\n    }\n  };\n\n  const handleNotificationPermission = async () => {\n    const permission = await requestNotificationPermission();\n    setNotificationPermission(permission);\n    \n    if (permission === 'granted') {\n      await subscribeToPushNotifications();\n    }\n  };\n\n  const handleShare = async () => {\n    const shareData = {\n      title: 'SecureFlow Automaton',\n      text: 'Check out this amazing DevSecOps automation platform!',\n      url: window.location.origin\n    };\n\n    const success = await shareContent(shareData);\n    if (!success) {\n      // Fallback to copying URL\n      navigator.clipboard?.writeText(window.location.origin);\n    }\n  };\n\n  const dismissPWAPrompt = () => {\n    setShowPWAPrompt(false);\n    localStorage.setItem('pwa-prompt-dismissed', 'true');\n  };\n\n  const formatBytes = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const getConnectionStatus = () => {\n    if (!('connection' in navigator)) return 'Unknown';\n    const connection = (navigator as any).connection;\n    return `${connection.effectiveType?.toUpperCase() || 'Unknown'} (${connection.downlink || '?'} Mbps)`;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* PWA Installation Prompt */}\n      {showPWAPrompt && (\n        <Alert className=\"border-blue-200 bg-blue-50\">\n          <Smartphone className=\"h-4 w-4\" />\n          <AlertTitle>Install SecureFlow App</AlertTitle>\n          <AlertDescription className=\"mt-2\">\n            Install SecureFlow as a native app for better performance, offline access, and quick access from your home screen.\n            <div className=\"flex space-x-2 mt-3\">\n              <Button onClick={handleInstall} disabled={isInstalling} size=\"sm\">\n                {isInstalling ? (\n                  <>\n                    <RefreshCw className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Installing...\n                  </>\n                ) : (\n                  <>\n                    <Download className=\"w-4 h-4 mr-2\" />\n                    Install App\n                  </>\n                )}\n              </Button>\n              <Button onClick={dismissPWAPrompt} variant=\"outline\" size=\"sm\">\n                Maybe Later\n              </Button>\n            </div>\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {/* Update Available Alert */}\n      {isUpdateAvailable && (\n        <Alert className=\"border-green-200 bg-green-50\">\n          <RefreshCw className=\"h-4 w-4\" />\n          <AlertTitle>App Update Available</AlertTitle>\n          <AlertDescription className=\"mt-2\">\n            A new version of SecureFlow is available with improved features and security updates.\n            <div className=\"mt-3\">\n              <Button onClick={handleUpdate} disabled={isUpdating} size=\"sm\">\n                {isUpdating ? (\n                  <>\n                    <RefreshCw className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Updating...\n                  </>\n                ) : (\n                  <>\n                    <RefreshCw className=\"w-4 h-4 mr-2\" />\n                    Update Now\n                  </>\n                )}\n              </Button>\n            </div>\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {/* Offline Status */}\n      {isOffline && (\n        <Alert className=\"border-orange-200 bg-orange-50\">\n          <WifiOff className=\"h-4 w-4\" />\n          <AlertTitle>You're Currently Offline</AlertTitle>\n          <AlertDescription className=\"mt-2\">\n            Some features may be limited. Actions will be synchronized when you're back online.\n            {offlineActions.length > 0 && (\n              <div className=\"mt-2\">\n                <Badge variant=\"secondary\">{offlineActions.length} actions queued for sync</Badge>\n              </div>\n            )}\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {/* PWA Status Overview */}\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Installation</CardTitle>\n            {isInstalled ? <CheckCircle className=\"h-4 w-4 text-green-600\" /> : <Download className=\"h-4 w-4 text-gray-400\" />}\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {isInstalled ? 'Installed' : isInstallable ? 'Available' : 'Not Available'}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {isInstalled ? 'Running as app' : 'Web version'}\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Connection</CardTitle>\n            {isOffline ? <WifiOff className=\"h-4 w-4 text-red-600\" /> : <Wifi className=\"h-4 w-4 text-green-600\" />}\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {isOffline ? 'Offline' : 'Online'}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {getConnectionStatus()}\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Notifications</CardTitle>\n            {notificationPermission === 'granted' ? \n              <Bell className=\"h-4 w-4 text-green-600\" /> : \n              <BellOff className=\"h-4 w-4 text-gray-400\" />\n            }\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold capitalize\">\n              {notificationPermission}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Push notifications\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Sync Queue</CardTitle>\n            <Clock className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {offlineActions.length}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Pending actions\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Detailed PWA Information */}\n      <Tabs defaultValue=\"status\" className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"status\">Status</TabsTrigger>\n          <TabsTrigger value=\"capabilities\">Capabilities</TabsTrigger>\n          <TabsTrigger value=\"offline\">Offline Actions</TabsTrigger>\n          <TabsTrigger value=\"settings\">Settings</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"status\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Application Status</CardTitle>\n              <CardDescription>Current state and performance information</CardDescription>\n            </CardHeader>\n            <CardContent>\n              {appInfo && (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-4\">\n                    <div>\n                      <h4 className=\"font-medium text-gray-900 mb-2\">Application Info</h4>\n                      <div className=\"space-y-2 text-sm\">\n                        <div className=\"flex justify-between\">\n                          <span>Name:</span>\n                          <span className=\"font-medium\">{appInfo.name}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Version:</span>\n                          <span className=\"font-medium\">{appInfo.version}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Installation:</span>\n                          <Badge variant={appInfo.isInstalled ? \"default\" : \"secondary\"}>\n                            {appInfo.isInstalled ? 'Installed' : 'Web App'}\n                          </Badge>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Service Worker:</span>\n                          <Badge variant={appInfo.serviceWorkerState === 'activated' ? \"default\" : \"secondary\"}>\n                            {appInfo.serviceWorkerState}\n                          </Badge>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div>\n                      <h4 className=\"font-medium text-gray-900 mb-2\">Storage</h4>\n                      <div className=\"space-y-2 text-sm\">\n                        <div className=\"flex justify-between\">\n                          <span>Cache Size:</span>\n                          <span className=\"font-medium\">{formatBytes(appInfo.cacheSize)}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Offline Actions:</span>\n                          <span className=\"font-medium\">{appInfo.offlineActionsCount}</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <div>\n                      <h4 className=\"font-medium text-gray-900 mb-2\">Network</h4>\n                      <div className=\"space-y-2 text-sm\">\n                        <div className=\"flex justify-between\">\n                          <span>Status:</span>\n                          <Badge variant={isOffline ? \"destructive\" : \"default\"}>\n                            {isOffline ? 'Offline' : 'Online'}\n                          </Badge>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Connection:</span>\n                          <span className=\"font-medium\">{getConnectionStatus()}</span>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div>\n                      <h4 className=\"font-medium text-gray-900 mb-2\">Performance</h4>\n                      <div className=\"space-y-2 text-sm\">\n                        <div className=\"flex justify-between\">\n                          <span>Load Time:</span>\n                          <span className=\"font-medium\">\n                            {performance.timing ? \n                              `${performance.timing.loadEventEnd - performance.timing.navigationStart}ms` : \n                              'Unknown'\n                            }\n                          </span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Memory Usage:</span>\n                          <span className=\"font-medium\">\n                            {(performance as any).memory ? \n                              formatBytes((performance as any).memory.usedJSHeapSize) : \n                              'Unknown'\n                            }\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"capabilities\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>PWA Capabilities</CardTitle>\n              <CardDescription>Available progressive web app features</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {Object.entries(capabilities).map(([feature, supported]) => (\n                  <div key={feature} className=\"flex items-center justify-between p-3 border rounded\">\n                    <div className=\"flex items-center space-x-3\">\n                      {feature === 'canInstall' && <Download className=\"h-5 w-5 text-muted-foreground\" />}\n                      {feature === 'canReceiveNotifications' && <Bell className=\"h-5 w-5 text-muted-foreground\" />}\n                      {feature === 'canUseBackgroundSync' && <RefreshCw className=\"h-5 w-5 text-muted-foreground\" />}\n                      {feature === 'canUsePeriodicBackgroundSync' && <Clock className=\"h-5 w-5 text-muted-foreground\" />}\n                      {feature === 'canShareFiles' && <Share2 className=\"h-5 w-5 text-muted-foreground\" />}\n                      {feature === 'hasServiceWorker' && <Settings className=\"h-5 w-5 text-muted-foreground\" />}\n                      <div>\n                        <h4 className=\"font-medium\">\n                          {feature.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}\n                        </h4>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {getFeatureDescription(feature)}\n                        </p>\n                      </div>\n                    </div>\n                    <Badge variant={supported ? \"default\" : \"secondary\"}>\n                      {supported ? 'Supported' : 'Not Available'}\n                    </Badge>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"offline\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Offline Actions Queue</CardTitle>\n              <CardDescription>\n                Actions waiting to be synchronized when connection is restored\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {offlineActions.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <Wifi className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                  <p>No offline actions pending</p>\n                  <p className=\"text-sm\">Actions will appear here when you're offline</p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-muted-foreground\">\n                      {offlineActions.length} actions pending\n                    </span>\n                    <Button onClick={clearOfflineActions} variant=\"outline\" size=\"sm\">\n                      <Trash2 className=\"w-4 h-4 mr-2\" />\n                      Clear All\n                    </Button>\n                  </div>\n                  \n                  {offlineActions.map((action) => (\n                    <div key={action.id} className=\"border rounded-lg p-4\">\n                      <div className=\"flex items-start justify-between\">\n                        <div>\n                          <div className=\"flex items-center space-x-2 mb-2\">\n                            {action.type === 'security-scan' && <Shield className=\"h-4 w-4 text-blue-600\" />}\n                            {action.type === 'vulnerability-report' && <AlertTriangle className=\"h-4 w-4 text-orange-600\" />}\n                            {action.type === 'performance-metrics' && <Zap className=\"h-4 w-4 text-green-600\" />}\n                            {action.type === 'error-report' && <Activity className=\"h-4 w-4 text-red-600\" />}\n                            <span className=\"font-medium capitalize\">\n                              {action.type.replace('-', ' ')}\n                            </span>\n                          </div>\n                          <p className=\"text-sm text-muted-foreground\">\n                            Queued {new Date(action.timestamp).toLocaleString()}\n                          </p>\n                          {action.retryCount > 0 && (\n                            <p className=\"text-xs text-orange-600\">\n                              Retry attempts: {action.retryCount}\n                            </p>\n                          )}\n                        </div>\n                        <Badge variant=\"secondary\">Pending</Badge>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"settings\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>PWA Settings</CardTitle>\n              <CardDescription>Configure progressive web app features</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                {/* Installation */}\n                <div className=\"space-y-3\">\n                  <h4 className=\"font-medium\">Installation</h4>\n                  {isInstalled ? (\n                    <div className=\"flex items-center space-x-2\">\n                      <CheckCircle className=\"h-5 w-5 text-green-600\" />\n                      <span>App is installed</span>\n                    </div>\n                  ) : isInstallable ? (\n                    <Button onClick={handleInstall} disabled={isInstalling}>\n                      {isInstalling ? (\n                        <>\n                          <RefreshCw className=\"w-4 h-4 mr-2 animate-spin\" />\n                          Installing...\n                        </>\n                      ) : (\n                        <>\n                          <Download className=\"w-4 h-4 mr-2\" />\n                          Install App\n                        </>\n                      )}\n                    </Button>\n                  ) : (\n                    <p className=\"text-sm text-muted-foreground\">\n                      Installation not available on this device\n                    </p>\n                  )}\n                </div>\n\n                {/* Notifications */}\n                <div className=\"space-y-3\">\n                  <h4 className=\"font-medium\">Notifications</h4>\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm\">Push Notifications</p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        Receive security alerts and updates\n                      </p>\n                    </div>\n                    {notificationPermission === 'granted' ? (\n                      <Badge variant=\"default\">Enabled</Badge>\n                    ) : (\n                      <Button onClick={handleNotificationPermission} size=\"sm\">\n                        Enable\n                      </Button>\n                    )}\n                  </div>\n                </div>\n\n                {/* Sharing */}\n                <div className=\"space-y-3\">\n                  <h4 className=\"font-medium\">Sharing</h4>\n                  <Button onClick={handleShare} variant=\"outline\" className=\"w-full\">\n                    <Share2 className=\"w-4 h-4 mr-2\" />\n                    Share SecureFlow\n                  </Button>\n                </div>\n\n                {/* Update */}\n                {isUpdateAvailable && (\n                  <div className=\"space-y-3\">\n                    <h4 className=\"font-medium\">Updates</h4>\n                    <Button onClick={handleUpdate} disabled={isUpdating} className=\"w-full\">\n                      {isUpdating ? (\n                        <>\n                          <RefreshCw className=\"w-4 h-4 mr-2 animate-spin\" />\n                          Updating...\n                        </>\n                      ) : (\n                        <>\n                          <RefreshCw className=\"w-4 h-4 mr-2\" />\n                          Update to Latest Version\n                        </>\n                      )}\n                    </Button>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n};\n\nconst getFeatureDescription = (feature: string): string => {\n  const descriptions: Record<string, string> = {\n    canInstall: 'Install app to home screen',\n    canReceiveNotifications: 'Receive push notifications',\n    canUseBackgroundSync: 'Sync data in background',\n    canUsePeriodicBackgroundSync: 'Periodic background updates',\n    canShareFiles: 'Share content with other apps',\n    hasServiceWorker: 'Offline functionality support'\n  };\n  \n  return descriptions[feature] || 'PWA feature';\n};\n\nexport default PWAStatus;\n","usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/PerformanceMonitor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/PipelineFlow.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ProfileDropdown.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ProjectTimeline.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/RealUserMonitoring.tsx","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":890,"column":23,"nodeType":"MemberExpression","endLine":890,"endColumn":31},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":890,"column":35,"nodeType":"MemberExpression","endLine":890,"endColumn":43}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Progress } from '@/components/ui/progress';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { \n  LineChart, \n  Line, \n  AreaChart, \n  Area, \n  BarChart, \n  Bar, \n  XAxis, \n  YAxis, \n  CartesianGrid, \n  Tooltip, \n  ResponsiveContainer,\n  PieChart,\n  Pie,\n  Cell,\n  ScatterChart,\n  Scatter,\n  ReferenceLine,\n  ComposedChart\n} from 'recharts';\nimport { \n  Users, \n  Globe, \n  Smartphone, \n  Monitor, \n  Wifi, \n  Zap,\n  Clock,\n  TrendingUp,\n  TrendingDown,\n  AlertTriangle,\n  CheckCircle,\n  Activity,\n  Eye,\n  MousePointer,\n  Navigation,\n  Gauge,\n  Shield,\n  Download,\n  RefreshCw,\n  Server,\n  Database,\n  Network,\n  BarChart3,\n  Target,\n  Settings\n} from 'lucide-react';\n\ninterface UserSession {\n  id: string;\n  userId?: string;\n  startTime: Date;\n  endTime?: Date;\n  duration: number; // seconds\n  pageViews: number;\n  bounced: boolean;\n  country: string;\n  city: string;\n  device: 'desktop' | 'mobile' | 'tablet';\n  browser: string;\n  os: string;\n  connectionType: string;\n  performanceMetrics: {\n    lcp: number;\n    fid: number;\n    cls: number;\n    ttfb: number;\n    fcp: number;\n    si: number; // Speed Index\n    tbt: number; // Total Blocking Time\n  };\n  userExperience: 'good' | 'needs-improvement' | 'poor';\n  securityEvents: {\n    cspViolations: number;\n    xssAttempts: number;\n    authFailures: number;\n    suspiciousRequests: number;\n  };\n  businessMetrics: {\n    conversionEvents: number;\n    revenueGenerated: number;\n    goalCompletions: string[];\n  };\n}\n\ninterface PagePerformance {\n  path: string;\n  visits: number;\n  avgLoadTime: number;\n  bounceRate: number;\n  conversionRate: number;\n  performanceScore: number;\n  securityScore: number;\n  accessibilityScore: number;\n  seoScore: number;\n  coreWebVitals: {\n    lcp: { value: number; rating: string; percentile: number };\n    fid: { value: number; rating: string; percentile: number };\n    cls: { value: number; rating: string; percentile: number };\n    ttfb: { value: number; rating: string; percentile: number };\n  };\n  errors: {\n    jsErrors: number;\n    networkErrors: number;\n    renderErrors: number;\n  };\n}\n\ninterface UserJourney {\n  sessionId: string;\n  steps: {\n    page: string;\n    timestamp: Date;\n    timeSpent: number;\n    interactions: number;\n    exitPoint?: boolean;\n    errorOccurred?: boolean;\n    securityEvent?: string;\n  }[];\n  conversionFunnel: string[];\n  dropOffPoint?: string;\n  satisfactionScore: number;\n}\n\ninterface PerformanceTrend {\n  timestamp: Date;\n  lcp: number;\n  fid: number;\n  cls: number;\n  tti: number;\n  activeUsers: number;\n  pageLoadTime: number;\n  errorRate: number;\n  satisfactionScore: number;\n  securityThreats: number;\n  serverResponseTime: number;\n  cacheHitRate: number;\n  bandwidthUsage: number;\n}\n\nconst RealUserMonitoring: React.FC = () => {\n  const [sessions, setSessions] = useState<UserSession[]>([]);\n  const [pagePerformance, setPagePerformance] = useState<PagePerformance[]>([]);\n  const [userJourneys, setUserJourneys] = useState<UserJourney[]>([]);\n  const [performanceTrends, setPerformanceTrends] = useState<PerformanceTrend[]>([]);\n  const [realTimeMetrics, setRealTimeMetrics] = useState({\n    activeUsers: 0,\n    avgSessionDuration: 0,\n    bounceRate: 0,\n    pageLoadTime: 0,\n    errorRate: 0,\n    satisfactionScore: 0,\n    securityThreats: 0,\n    serverUptime: 99.9,\n    cacheEfficiency: 85.2,\n    conversionRate: 3.4\n  });\n  const [timeRange, setTimeRange] = useState<'1h' | '24h' | '7d' | '30d'>('24h');\n  const [alerts, setAlerts] = useState<Array<{\n    id: string;\n    type: 'performance' | 'security' | 'error' | 'business';\n    severity: 'low' | 'medium' | 'high' | 'critical';\n    message: string;\n    timestamp: Date;\n    resolved: boolean;\n  }>>([]);\n\n  const generateMockSessions = useCallback((): UserSession[] => {\n    const countries = ['United States', 'United Kingdom', 'Germany', 'France', 'Japan', 'Australia'];\n    const cities = ['New York', 'London', 'Berlin', 'Paris', 'Tokyo', 'Sydney'];\n    const devices = ['desktop', 'mobile', 'tablet'] as const;\n    const browsers = ['Chrome', 'Firefox', 'Safari', 'Edge'];\n    const oses = ['Windows', 'macOS', 'iOS', 'Android', 'Linux'];\n    const connections = ['4g', '3g', 'wifi', '5g'];\n\n    const sessions: UserSession[] = [];\n    \n    for (let i = 0; i < 50; i++) {\n      const startTime = new Date(Date.now() - Math.random() * 24 * 60 * 60 * 1000);\n      const duration = Math.random() * 1800 + 30; // 30 seconds to 30 minutes\n      const pageViews = Math.floor(Math.random() * 10) + 1;\n      const lcp = Math.random() * 4000 + 1000;\n      const fid = Math.random() * 300 + 50;\n      const cls = Math.random() * 0.5;\n      const ttfb = Math.random() * 1000 + 200;\n      const fcp = Math.random() * 2000 + 800;\n      const si = Math.random() * 3000 + 1500;\n      const tbt = Math.random() * 600 + 100;\n      \n      let userExperience: 'good' | 'needs-improvement' | 'poor' = 'good';\n      if (lcp > 2500 || fid > 100 || cls > 0.1) {\n        userExperience = lcp > 4000 || fid > 300 || cls > 0.25 ? 'poor' : 'needs-improvement';\n      }\n\n      sessions.push({\n        id: `session-${i}`,\n        userId: Math.random() > 0.3 ? `user-${Math.floor(Math.random() * 1000)}` : undefined,\n        startTime,\n        endTime: new Date(startTime.getTime() + duration * 1000),\n        duration,\n        pageViews,\n        bounced: pageViews === 1 && duration < 30,\n        country: countries[Math.floor(Math.random() * countries.length)],\n        city: cities[Math.floor(Math.random() * cities.length)],\n        device: devices[Math.floor(Math.random() * devices.length)],\n        browser: browsers[Math.floor(Math.random() * browsers.length)],\n        os: oses[Math.floor(Math.random() * oses.length)],\n        connectionType: connections[Math.floor(Math.random() * connections.length)],\n        performanceMetrics: {\n          lcp,\n          fid,\n          cls,\n          ttfb,\n          fcp,\n          si,\n          tbt\n        },\n        userExperience,\n        securityEvents: {\n          cspViolations: Math.floor(Math.random() * 3),\n          xssAttempts: Math.floor(Math.random() * 2),\n          authFailures: Math.floor(Math.random() * 2),\n          suspiciousRequests: Math.floor(Math.random() * 5)\n        },\n        businessMetrics: {\n          conversionEvents: Math.floor(Math.random() * 3),\n          revenueGenerated: Math.random() * 500,\n          goalCompletions: Math.random() > 0.7 ? ['newsletter_signup', 'demo_request'] : []\n        }\n      });\n    }\n    \n    return sessions.sort((a, b) => b.startTime.getTime() - a.startTime.getTime());\n  }, []);\n\n  const generatePagePerformance = useCallback((): PagePerformance[] => {\n    const pages = [\n      { path: '/', name: 'Home' },\n      { path: '/auth', name: 'Authentication' },\n      { path: '/profile', name: 'Profile' },\n      { path: '/settings', name: 'Settings' },\n      { path: '/monitoring', name: 'Monitoring' },\n      { path: '/security-report', name: 'Security Report' },\n      { path: '/vulnerabilities', name: 'Vulnerabilities' }\n    ];\n\n    return pages.map(page => {\n      const lcp = Math.random() * 3000 + 1000;\n      const fid = Math.random() * 200 + 50;\n      const cls = Math.random() * 0.3;\n      const ttfb = Math.random() * 800 + 200;\n      \n      const getRating = (metric: string, value: number) => {\n        switch (metric) {\n          case 'lcp': return value <= 2500 ? 'good' : value <= 4000 ? 'needs-improvement' : 'poor';\n          case 'fid': return value <= 100 ? 'good' : value <= 300 ? 'needs-improvement' : 'poor';\n          case 'cls': return value <= 0.1 ? 'good' : value <= 0.25 ? 'needs-improvement' : 'poor';\n          case 'ttfb': return value <= 600 ? 'good' : value <= 1500 ? 'needs-improvement' : 'poor';\n          default: return 'good';\n        }\n      };\n\n      const getPercentile = (metric: string, value: number) => {\n        // Simulate percentile ranking\n        switch (metric) {\n          case 'lcp': return Math.max(10, Math.min(90, 100 - (value / 50)));\n          case 'fid': return Math.max(10, Math.min(90, 100 - (value / 5)));\n          case 'cls': return Math.max(10, Math.min(90, 100 - (value * 200)));\n          case 'ttfb': return Math.max(10, Math.min(90, 100 - (value / 20)));\n          default: return 75;\n        }\n      };\n\n      const performanceScore = Math.round((\n        (getRating('lcp', lcp) === 'good' ? 100 : getRating('lcp', lcp) === 'needs-improvement' ? 60 : 30) +\n        (getRating('fid', fid) === 'good' ? 100 : getRating('fid', fid) === 'needs-improvement' ? 60 : 30) +\n        (getRating('cls', cls) === 'good' ? 100 : getRating('cls', cls) === 'needs-improvement' ? 60 : 30)\n      ) / 3);\n\n      return {\n        path: page.path,\n        visits: Math.floor(Math.random() * 1000) + 100,\n        avgLoadTime: Math.random() * 3000 + 1000,\n        bounceRate: Math.random() * 50 + 20,\n        conversionRate: Math.random() * 15 + 5,\n        performanceScore,\n        securityScore: Math.floor(Math.random() * 30) + 70,\n        accessibilityScore: Math.floor(Math.random() * 20) + 80,\n        seoScore: Math.floor(Math.random() * 25) + 75,\n        coreWebVitals: {\n          lcp: { value: lcp, rating: getRating('lcp', lcp), percentile: Math.round(getPercentile('lcp', lcp)) },\n          fid: { value: fid, rating: getRating('fid', fid), percentile: Math.round(getPercentile('fid', fid)) },\n          cls: { value: cls, rating: getRating('cls', cls), percentile: Math.round(getPercentile('cls', cls)) },\n          ttfb: { value: ttfb, rating: getRating('ttfb', ttfb), percentile: Math.round(getPercentile('ttfb', ttfb)) }\n        },\n        errors: {\n          jsErrors: Math.floor(Math.random() * 10),\n          networkErrors: Math.floor(Math.random() * 5),\n          renderErrors: Math.floor(Math.random() * 3)\n        }\n      };\n    });\n  }, []);\n\n  const generatePerformanceTrends = useCallback((): PerformanceTrend[] => {\n    const trends: PerformanceTrend[] = [];\n    const hoursBack = timeRange === '1h' ? 1 : timeRange === '24h' ? 24 : timeRange === '7d' ? 168 : 720;\n    \n    for (let i = hoursBack; i >= 0; i--) {\n      const timestamp = new Date(Date.now() - i * 60 * 60 * 1000);\n      \n      trends.push({\n        timestamp,\n        lcp: Math.random() * 1000 + 1500 + Math.sin(i / 12) * 200,\n        fid: Math.random() * 50 + 75 + Math.sin(i / 8) * 15,\n        cls: Math.random() * 0.1 + 0.05 + Math.sin(i / 6) * 0.02,\n        tti: Math.random() * 1500 + 2000 + Math.sin(i / 10) * 300,\n        activeUsers: Math.floor(Math.random() * 500 + 200 + Math.sin(i / 4) * 100),\n        pageLoadTime: Math.random() * 1000 + 1200 + Math.sin(i / 14) * 200,\n        errorRate: Math.random() * 2 + 0.5,\n        satisfactionScore: Math.random() * 20 + 75 + Math.sin(i / 16) * 5,\n        securityThreats: Math.floor(Math.random() * 10 + Math.sin(i / 20) * 3),\n        serverResponseTime: Math.random() * 300 + 150 + Math.sin(i / 18) * 50,\n        cacheHitRate: Math.random() * 20 + 75 + Math.sin(i / 22) * 5,\n        bandwidthUsage: Math.random() * 100 + 200 + Math.sin(i / 24) * 30\n      });\n    }\n    \n    return trends;\n  }, [timeRange]);\n\n  const calculateRealTimeMetrics = useCallback((sessions: UserSession[]) => {\n    const recentSessions = sessions.filter(s => \n      Date.now() - s.startTime.getTime() < 60 * 60 * 1000 // Last hour\n    );\n    \n    const activeUsers = recentSessions.filter(s => !s.endTime || \n      Date.now() - s.endTime.getTime() < 5 * 60 * 1000 // Active in last 5 minutes\n    ).length;\n    \n    const avgSessionDuration = recentSessions.length > 0 \n      ? recentSessions.reduce((sum, s) => sum + s.duration, 0) / recentSessions.length \n      : 0;\n    \n    const bounceRate = recentSessions.length > 0 \n      ? (recentSessions.filter(s => s.bounced).length / recentSessions.length) * 100 \n      : 0;\n    \n    const avgPageLoadTime = recentSessions.length > 0 \n      ? recentSessions.reduce((sum, s) => sum + s.performanceMetrics.lcp, 0) / recentSessions.length \n      : 0;\n    \n    const errorRate = Math.random() * 2 + 0.5; // Simulated\n    const securityThreats = recentSessions.reduce((sum, s) => \n      sum + s.securityEvents.cspViolations + s.securityEvents.xssAttempts + \n      s.securityEvents.authFailures + s.securityEvents.suspiciousRequests, 0\n    );\n    \n    const goodExperiences = recentSessions.filter(s => s.userExperience === 'good').length;\n    const satisfactionScore = recentSessions.length > 0 \n      ? (goodExperiences / recentSessions.length) * 100 \n      : 0;\n    \n    const conversionRate = recentSessions.length > 0\n      ? (recentSessions.reduce((sum, s) => sum + s.businessMetrics.conversionEvents, 0) / recentSessions.length) * 100\n      : 0;\n    \n    return {\n      activeUsers,\n      avgSessionDuration: Math.round(avgSessionDuration),\n      bounceRate: Math.round(bounceRate * 10) / 10,\n      pageLoadTime: Math.round(avgPageLoadTime),\n      errorRate: Math.round(errorRate * 10) / 10,\n      satisfactionScore: Math.round(satisfactionScore),\n      securityThreats,\n      serverUptime: 99.5 + Math.random() * 0.4,\n      cacheEfficiency: 80 + Math.random() * 15,\n      conversionRate: Math.round(conversionRate * 10) / 10\n    };\n  }, []);\n\n  useEffect(() => {\n    const sessions = generateMockSessions();\n    setSessions(sessions);\n    setPagePerformance(generatePagePerformance());\n    setPerformanceTrends(generatePerformanceTrends());\n    setRealTimeMetrics(calculateRealTimeMetrics(sessions));\n\n    // Generate alerts\n    const newAlerts = [\n      {\n        id: 'alert-1',\n        type: 'performance' as const,\n        severity: 'medium' as const,\n        message: 'Page load time increased by 15% in the last hour',\n        timestamp: new Date(Date.now() - 30 * 60 * 1000),\n        resolved: false\n      },\n      {\n        id: 'alert-2',\n        type: 'security' as const,\n        severity: 'high' as const,\n        message: 'Unusual number of authentication failures detected',\n        timestamp: new Date(Date.now() - 45 * 60 * 1000),\n        resolved: false\n      },\n      {\n        id: 'alert-3',\n        type: 'business' as const,\n        severity: 'low' as const,\n        message: 'Conversion rate dropped below threshold on /auth page',\n        timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000),\n        resolved: true\n      }\n    ];\n    setAlerts(newAlerts);\n\n    // Update real-time metrics every 30 seconds\n    const interval = setInterval(() => {\n      const updatedSessions = generateMockSessions();\n      setSessions(updatedSessions);\n      setRealTimeMetrics(calculateRealTimeMetrics(updatedSessions));\n    }, 30000);\n\n    return () => clearInterval(interval);\n  }, [timeRange, generateMockSessions, generatePagePerformance, generatePerformanceTrends, calculateRealTimeMetrics]);\n\n  const getExperienceColor = (experience: string) => {\n    switch (experience) {\n      case 'good': return 'text-green-600';\n      case 'needs-improvement': return 'text-yellow-600';\n      case 'poor': return 'text-red-600';\n      default: return 'text-gray-600';\n    }\n  };\n\n  const getRatingBadge = (rating: string) => {\n    switch (rating) {\n      case 'good': return <Badge className=\"bg-green-100 text-green-800\">Good</Badge>;\n      case 'needs-improvement': return <Badge className=\"bg-yellow-100 text-yellow-800\">Needs Improvement</Badge>;\n      case 'poor': return <Badge className=\"bg-red-100 text-red-800\">Poor</Badge>;\n      default: return <Badge variant=\"secondary\">Unknown</Badge>;\n    }\n  };\n\n  const deviceStats = sessions.reduce((acc, session) => {\n    acc[session.device] = (acc[session.device] || 0) + 1;\n    return acc;\n  }, {} as Record<string, number>);\n\n  const deviceChartData = Object.entries(deviceStats).map(([device, count]) => ({\n    device: device.charAt(0).toUpperCase() + device.slice(1),\n    count,\n    percentage: Math.round((count / sessions.length) * 100)\n  }));\n\n  const experienceDistribution = sessions.reduce((acc, session) => {\n    acc[session.userExperience] = (acc[session.userExperience] || 0) + 1;\n    return acc;\n  }, {} as Record<string, number>);\n\n  const exportReport = () => {\n    const reportData = {\n      timestamp: new Date().toISOString(),\n      timeRange,\n      summary: realTimeMetrics,\n      performanceTrends: performanceTrends.slice(-10),\n      pagePerformance,\n      sessionSample: sessions.slice(0, 5),\n      alerts: alerts.filter(a => !a.resolved)\n    };\n    \n    const blob = new Blob([JSON.stringify(reportData, null, 2)], { \n      type: 'application/json' \n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `rum-report-${new Date().toISOString().split('T')[0]}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  const experienceChartData = Object.entries(experienceDistribution).map(([experience, count]) => ({\n    experience: experience.replace('-', ' ').replace(/\\b\\w/g, l => l.toUpperCase()),\n    count,\n    percentage: Math.round((count / sessions.length) * 100),\n    color: experience === 'good' ? '#22c55e' : experience === 'needs-improvement' ? '#eab308' : '#ef4444'\n  }));\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Alerts Section */}\n      {alerts.filter(a => !a.resolved).length > 0 && (\n        <Alert className=\"border-orange-200 bg-orange-50\">\n          <AlertTriangle className=\"h-4 w-4\" />\n          <AlertTitle>Active Alerts</AlertTitle>\n          <AlertDescription>\n            <div className=\"space-y-2 mt-2\">\n              {alerts.filter(a => !a.resolved).map(alert => (\n                <div key={alert.id} className=\"flex items-center justify-between text-sm\">\n                  <span>{alert.message}</span>\n                  <Badge variant={alert.severity === 'high' ? 'destructive' : 'default'}>\n                    {alert.severity}\n                  </Badge>\n                </div>\n              ))}\n            </div>\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {/* Time Range Selector and Export */}\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-2xl font-bold\">Real User Monitoring</h2>\n        <div className=\"flex space-x-2\">\n          <Button onClick={exportReport} variant=\"outline\" size=\"sm\">\n            <Download className=\"h-4 w-4 mr-2\" />\n            Export Report\n          </Button>\n          {(['1h', '24h', '7d', '30d'] as const).map((range) => (\n            <Button\n              key={range}\n              onClick={() => setTimeRange(range)}\n              variant={timeRange === range ? \"default\" : \"outline\"}\n              size=\"sm\"\n            >\n              {range}\n            </Button>\n          ))}\n        </div>\n      </div>\n\n      {/* Real-time Overview */}\n      <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Users</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-600\">{realTimeMetrics.activeUsers}</div>\n            <p className=\"text-xs text-muted-foreground\">Currently online</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Avg Session</CardTitle>\n            <Clock className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{Math.floor(realTimeMetrics.avgSessionDuration / 60)}m</div>\n            <p className=\"text-xs text-muted-foreground\">{realTimeMetrics.avgSessionDuration % 60}s</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Page Load</CardTitle>\n            <Zap className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{(realTimeMetrics.pageLoadTime / 1000).toFixed(1)}s</div>\n            <p className=\"text-xs text-muted-foreground\">Average LCP</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Security Threats</CardTitle>\n            <Shield className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-red-600\">{realTimeMetrics.securityThreats}</div>\n            <p className=\"text-xs text-muted-foreground\">Past hour</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Conversion Rate</CardTitle>\n            <Target className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">{realTimeMetrics.conversionRate}%</div>\n            <p className=\"text-xs text-muted-foreground\">Goal completions</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Additional Metrics */}\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Server Uptime</CardTitle>\n            <Server className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">{realTimeMetrics.serverUptime.toFixed(1)}%</div>\n            <p className=\"text-xs text-muted-foreground\">Last 30 days</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Cache Efficiency</CardTitle>\n            <Database className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{realTimeMetrics.cacheEfficiency.toFixed(0)}%</div>\n            <p className=\"text-xs text-muted-foreground\">Hit rate</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Error Rate</CardTitle>\n            <AlertTriangle className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-orange-600\">{realTimeMetrics.errorRate}%</div>\n            <p className=\"text-xs text-muted-foreground\">Client errors</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Satisfaction</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">{realTimeMetrics.satisfactionScore}%</div>\n            <p className=\"text-xs text-muted-foreground\">Good experiences</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Content Tabs */}\n      <Tabs defaultValue=\"trends\" className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"trends\">Performance Trends</TabsTrigger>\n          <TabsTrigger value=\"pages\">Page Analytics</TabsTrigger>\n          <TabsTrigger value=\"users\">User Insights</TabsTrigger>\n          <TabsTrigger value=\"sessions\">Live Sessions</TabsTrigger>\n          <TabsTrigger value=\"security\">Security Analysis</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"trends\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Core Web Vitals Trends */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Core Web Vitals Trends</CardTitle>\n                <CardDescription>Real user performance metrics over time</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <LineChart data={performanceTrends}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis \n                      dataKey=\"timestamp\" \n                      tickFormatter={(time) => new Date(time).toLocaleTimeString()}\n                    />\n                    <YAxis />\n                    <Tooltip \n                      labelFormatter={(time) => new Date(time).toLocaleString()}\n                      formatter={(value: number, name: string) => [\n                        name === 'cls' ? value.toFixed(3) : `${Math.round(value)}${name === 'cls' ? '' : 'ms'}`,\n                        name.toUpperCase()\n                      ]}\n                    />\n                    <Line type=\"monotone\" dataKey=\"lcp\" stroke=\"#8884d8\" name=\"LCP\" />\n                    <Line type=\"monotone\" dataKey=\"fid\" stroke=\"#82ca9d\" name=\"FID\" />\n                    <Line type=\"monotone\" dataKey=\"tti\" stroke=\"#ffc658\" name=\"TTI\" />\n                  </LineChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            {/* User Experience Distribution */}\n            <Card>\n              <CardHeader>\n                <CardTitle>User Experience Distribution</CardTitle>\n                <CardDescription>Current user satisfaction breakdown</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <PieChart>\n                    <Pie\n                      data={experienceChartData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"count\"\n                      label={({ experience, percentage }) => `${experience}: ${percentage}%`}\n                    >\n                      {experienceChartData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={entry.color} />\n                      ))}\n                    </Pie>\n                    <Tooltip />\n                  </PieChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            {/* Active Users Over Time */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Active Users</CardTitle>\n                <CardDescription>User activity and engagement trends</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <AreaChart data={performanceTrends}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis \n                      dataKey=\"timestamp\" \n                      tickFormatter={(time) => new Date(time).toLocaleTimeString()}\n                    />\n                    <YAxis />\n                    <Tooltip \n                      labelFormatter={(time) => new Date(time).toLocaleString()}\n                    />\n                    <Area \n                      type=\"monotone\" \n                      dataKey=\"activeUsers\" \n                      stroke=\"#8884d8\" \n                      fill=\"#8884d8\"\n                      fillOpacity={0.6}\n                      name=\"Active Users\"\n                    />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            {/* Device Distribution */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Device Distribution</CardTitle>\n                <CardDescription>User sessions by device type</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <BarChart data={deviceChartData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"device\" />\n                    <YAxis />\n                    <Tooltip \n                      formatter={(value: number, name: string) => [\n                        name === 'count' ? `${value} sessions` : `${value}%`,\n                        name === 'count' ? 'Sessions' : 'Percentage'\n                      ]}\n                    />\n                    <Bar dataKey=\"count\" fill=\"#8884d8\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"pages\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Page Performance Analytics</CardTitle>\n              <CardDescription>Performance breakdown by page</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {pagePerformance.map((page) => (\n                  <div key={page.path} className=\"border rounded-lg p-4\">\n                    <div className=\"flex items-start justify-between mb-3\">\n                      <div>\n                        <h4 className=\"font-semibold\">{page.path}</h4>\n                        <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                          <span>{page.visits} visits</span>\n                          <span>{(page.avgLoadTime / 1000).toFixed(1)}s avg load</span>\n                          <span>{page.bounceRate.toFixed(1)}% bounce rate</span>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"text-2xl font-bold\">{page.performanceScore}</div>\n                        <p className=\"text-xs text-muted-foreground\">Performance Score</p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-4 gap-4\">\n                      <div className=\"text-center\">\n                        <div className=\"text-lg font-semibold\">\n                          {(page.coreWebVitals.lcp.value / 1000).toFixed(2)}s\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">LCP</div>\n                        {getRatingBadge(page.coreWebVitals.lcp.rating)}\n                        <div className=\"text-xs text-muted-foreground mt-1\">\n                          {page.coreWebVitals.lcp.percentile}th percentile\n                        </div>\n                      </div>\n                      \n                      <div className=\"text-center\">\n                        <div className=\"text-lg font-semibold\">\n                          {page.coreWebVitals.fid.value.toFixed(0)}ms\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">FID</div>\n                        {getRatingBadge(page.coreWebVitals.fid.rating)}\n                        <div className=\"text-xs text-muted-foreground mt-1\">\n                          {page.coreWebVitals.fid.percentile}th percentile\n                        </div>\n                      </div>\n                      \n                      <div className=\"text-center\">\n                        <div className=\"text-lg font-semibold\">\n                          {page.coreWebVitals.cls.value.toFixed(3)}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">CLS</div>\n                        {getRatingBadge(page.coreWebVitals.cls.rating)}\n                        <div className=\"text-xs text-muted-foreground mt-1\">\n                          {page.coreWebVitals.cls.percentile}th percentile\n                        </div>\n                      </div>\n\n                      <div className=\"text-center\">\n                        <div className=\"text-lg font-semibold\">\n                          {page.coreWebVitals.ttfb.value.toFixed(0)}ms\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">TTFB</div>\n                        {getRatingBadge(page.coreWebVitals.ttfb.rating)}\n                        <div className=\"text-xs text-muted-foreground mt-1\">\n                          {page.coreWebVitals.ttfb.percentile}th percentile\n                        </div>\n                      </div>\n                    </div>\n                    \n                    {/* Additional Scores */}\n                    <div className=\"grid grid-cols-3 gap-4 mt-4 pt-4 border-t\">\n                      <div className=\"text-center\">\n                        <div className=\"text-sm font-medium\">Security</div>\n                        <div className=\"text-2xl font-bold text-green-600\">{page.securityScore}</div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"text-sm font-medium\">Accessibility</div>\n                        <div className=\"text-2xl font-bold text-blue-600\">{page.accessibilityScore}</div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"text-sm font-medium\">SEO</div>\n                        <div className=\"text-2xl font-bold text-purple-600\">{page.seoScore}</div>\n                      </div>\n                    </div>\n\n                    {/* Error Summary */}\n                    <div className=\"mt-4 pt-4 border-t\">\n                      <div className=\"text-sm font-medium mb-2\">Error Summary</div>\n                      <div className=\"flex space-x-4 text-sm text-muted-foreground\">\n                        <span>JS Errors: {page.errors.jsErrors}</span>\n                        <span>Network Errors: {page.errors.networkErrors}</span>\n                        <span>Render Errors: {page.errors.renderErrors}</span>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"users\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Geographic Distribution</CardTitle>\n                <CardDescription>User sessions by location</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {Object.entries(\n                    sessions.reduce((acc, session) => {\n                      const key = `${session.country}, ${session.city}`;\n                      acc[key] = (acc[key] || 0) + 1;\n                      return acc;\n                    }, {} as Record<string, number>)\n                  ).slice(0, 8).map(([location, count]) => (\n                    <div key={location} className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Globe className=\"h-4 w-4 text-muted-foreground\" />\n                        <span className=\"text-sm\">{location}</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-sm font-medium\">{count}</span>\n                        <Progress value={(count / sessions.length) * 100} className=\"w-16\" />\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Technology Stack</CardTitle>\n                <CardDescription>Browser and OS distribution</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div>\n                    <h5 className=\"font-medium mb-2\">Browsers</h5>\n                    {Object.entries(\n                      sessions.reduce((acc, session) => {\n                        acc[session.browser] = (acc[session.browser] || 0) + 1;\n                        return acc;\n                      }, {} as Record<string, number>)\n                    ).map(([browser, count]) => (\n                      <div key={browser} className=\"flex items-center justify-between mb-1\">\n                        <span className=\"text-sm\">{browser}</span>\n                        <span className=\"text-sm font-medium\">\n                          {Math.round((count / sessions.length) * 100)}%\n                        </span>\n                      </div>\n                    ))}\n                  </div>\n                  \n                  <div>\n                    <h5 className=\"font-medium mb-2\">Operating Systems</h5>\n                    {Object.entries(\n                      sessions.reduce((acc, session) => {\n                        acc[session.os] = (acc[session.os] || 0) + 1;\n                        return acc;\n                      }, {} as Record<string, number>)\n                    ).map(([os, count]) => (\n                      <div key={os} className=\"flex items-center justify-between mb-1\">\n                        <span className=\"text-sm\">{os}</span>\n                        <span className=\"text-sm font-medium\">\n                          {Math.round((count / sessions.length) * 100)}%\n                        </span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"sessions\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Live User Sessions</CardTitle>\n              <CardDescription>Real-time user activity and performance</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {sessions.slice(0, 10).map((session) => (\n                  <div key={session.id} className=\"border rounded-lg p-4\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center space-x-2\">\n                          {session.device === 'desktop' && <Monitor className=\"h-4 w-4\" />}\n                          {session.device === 'mobile' && <Smartphone className=\"h-4 w-4\" />}\n                          {session.device === 'tablet' && <Monitor className=\"h-4 w-4\" />}\n                          <span className=\"font-medium capitalize\">{session.device}</span>\n                          <Badge className={getExperienceColor(session.userExperience)}>\n                            {session.userExperience.replace('-', ' ')}\n                          </Badge>\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                          <span>{session.country}, {session.city}</span>\n                          <span>{session.browser} on {session.os}</span>\n                          <span>{session.connectionType.toUpperCase()}</span>\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-4 text-xs text-muted-foreground\">\n                          <span>Duration: {Math.floor(session.duration / 60)}m {session.duration % 60}s</span>\n                          <span>Pages: {session.pageViews}</span>\n                          <span>Started: {session.startTime.toLocaleTimeString()}</span>\n                        </div>\n                      </div>\n                      \n                      <div className=\"text-right space-y-1\">\n                        <div className=\"text-sm\">\n                          <span className=\"font-medium\">LCP:</span> {(session.performanceMetrics.lcp / 1000).toFixed(2)}s\n                        </div>\n                        <div className=\"text-sm\">\n                          <span className=\"font-medium\">FID:</span> {session.performanceMetrics.fid.toFixed(0)}ms\n                        </div>\n                        <div className=\"text-sm\">\n                          <span className=\"font-medium\">CLS:</span> {session.performanceMetrics.cls.toFixed(3)}\n                        </div>\n                        <div className=\"text-sm\">\n                          <span className=\"font-medium\">TTFB:</span> {session.performanceMetrics.ttfb.toFixed(0)}ms\n                        </div>\n                      </div>\n                    </div>\n                    \n                    {/* Security Events */}\n                    {(session.securityEvents.cspViolations + session.securityEvents.xssAttempts + \n                      session.securityEvents.authFailures + session.securityEvents.suspiciousRequests) > 0 && (\n                      <div className=\"mt-3 pt-3 border-t\">\n                        <div className=\"text-sm font-medium mb-1\">Security Events</div>\n                        <div className=\"flex flex-wrap gap-2 text-xs\">\n                          {session.securityEvents.cspViolations > 0 && (\n                            <Badge variant=\"destructive\">CSP: {session.securityEvents.cspViolations}</Badge>\n                          )}\n                          {session.securityEvents.xssAttempts > 0 && (\n                            <Badge variant=\"destructive\">XSS: {session.securityEvents.xssAttempts}</Badge>\n                          )}\n                          {session.securityEvents.authFailures > 0 && (\n                            <Badge variant=\"destructive\">Auth: {session.securityEvents.authFailures}</Badge>\n                          )}\n                          {session.securityEvents.suspiciousRequests > 0 && (\n                            <Badge variant=\"destructive\">Suspicious: {session.securityEvents.suspiciousRequests}</Badge>\n                          )}\n                        </div>\n                      </div>\n                    )}\n\n                    {/* Business Metrics */}\n                    {session.businessMetrics.conversionEvents > 0 && (\n                      <div className=\"mt-3 pt-3 border-t\">\n                        <div className=\"text-sm font-medium mb-1\">Business Impact</div>\n                        <div className=\"text-sm text-green-600\">\n                          {session.businessMetrics.conversionEvents} conversions\n                          {session.businessMetrics.revenueGenerated > 0 && \n                            ` • $${session.businessMetrics.revenueGenerated.toFixed(2)} revenue`\n                          }\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"security\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Security Threat Timeline</CardTitle>\n                <CardDescription>Security events and threats over time</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <LineChart data={performanceTrends}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis \n                      dataKey=\"timestamp\" \n                      tickFormatter={(time) => new Date(time).toLocaleTimeString()}\n                    />\n                    <YAxis />\n                    <Tooltip \n                      labelFormatter={(time) => new Date(time).toLocaleString()}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"securityThreats\" \n                      stroke=\"#ef4444\" \n                      name=\"Security Threats\"\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Security Event Summary</CardTitle>\n                <CardDescription>Breakdown of security events by type</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {['CSP Violations', 'XSS Attempts', 'Auth Failures', 'Suspicious Requests'].map((event, index) => {\n                    const count = sessions.reduce((sum, session) => {\n                      switch (index) {\n                        case 0: return sum + session.securityEvents.cspViolations;\n                        case 1: return sum + session.securityEvents.xssAttempts;\n                        case 2: return sum + session.securityEvents.authFailures;\n                        case 3: return sum + session.securityEvents.suspiciousRequests;\n                        default: return sum;\n                      }\n                    }, 0);\n                    \n                    return (\n                      <div key={event} className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Shield className=\"h-4 w-4 text-muted-foreground\" />\n                          <span className=\"text-sm\">{event}</span>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <span className=\"text-sm font-medium\">{count}</span>\n                          <Badge variant={count > 10 ? 'destructive' : count > 5 ? 'default' : 'secondary'}>\n                            {count > 10 ? 'High' : count > 5 ? 'Medium' : 'Low'}\n                          </Badge>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Infrastructure Metrics</CardTitle>\n                <CardDescription>Server and network performance indicators</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <ComposedChart data={performanceTrends}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis \n                      dataKey=\"timestamp\" \n                      tickFormatter={(time) => new Date(time).toLocaleTimeString()}\n                    />\n                    <YAxis yAxisId=\"left\" />\n                    <YAxis yAxisId=\"right\" orientation=\"right\" />\n                    <Tooltip \n                      labelFormatter={(time) => new Date(time).toLocaleString()}\n                    />\n                    <Bar yAxisId=\"left\" dataKey=\"serverResponseTime\" fill=\"#8884d8\" name=\"Server Response Time (ms)\" />\n                    <Line yAxisId=\"right\" type=\"monotone\" dataKey=\"cacheHitRate\" stroke=\"#82ca9d\" name=\"Cache Hit Rate (%)\" />\n                  </ComposedChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Business Impact Analysis</CardTitle>\n                <CardDescription>Revenue and conversion metrics</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-green-600\">\n                        ${sessions.reduce((sum, s) => sum + s.businessMetrics.revenueGenerated, 0).toFixed(0)}\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">Total Revenue</p>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold\">\n                        {sessions.reduce((sum, s) => sum + s.businessMetrics.conversionEvents, 0)}\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">Conversions</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span>Newsletter Signups</span>\n                      <span>{sessions.filter(s => s.businessMetrics.goalCompletions.includes('newsletter_signup')).length}</span>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span>Demo Requests</span>\n                      <span>{sessions.filter(s => s.businessMetrics.goalCompletions.includes('demo_request')).length}</span>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default RealUserMonitoring;\n","usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/RequireAuth.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/SecurityAnalytics.tsx","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":211,"column":19,"nodeType":"MemberExpression","endLine":216,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState, useMemo } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Progress } from '@/components/ui/progress';\nimport { \n  LineChart, \n  Line, \n  AreaChart, \n  Area, \n  BarChart, \n  Bar, \n  XAxis, \n  YAxis, \n  CartesianGrid, \n  Tooltip, \n  ResponsiveContainer,\n  PieChart,\n  Pie,\n  Cell\n} from 'recharts';\nimport { \n  TrendingUp, \n  TrendingDown, \n  Shield, \n  AlertTriangle, \n  Eye,\n  Clock,\n  Globe,\n  Lock,\n  Activity,\n  Users,\n  Server,\n  Database\n} from 'lucide-react';\n\ninterface SecurityMetric {\n  timestamp: Date;\n  threatsBlocked: number;\n  authAttempts: number;\n  authFailures: number;\n  apiCalls: number;\n  suspiciousActivity: number;\n  vulnerabilityScans: number;\n}\n\ninterface GeographicData {\n  country: string;\n  threats: number;\n  color: string;\n}\n\ninterface ThreatTypeData {\n  type: string;\n  count: number;\n  percentage: number;\n  color: string;\n}\n\ninterface ComplianceStatus {\n  framework: string;\n  score: number;\n  status: 'compliant' | 'partial' | 'non-compliant';\n  lastAudit: Date;\n  nextAudit: Date;\n}\n\nconst SecurityAnalytics: React.FC = () => {\n  const [timeRange, setTimeRange] = useState<'1h' | '24h' | '7d' | '30d'>('24h');\n  const [securityMetrics, setSecurityMetrics] = useState<SecurityMetric[]>([]);\n  const [geographicData, setGeographicData] = useState<GeographicData[]>([]);\n  const [threatTypeData, setThreatTypeData] = useState<ThreatTypeData[]>([]);\n  const [complianceStatus, setComplianceStatus] = useState<ComplianceStatus[]>([]);\n  const [realTimeStats, setRealTimeStats] = useState({\n    activeConnections: 0,\n    requestsPerSecond: 0,\n    blockedRequests: 0,\n    responseTime: 0\n  });\n\n  // Generate mock time series data\n  const generateTimeSeriesData = (hours: number): SecurityMetric[] => {\n    const data: SecurityMetric[] = [];\n    const now = new Date();\n    \n    for (let i = hours; i >= 0; i--) {\n      const timestamp = new Date(now.getTime() - i * 60 * 60 * 1000);\n      data.push({\n        timestamp,\n        threatsBlocked: Math.floor(Math.random() * 50) + 10,\n        authAttempts: Math.floor(Math.random() * 200) + 100,\n        authFailures: Math.floor(Math.random() * 20) + 5,\n        apiCalls: Math.floor(Math.random() * 1000) + 500,\n        suspiciousActivity: Math.floor(Math.random() * 30) + 5,\n        vulnerabilityScans: Math.floor(Math.random() * 10) + 2\n      });\n    }\n    \n    return data;\n  };\n\n  // Generate geographic threat data\n  const generateGeographicData = (): GeographicData[] => {\n    const countries = [\n      { country: 'United States', color: '#8884d8' },\n      { country: 'China', color: '#82ca9d' },\n      { country: 'Russia', color: '#ffc658' },\n      { country: 'Germany', color: '#ff7300' },\n      { country: 'Brazil', color: '#8dd1e1' },\n      { country: 'India', color: '#d084d0' }\n    ];\n    \n    return countries.map(country => ({\n      ...country,\n      threats: Math.floor(Math.random() * 100) + 20\n    }));\n  };\n\n  // Generate threat type distribution\n  const generateThreatTypeData = (): ThreatTypeData[] => {\n    const types = [\n      { type: 'Brute Force', color: '#8884d8' },\n      { type: 'SQL Injection', color: '#82ca9d' },\n      { type: 'XSS', color: '#ffc658' },\n      { type: 'DDoS', color: '#ff7300' },\n      { type: 'Malware', color: '#8dd1e1' },\n      { type: 'Phishing', color: '#d084d0' }\n    ];\n    \n    const counts = types.map(type => ({\n      ...type,\n      count: Math.floor(Math.random() * 50) + 10\n    }));\n    \n    const total = counts.reduce((sum, item) => sum + item.count, 0);\n    \n    return counts.map(item => ({\n      ...item,\n      percentage: Math.round((item.count / total) * 100)\n    }));\n  };\n\n  // Generate compliance status\n  const generateComplianceData = (): ComplianceStatus[] => {\n    const frameworks = [\n      { framework: 'SOC 2 Type II', score: 95 },\n      { framework: 'ISO 27001', score: 88 },\n      { framework: 'GDPR', score: 92 },\n      { framework: 'HIPAA', score: 85 },\n      { framework: 'PCI DSS', score: 90 }\n    ];\n    \n    return frameworks.map(f => ({\n      ...f,\n      status: f.score >= 90 ? 'compliant' : f.score >= 70 ? 'partial' : 'non-compliant' as any,\n      lastAudit: new Date(Date.now() - Math.random() * 90 * 24 * 60 * 60 * 1000),\n      nextAudit: new Date(Date.now() + Math.random() * 90 * 24 * 60 * 60 * 1000)\n    }));\n  };\n\n  // Calculate summary statistics\n  const summaryStats = useMemo(() => {\n    if (securityMetrics.length === 0) return null;\n    \n    const latest = securityMetrics[securityMetrics.length - 1];\n    const previous = securityMetrics[securityMetrics.length - 2];\n    \n    const calculateTrend = (current: number, prev: number) => {\n      if (!prev) return 0;\n      return ((current - prev) / prev) * 100;\n    };\n    \n    return {\n      threatsBlocked: {\n        value: latest.threatsBlocked,\n        trend: calculateTrend(latest.threatsBlocked, previous?.threatsBlocked || 0)\n      },\n      authFailures: {\n        value: latest.authFailures,\n        trend: calculateTrend(latest.authFailures, previous?.authFailures || 0)\n      },\n      apiCalls: {\n        value: latest.apiCalls,\n        trend: calculateTrend(latest.apiCalls, previous?.apiCalls || 0)\n      },\n      suspiciousActivity: {\n        value: latest.suspiciousActivity,\n        trend: calculateTrend(latest.suspiciousActivity, previous?.suspiciousActivity || 0)\n      }\n    };\n  }, [securityMetrics]);\n\n  // Update real-time stats\n  useEffect(() => {\n    const updateRealTimeStats = () => {\n      setRealTimeStats({\n        activeConnections: Math.floor(Math.random() * 1000) + 500,\n        requestsPerSecond: Math.floor(Math.random() * 100) + 50,\n        blockedRequests: Math.floor(Math.random() * 20) + 5,\n        responseTime: Math.floor(Math.random() * 100) + 50\n      });\n    };\n\n    updateRealTimeStats();\n    const interval = setInterval(updateRealTimeStats, 5000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Load data based on time range\n  useEffect(() => {\n    const hours = {\n      '1h': 1,\n      '24h': 24,\n      '7d': 24 * 7,\n      '30d': 24 * 30\n    }[timeRange];\n    \n    setSecurityMetrics(generateTimeSeriesData(hours));\n    setGeographicData(generateGeographicData());\n    setThreatTypeData(generateThreatTypeData());\n    setComplianceStatus(generateComplianceData());\n  }, [timeRange]);\n\n  const getTrendIcon = (trend: number) => {\n    if (trend > 0) return <TrendingUp className=\"h-4 w-4 text-red-600\" />;\n    if (trend < 0) return <TrendingDown className=\"h-4 w-4 text-green-600\" />;\n    return <Activity className=\"h-4 w-4 text-gray-400\" />;\n  };\n\n  const getComplianceStatusColor = (status: string) => {\n    switch (status) {\n      case 'compliant': return 'bg-green-100 text-green-800';\n      case 'partial': return 'bg-yellow-100 text-yellow-800';\n      case 'non-compliant': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Time Range Selector */}\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-2xl font-bold\">Security Analytics Dashboard</h2>\n        <div className=\"flex space-x-2\">\n          {(['1h', '24h', '7d', '30d'] as const).map((range) => (\n            <Button\n              key={range}\n              onClick={() => setTimeRange(range)}\n              variant={timeRange === range ? \"default\" : \"outline\"}\n              size=\"sm\"\n            >\n              {range}\n            </Button>\n          ))}\n        </div>\n      </div>\n\n      {/* Real-time Stats */}\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Connections</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{realTimeStats.activeConnections}</div>\n            <p className=\"text-xs text-muted-foreground\">Live connections</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Requests/sec</CardTitle>\n            <Activity className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{realTimeStats.requestsPerSecond}</div>\n            <p className=\"text-xs text-muted-foreground\">Current load</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Blocked Requests</CardTitle>\n            <Shield className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-red-600\">{realTimeStats.blockedRequests}</div>\n            <p className=\"text-xs text-muted-foreground\">Last minute</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Response Time</CardTitle>\n            <Clock className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{realTimeStats.responseTime}ms</div>\n            <p className=\"text-xs text-muted-foreground\">Average</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Trend Summary */}\n      {summaryStats && (\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n          {Object.entries(summaryStats).map(([key, stat]) => (\n            <Card key={key}>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium capitalize\">\n                  {key.replace(/([A-Z])/g, ' $1')}\n                </CardTitle>\n                {getTrendIcon(stat.trend)}\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{stat.value}</div>\n                <p className={`text-xs ${stat.trend > 0 ? 'text-red-600' : stat.trend < 0 ? 'text-green-600' : 'text-gray-500'}`}>\n                  {stat.trend > 0 ? '+' : ''}{stat.trend.toFixed(1)}% from last period\n                </p>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Charts Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Threats Over Time */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Threats Blocked Over Time</CardTitle>\n            <CardDescription>Security incidents prevented by our systems</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <LineChart data={securityMetrics}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis \n                  dataKey=\"timestamp\" \n                  tickFormatter={(time) => new Date(time).toLocaleTimeString()}\n                />\n                <YAxis />\n                <Tooltip \n                  labelFormatter={(time) => new Date(time).toLocaleString()}\n                />\n                <Line \n                  type=\"monotone\" \n                  dataKey=\"threatsBlocked\" \n                  stroke=\"#8884d8\" \n                  strokeWidth={2}\n                  name=\"Threats Blocked\"\n                />\n              </LineChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        {/* Authentication Metrics */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Authentication Activity</CardTitle>\n            <CardDescription>Login attempts and failure rates</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <AreaChart data={securityMetrics}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis \n                  dataKey=\"timestamp\" \n                  tickFormatter={(time) => new Date(time).toLocaleTimeString()}\n                />\n                <YAxis />\n                <Tooltip \n                  labelFormatter={(time) => new Date(time).toLocaleString()}\n                />\n                <Area \n                  type=\"monotone\" \n                  dataKey=\"authAttempts\" \n                  stackId=\"1\"\n                  stroke=\"#82ca9d\" \n                  fill=\"#82ca9d\"\n                  name=\"Auth Attempts\"\n                />\n                <Area \n                  type=\"monotone\" \n                  dataKey=\"authFailures\" \n                  stackId=\"1\"\n                  stroke=\"#ff7300\" \n                  fill=\"#ff7300\"\n                  name=\"Auth Failures\"\n                />\n              </AreaChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        {/* Geographic Threat Distribution */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Geographic Threat Sources</CardTitle>\n            <CardDescription>Threat origins by country</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <BarChart data={geographicData}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"country\" />\n                <YAxis />\n                <Tooltip />\n                <Bar dataKey=\"threats\" fill=\"#8884d8\" />\n              </BarChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        {/* Threat Type Distribution */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Threat Type Distribution</CardTitle>\n            <CardDescription>Breakdown of detected threat categories</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <PieChart>\n                <Pie\n                  data={threatTypeData}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  outerRadius={80}\n                  fill=\"#8884d8\"\n                  dataKey=\"count\"\n                  label={({ type, percentage }) => `${type}: ${percentage}%`}\n                >\n                  {threatTypeData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={entry.color} />\n                  ))}\n                </Pie>\n                <Tooltip />\n              </PieChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Compliance Status */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Compliance Framework Status</CardTitle>\n          <CardDescription>\n            Current compliance scores across security frameworks\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {complianceStatus.map((compliance) => (\n              <div key={compliance.framework} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                <div className=\"space-y-1\">\n                  <div className=\"flex items-center space-x-2\">\n                    <h4 className=\"font-medium\">{compliance.framework}</h4>\n                    <Badge className={getComplianceStatusColor(compliance.status)}>\n                      {compliance.status.replace('-', ' ').toUpperCase()}\n                    </Badge>\n                  </div>\n                  <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                    <span>Last Audit: {compliance.lastAudit.toLocaleDateString()}</span>\n                    <span>Next Audit: {compliance.nextAudit.toLocaleDateString()}</span>\n                  </div>\n                </div>\n                <div className=\"text-right space-y-2\">\n                  <div className=\"text-2xl font-bold\">{compliance.score}%</div>\n                  <Progress value={compliance.score} className=\"w-24\" />\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* API Security Metrics */}\n      <Card>\n        <CardHeader>\n          <CardTitle>API Security Metrics</CardTitle>\n          <CardDescription>API endpoint security and usage analytics</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <AreaChart data={securityMetrics}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis \n                dataKey=\"timestamp\" \n                tickFormatter={(time) => new Date(time).toLocaleTimeString()}\n              />\n              <YAxis />\n              <Tooltip \n                labelFormatter={(time) => new Date(time).toLocaleString()}\n              />\n              <Area \n                type=\"monotone\" \n                dataKey=\"apiCalls\" \n                stroke=\"#8884d8\" \n                fill=\"#8884d8\"\n                fillOpacity={0.6}\n                name=\"API Calls\"\n              />\n              <Area \n                type=\"monotone\" \n                dataKey=\"suspiciousActivity\" \n                stroke=\"#ff7300\" \n                fill=\"#ff7300\"\n                fillOpacity={0.8}\n                name=\"Suspicious Activity\"\n              />\n            </AreaChart>\n          </ResponsiveContainer>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default SecurityAnalytics;\n","usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/SecurityMetrics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/SecurityMonitor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ThreatDetection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ToolSelection.tsx","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":159,"column":24,"nodeType":"MemberExpression","endLine":159,"endColumn":56}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { CheckCircle, AlertTriangle, Star, GitBranch, Shield, Container, Key, Zap } from 'lucide-react';\n\nconst ToolSelection = () => {\n  const [selectedCategory, setSelectedCategory] = useState('sast');\n\n  const toolCategories = {\n    sast: {\n      title: 'Static Application Security Testing (SAST)',\n      icon: <Shield className=\"h-5 w-5\" />,\n      tools: [\n        {\n          name: 'SonarQube',\n          type: 'Commercial/OSS',\n          score: 9.2,\n          pros: ['Comprehensive rule sets', 'IDE integration', 'Quality gates'],\n          cons: ['Resource intensive', 'Complex setup'],\n          integration: 'Excellent',\n          falsePositiveRate: 'Low',\n          recommended: true\n        },\n        {\n          name: 'Semgrep',\n          type: 'Open Source',\n          score: 8.8,\n          pros: ['Fast execution', 'Custom rules', 'Multi-language'],\n          cons: ['Newer ecosystem', 'Limited enterprise features'],\n          integration: 'Good',\n          falsePositiveRate: 'Medium',\n          recommended: true\n        },\n        {\n          name: 'Checkmarx',\n          type: 'Commercial',\n          score: 8.5,\n          pros: ['Enterprise features', 'Deep analysis', 'Compliance reporting'],\n          cons: ['Expensive', 'Slow scans'],\n          integration: 'Good',\n          falsePositiveRate: 'Low',\n          recommended: false\n        }\n      ]\n    },\n    sca: {\n      title: 'Software Composition Analysis (SCA)',\n      icon: <GitBranch className=\"h-5 w-5\" />,\n      tools: [\n        {\n          name: 'Snyk',\n          type: 'Commercial/OSS',\n          score: 9.5,\n          pros: ['Excellent vulnerability DB', 'Auto-remediation', 'Developer-friendly'],\n          cons: ['Pricing model', 'API rate limits'],\n          integration: 'Excellent',\n          falsePositiveRate: 'Very Low',\n          recommended: true\n        },\n        {\n          name: 'Dependabot',\n          type: 'Free (GitHub)',\n          score: 8.0,\n          pros: ['GitHub native', 'Automatic PRs', 'Zero setup'],\n          cons: ['GitHub only', 'Limited customization'],\n          integration: 'Perfect',\n          falsePositiveRate: 'Low',\n          recommended: true\n        },\n        {\n          name: 'OWASP Dependency-Check',\n          type: 'Open Source',\n          score: 7.5,\n          pros: ['Free', 'Multi-format support', 'CLI friendly'],\n          cons: ['Manual updates', 'Limited remediation'],\n          integration: 'Good',\n          falsePositiveRate: 'Medium',\n          recommended: false\n        }\n      ]\n    },\n    container: {\n      title: 'Container Image Scanning',\n      icon: <Container className=\"h-5 w-5\" />,\n      tools: [\n        {\n          name: 'Trivy',\n          type: 'Open Source',\n          score: 9.0,\n          pros: ['Fast scanning', 'Multiple formats', 'Easy integration'],\n          cons: ['Limited reporting', 'Basic remediation'],\n          integration: 'Excellent',\n          falsePositiveRate: 'Low',\n          recommended: true\n        },\n        {\n          name: 'Aqua Security',\n          type: 'Commercial',\n          score: 8.8,\n          pros: ['Runtime protection', 'Policy engine', 'Compliance'],\n          cons: ['Complex setup', 'Expensive'],\n          integration: 'Good',\n          falsePositiveRate: 'Very Low',\n          recommended: false\n        },\n        {\n          name: 'Clair',\n          type: 'Open Source',\n          score: 7.8,\n          pros: ['API-first', 'Registry integration', 'Scalable'],\n          cons: ['Complex setup', 'Limited UI'],\n          integration: 'Medium',\n          falsePositiveRate: 'Medium',\n          recommended: false\n        }\n      ]\n    },\n    secrets: {\n      title: 'Secrets Management',\n      icon: <Key className=\"h-5 w-5\" />,\n      tools: [\n        {\n          name: 'HashiCorp Vault',\n          type: 'Open Source/Commercial',\n          score: 9.5,\n          pros: ['Industry standard', 'Flexible', 'Strong encryption'],\n          cons: ['Complex setup', 'Learning curve'],\n          integration: 'Excellent',\n          falsePositiveRate: 'N/A',\n          recommended: true\n        },\n        {\n          name: 'AWS Secrets Manager',\n          type: 'Cloud Service',\n          score: 8.5,\n          pros: ['Managed service', 'Auto rotation', 'AWS integration'],\n          cons: ['Vendor lock-in', 'Cost'],\n          integration: 'Good',\n          falsePositiveRate: 'N/A',\n          recommended: true\n        },\n        {\n          name: 'GitHub Secrets',\n          type: 'Platform Feature',\n          score: 7.5,\n          pros: ['Native integration', 'Simple setup', 'Free'],\n          cons: ['Limited scope', 'GitHub only'],\n          integration: 'Perfect',\n          falsePositiveRate: 'N/A',\n          recommended: false\n        }\n      ]\n    }\n  };\n\n  const currentTools = toolCategories[selectedCategory].tools;\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center space-x-2\">\n        <Zap className=\"h-6 w-6 text-primary\" />\n        <h2 className=\"text-2xl font-bold\">DevSecOps Tool Selection Matrix</h2>\n      </div>\n\n      <Tabs value={selectedCategory} onValueChange={setSelectedCategory}>\n        <TabsList className=\"grid grid-cols-4 w-full\">\n          {Object.entries(toolCategories).map(([key, category]) => (\n            <TabsTrigger key={key} value={key} className=\"flex items-center space-x-2\">\n              {category.icon}\n              <span className=\"hidden sm:inline\">{key.toUpperCase()}</span>\n            </TabsTrigger>\n          ))}\n        </TabsList>\n\n        {Object.entries(toolCategories).map(([key, category]) => (\n          <TabsContent key={key} value={key}>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center space-x-2 mb-4\">\n                {category.icon}\n                <h3 className=\"text-xl font-semibold\">{category.title}</h3>\n              </div>\n              \n              <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n                {category.tools.map((tool, index) => (\n                  <Card key={index} className={`relative ${tool.recommended ? 'ring-2 ring-primary' : ''}`}>\n                    {tool.recommended && (\n                      <Badge className=\"absolute -top-2 -right-2 bg-primary\">\n                        <Star className=\"h-3 w-3 mr-1\" />\n                        Recommended\n                      </Badge>\n                    )}\n                    <CardHeader className=\"pb-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <CardTitle className=\"text-lg\">{tool.name}</CardTitle>\n                        <Badge variant=\"outline\">{tool.type}</Badge>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"flex items-center\">\n                          {[...Array(5)].map((_, i) => (\n                            <Star\n                              key={i}\n                              className={`h-4 w-4 ${\n                                i < Math.floor(tool.score / 2) ? 'text-yellow-400 fill-current' : 'text-gray-300'\n                              }`}\n                            />\n                          ))}\n                        </div>\n                        <span className=\"text-sm font-medium\">{tool.score}/10</span>\n                      </div>\n                    </CardHeader>\n                    <CardContent className=\"space-y-3\">\n                      <div>\n                        <h4 className=\"text-sm font-medium text-green-600 mb-1\">Pros:</h4>\n                        <ul className=\"text-xs space-y-1\">\n                          {tool.pros.map((pro, i) => (\n                            <li key={i} className=\"flex items-center space-x-1\">\n                              <CheckCircle className=\"h-3 w-3 text-green-500\" />\n                              <span>{pro}</span>\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n                      \n                      <div>\n                        <h4 className=\"text-sm font-medium text-orange-600 mb-1\">Cons:</h4>\n                        <ul className=\"text-xs space-y-1\">\n                          {tool.cons.map((con, i) => (\n                            <li key={i} className=\"flex items-center space-x-1\">\n                              <AlertTriangle className=\"h-3 w-3 text-orange-500\" />\n                              <span>{con}</span>\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n                      \n                      <div className=\"grid grid-cols-2 gap-2 text-xs\">\n                        <div>\n                          <span className=\"font-medium\">Integration:</span>\n                          <Badge variant=\"secondary\" className=\"ml-1 text-xs\">\n                            {tool.integration}\n                          </Badge>\n                        </div>\n                        {tool.falsePositiveRate !== 'N/A' && (\n                          <div>\n                            <span className=\"font-medium\">False Positives:</span>\n                            <Badge variant=\"secondary\" className=\"ml-1 text-xs\">\n                              {tool.falsePositiveRate}\n                            </Badge>\n                          </div>\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </div>\n          </TabsContent>\n        ))}\n      </Tabs>\n\n      <Card className=\"mt-8\">\n        <CardHeader>\n          <CardTitle>Recommended Toolchain</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n            <div className=\"text-center p-4 border rounded-lg\">\n              <Shield className=\"h-8 w-8 mx-auto mb-2 text-primary\" />\n              <h4 className=\"font-semibold\">SAST</h4>\n              <p className=\"text-sm text-muted-foreground\">SonarQube + Semgrep</p>\n            </div>\n            <div className=\"text-center p-4 border rounded-lg\">\n              <GitBranch className=\"h-8 w-8 mx-auto mb-2 text-primary\" />\n              <h4 className=\"font-semibold\">SCA</h4>\n              <p className=\"text-sm text-muted-foreground\">Snyk + Dependabot</p>\n            </div>\n            <div className=\"text-center p-4 border rounded-lg\">\n              <Container className=\"h-8 w-8 mx-auto mb-2 text-primary\" />\n              <h4 className=\"font-semibold\">Container</h4>\n              <p className=\"text-sm text-muted-foreground\">Trivy</p>\n            </div>\n            <div className=\"text-center p-4 border rounded-lg\">\n              <Key className=\"h-8 w-8 mx-auto mb-2 text-primary\" />\n              <h4 className=\"font-semibold\">Secrets</h4>\n              <p className=\"text-sm text-muted-foreground\">HashiCorp Vault</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default ToolSelection;\n","usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/UserPersonas.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/VulnerabilityDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/VulnerabilityDetailsModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/__tests__/SecurityMetrics.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/project-timeline/AutomatedRemediationCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/project-timeline/ContinuousImprovementCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/project-timeline/DocumentationCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/project-timeline/FeedbackLoopCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/project-timeline/LongTermSupportCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/project-timeline/PhaseFiveDeploymentCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/project-timeline/PolicyAsCodeCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/project-timeline/RemediationPOCCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/project-timeline/SecretsManagementCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/project-timeline/SecureCodingStandardsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/project-timeline/SecurityTestCasesCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/project-timeline/SuccessMetricsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/project-timeline/TestReportExampleCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/project-timeline/TestingStrategyCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/project-timeline/TimelinePhases.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/project-timeline/VulnReportInfoCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/project-timeline/VulnerabilityManagementCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ui/accordion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ui/alert-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ui/alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ui/aspect-ratio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ui/avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ui/badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ui/breadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ui/button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ui/calendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ui/card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ui/carousel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ui/chart.tsx","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":352,"column":7,"nodeType":"MemberExpression","endLine":352,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([_, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ui/checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ui/collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ui/command.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ui/context-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ui/dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ui/drawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ui/dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ui/form.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ui/hover-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ui/input-otp.tsx","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":36,"column":44,"nodeType":"MemberExpression","endLine":36,"endColumn":72}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ui/input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ui/label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ui/menubar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ui/navigation-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ui/pagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ui/popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ui/progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ui/radio-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ui/resizable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ui/scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ui/select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ui/separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ui/sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ui/sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ui/skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ui/slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ui/sonner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ui/switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ui/table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ui/tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ui/textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ui/toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ui/toaster.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ui/toggle-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ui/toggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ui/tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/components/ui/use-toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/hooks/use-mobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/hooks/use-toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/hooks/useComplianceData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/hooks/usePWA.ts","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":306,"column":12,"nodeType":"MemberExpression","endLine":306,"endColumn":33}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\n\ninterface PWAState {\n  isInstallable: boolean;\n  isInstalled: boolean;\n  isOffline: boolean;\n  isUpdateAvailable: boolean;\n  installPrompt: any;\n  swRegistration: ServiceWorkerRegistration | null;\n}\n\ninterface OfflineAction {\n  id: string;\n  type: 'security-scan' | 'vulnerability-report' | 'performance-metrics' | 'error-report';\n  data: any;\n  timestamp: number;\n  retryCount: number;\n}\n\ninterface PWACapabilities {\n  canInstall: boolean;\n  canReceiveNotifications: boolean;\n  canUseBackgroundSync: boolean;\n  canUsePeriodicBackgroundSync: boolean;\n  canShareFiles: boolean;\n  hasServiceWorker: boolean;\n}\n\nexport const usePWA = () => {\n  const [pwaState, setPwaState] = useState<PWAState>({\n    isInstallable: false,\n    isInstalled: false,\n    isOffline: !navigator.onLine,\n    isUpdateAvailable: false,\n    installPrompt: null,\n    swRegistration: null\n  });\n\n  const [offlineActions, setOfflineActions] = useState<OfflineAction[]>([]);\n  const [capabilities, setCapabilities] = useState<PWACapabilities>({\n    canInstall: false,\n    canReceiveNotifications: false,\n    canUseBackgroundSync: false,\n    canUsePeriodicBackgroundSync: false,\n    canShareFiles: false,\n    hasServiceWorker: 'serviceWorker' in navigator\n  });\n\n  // Initialize PWA features\n  useEffect(() => {\n    const initializePWA = async () => {\n      try {\n        // Register service worker\n        if ('serviceWorker' in navigator) {\n          const registration = await navigator.serviceWorker.register('/sw.js', {\n            scope: '/',\n            updateViaCache: 'none'\n          });\n\n          console.log('Service Worker registered successfully:', registration);\n          \n          setPwaState(prev => ({\n            ...prev,\n            swRegistration: registration\n          }));\n\n          // Check for updates\n          registration.addEventListener('updatefound', () => {\n            const newWorker = registration.installing;\n            if (newWorker) {\n              newWorker.addEventListener('statechange', () => {\n                if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\n                  setPwaState(prev => ({\n                    ...prev,\n                    isUpdateAvailable: true\n                  }));\n                }\n              });\n            }\n          });\n\n          // Listen for service worker messages\n          navigator.serviceWorker.addEventListener('message', (event) => {\n            console.log('Message from service worker:', event.data);\n            \n            if (event.data.type === 'OFFLINE_ACTION_QUEUED') {\n              addOfflineAction(event.data.action);\n            }\n            \n            if (event.data.type === 'SYNC_COMPLETED') {\n              removeOfflineAction(event.data.actionId);\n            }\n          });\n        }\n\n        // Check if app is installed\n        const isInstalled = window.matchMedia('(display-mode: standalone)').matches ||\n                           window.matchMedia('(display-mode: fullscreen)').matches ||\n                           (window.navigator as any).standalone === true;\n\n        setPwaState(prev => ({\n          ...prev,\n          isInstalled\n        }));\n\n        // Detect capabilities\n        const newCapabilities: PWACapabilities = {\n          canInstall: 'beforeinstallprompt' in window,\n          canReceiveNotifications: 'Notification' in window && 'serviceWorker' in navigator,\n          canUseBackgroundSync: 'serviceWorker' in navigator && 'sync' in window.ServiceWorkerRegistration.prototype,\n          canUsePeriodicBackgroundSync: 'serviceWorker' in navigator && 'periodicSync' in window.ServiceWorkerRegistration.prototype,\n          canShareFiles: 'share' in navigator && 'canShare' in navigator,\n          hasServiceWorker: 'serviceWorker' in navigator\n        };\n\n        setCapabilities(newCapabilities);\n\n      } catch (error) {\n        console.error('PWA initialization failed:', error);\n      }\n    };\n\n    initializePWA();\n\n    // Listen for network status changes\n    const handleOnline = () => {\n      setPwaState(prev => ({ ...prev, isOffline: false }));\n      // Trigger sync when coming back online\n      if ('serviceWorker' in navigator && navigator.serviceWorker.controller) {\n        navigator.serviceWorker.controller.postMessage({\n          type: 'TRIGGER_SYNC'\n        });\n      }\n    };\n\n    const handleOffline = () => {\n      setPwaState(prev => ({ ...prev, isOffline: true }));\n    };\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    // Listen for install prompt\n    const handleBeforeInstallPrompt = (event: Event) => {\n      event.preventDefault();\n      setPwaState(prev => ({\n        ...prev,\n        isInstallable: true,\n        installPrompt: event\n      }));\n    };\n\n    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n\n    // Listen for app install\n    const handleAppInstalled = () => {\n      setPwaState(prev => ({\n        ...prev,\n        isInstalled: true,\n        isInstallable: false,\n        installPrompt: null\n      }));\n    };\n\n    window.addEventListener('appinstalled', handleAppInstalled);\n\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n      window.removeEventListener('appinstalled', handleAppInstalled);\n    };\n  }, []);\n\n  // Install PWA\n  const installPWA = useCallback(async () => {\n    if (!pwaState.installPrompt) {\n      return false;\n    }\n\n    try {\n      pwaState.installPrompt.prompt();\n      const result = await pwaState.installPrompt.userChoice;\n      \n      if (result.outcome === 'accepted') {\n        console.log('PWA installation accepted');\n        setPwaState(prev => ({\n          ...prev,\n          isInstallable: false,\n          installPrompt: null\n        }));\n        return true;\n      } else {\n        console.log('PWA installation declined');\n        return false;\n      }\n    } catch (error) {\n      console.error('PWA installation failed:', error);\n      return false;\n    }\n  }, [pwaState.installPrompt]);\n\n  // Update PWA\n  const updatePWA = useCallback(async () => {\n    if (!pwaState.swRegistration) {\n      return false;\n    }\n\n    try {\n      // Send skip waiting message to service worker\n      if (pwaState.swRegistration.waiting) {\n        pwaState.swRegistration.waiting.postMessage({ type: 'SKIP_WAITING' });\n        \n        // Wait for the new service worker to take control\n        await new Promise<void>((resolve) => {\n          navigator.serviceWorker.addEventListener('controllerchange', () => {\n            resolve();\n          }, { once: true });\n        });\n\n        // Reload the page\n        window.location.reload();\n        return true;\n      }\n      \n      return false;\n    } catch (error) {\n      console.error('PWA update failed:', error);\n      return false;\n    }\n  }, [pwaState.swRegistration]);\n\n  // Request notification permission\n  const requestNotificationPermission = useCallback(async () => {\n    if (!('Notification' in window)) {\n      return 'not-supported';\n    }\n\n    try {\n      const permission = await Notification.requestPermission();\n      return permission;\n    } catch (error) {\n      console.error('Notification permission request failed:', error);\n      return 'denied';\n    }\n  }, []);\n\n  // Subscribe to push notifications\n  const subscribeToPushNotifications = useCallback(async () => {\n    if (!pwaState.swRegistration || !('PushManager' in window)) {\n      return null;\n    }\n\n    try {\n      const subscription = await pwaState.swRegistration.pushManager.subscribe({\n        userVisibleOnly: true,\n        applicationServerKey: process.env.VITE_VAPID_PUBLIC_KEY // You'll need to add this\n      });\n\n      console.log('Push subscription successful:', subscription);\n      return subscription;\n    } catch (error) {\n      console.error('Push subscription failed:', error);\n      return null;\n    }\n  }, [pwaState.swRegistration]);\n\n  // Add offline action\n  const addOfflineAction = useCallback((action: Omit<OfflineAction, 'id' | 'timestamp' | 'retryCount'>) => {\n    const newAction: OfflineAction = {\n      ...action,\n      id: `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      timestamp: Date.now(),\n      retryCount: 0\n    };\n\n    setOfflineActions(prev => [...prev, newAction]);\n    \n    // Store in IndexedDB via service worker\n    if ('serviceWorker' in navigator && navigator.serviceWorker.controller) {\n      navigator.serviceWorker.controller.postMessage({\n        type: 'QUEUE_OFFLINE_ACTION',\n        action: newAction\n      });\n    }\n  }, []);\n\n  // Remove offline action\n  const removeOfflineAction = useCallback((actionId: string) => {\n    setOfflineActions(prev => prev.filter(action => action.id !== actionId));\n  }, []);\n\n  // Clear all offline actions\n  const clearOfflineActions = useCallback(() => {\n    setOfflineActions([]);\n    \n    if ('serviceWorker' in navigator && navigator.serviceWorker.controller) {\n      navigator.serviceWorker.controller.postMessage({\n        type: 'CLEAR_OFFLINE_ACTIONS'\n      });\n    }\n  }, []);\n\n  // Check if feature is supported\n  const isFeatureSupported = useCallback((feature: keyof PWACapabilities) => {\n    return capabilities[feature];\n  }, [capabilities]);\n\n  // Share content\n  const shareContent = useCallback(async (shareData: ShareData) => {\n    if (!('share' in navigator)) {\n      return false;\n    }\n\n    try {\n      await navigator.share(shareData);\n      return true;\n    } catch (error) {\n      console.error('Share failed:', error);\n      return false;\n    }\n  }, []);\n\n  // Get app info\n  const getAppInfo = useCallback(async () => {\n    const info = {\n      name: 'SecureFlow Automaton',\n      version: '1.0.0',\n      isInstalled: pwaState.isInstalled,\n      isOffline: pwaState.isOffline,\n      serviceWorkerState: pwaState.swRegistration?.active?.state || 'not-registered',\n      cacheSize: 0,\n      offlineActionsCount: offlineActions.length\n    };\n\n    // Get cache size if possible\n    if ('storage' in navigator && 'estimate' in navigator.storage) {\n      try {\n        const estimate = await navigator.storage.estimate();\n        info.cacheSize = estimate.usage || 0;\n      } catch (error) {\n        console.error('Storage estimate failed:', error);\n      }\n    }\n\n    return info;\n  }, [pwaState, offlineActions]);\n\n  // Performance monitoring\n  const measurePerformance = useCallback((name: string, fn: () => Promise<any>) => {\n    return async (...args: any[]) => {\n      const startTime = performance.now();\n      \n      try {\n        const result = await fn.apply(null, args);\n        const endTime = performance.now();\n        const duration = endTime - startTime;\n        \n        // Send performance data to service worker\n        if ('serviceWorker' in navigator && navigator.serviceWorker.controller) {\n          navigator.serviceWorker.controller.postMessage({\n            type: 'PERFORMANCE_MEASURE',\n            name,\n            duration,\n            timestamp: Date.now()\n          });\n        }\n        \n        return result;\n      } catch (error) {\n        const endTime = performance.now();\n        const duration = endTime - startTime;\n        \n        // Log error performance\n        if ('serviceWorker' in navigator && navigator.serviceWorker.controller) {\n          navigator.serviceWorker.controller.postMessage({\n            type: 'PERFORMANCE_ERROR',\n            name,\n            duration,\n            error: error.message,\n            timestamp: Date.now()\n          });\n        }\n        \n        throw error;\n      }\n    };\n  }, []);\n\n  return {\n    // State\n    ...pwaState,\n    offlineActions,\n    capabilities,\n    \n    // Actions\n    installPWA,\n    updatePWA,\n    requestNotificationPermission,\n    subscribeToPushNotifications,\n    addOfflineAction,\n    removeOfflineAction,\n    clearOfflineActions,\n    shareContent,\n    \n    // Utilities\n    isFeatureSupported,\n    getAppInfo,\n    measurePerformance\n  };\n};\n\nexport default usePWA;\n","usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/hooks/useRealProjectStatus.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/hooks/useRealSecurityData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/hooks/useRemediationActions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/hooks/useSecurityData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/hooks/useVulnerabilityDetails.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/integrations/supabase/client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/integrations/supabase/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/lib/database-security-simple.ts","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":39,"column":9,"nodeType":"MemberExpression","endLine":39,"endColumn":32},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":41,"column":9,"nodeType":"MemberExpression","endLine":41,"endColumn":32},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":45,"column":9,"nodeType":"MemberExpression","endLine":45,"endColumn":32},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":266,"column":31,"nodeType":"MemberExpression","endLine":266,"endColumn":42},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":266,"column":55,"nodeType":"MemberExpression","endLine":266,"endColumn":66}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Security Enhancement Layer for Database Operations\n * Provides input validation, sanitization, and security logging\n */\n\nimport { SecurityLogger, sanitizeSqlInput } from './security';\n\n/**\n * Input validation and sanitization utilities\n */\nexport class SecurityValidator {\n  /**\n   * Validate and sanitize string input\n   */\n  static sanitizeString(input: string): string {\n    return sanitizeSqlInput(input);\n  }\n\n  /**\n   * Validate column name to prevent SQL injection\n   */\n  static validateColumnName(column: string): string {\n    if (!/^[a-zA-Z_][a-zA-Z0-9_]*$/.test(column)) {\n      throw new Error(`Invalid column name: ${column}`);\n    }\n    return column;\n  }\n\n  /**\n   * Validate and sanitize object data\n   */\n  static sanitizeObject(obj: Record<string, any>): Record<string, any> {\n    const sanitized: Record<string, any> = {};\n    \n    for (const [key, value] of Object.entries(obj)) {\n      const sanitizedKey = this.validateColumnName(key);\n      \n      if (typeof value === 'string') {\n        sanitized[sanitizedKey] = this.sanitizeString(value);\n      } else if (Array.isArray(value)) {\n        sanitized[sanitizedKey] = value.map(item => \n          typeof item === 'string' ? this.sanitizeString(item) : item\n        );\n      } else {\n        sanitized[sanitizedKey] = value;\n      }\n    }\n    \n    return sanitized;\n  }\n\n  /**\n   * Validate email format\n   */\n  static validateEmail(email: string): boolean {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n\n  /**\n   * Validate UUID format\n   */\n  static validateUUID(uuid: string): boolean {\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n    return uuidRegex.test(uuid);\n  }\n}\n\n/**\n * Security logging for database operations\n */\nexport class DatabaseAuditor {\n  /**\n   * Log database operation for security audit\n   */\n  static logOperation(\n    operation: 'SELECT' | 'INSERT' | 'UPDATE' | 'DELETE',\n    table: string,\n    data?: any,\n    userId?: string\n  ): void {\n    SecurityLogger.logEvent('database_operation', {\n      operation,\n      table,\n      userId,\n      timestamp: new Date().toISOString(),\n      dataFields: data ? Object.keys(data) : [],\n    });\n  }\n\n  /**\n   * Log security violation\n   */\n  static logSecurityViolation(\n    violation: string,\n    details: Record<string, any>\n  ): void {\n    SecurityLogger.logEvent('security_violation', {\n      violation,\n      details,\n      timestamp: new Date().toISOString(),\n    });\n  }\n\n  /**\n   * Log permission check\n   */\n  static logPermissionCheck(\n    operation: string,\n    resource: string,\n    userId?: string,\n    granted: boolean = true\n  ): void {\n    SecurityLogger.logEvent('permission_check', {\n      operation,\n      resource,\n      userId,\n      granted,\n      timestamp: new Date().toISOString(),\n    });\n  }\n}\n\n/**\n * Security metadata utilities\n */\nexport class SecurityMetadata {\n  /**\n   * Add security timestamps to data\n   */\n  static addTimestamps(data: Record<string, any>, isUpdate = false): Record<string, any> {\n    const timestamp = new Date().toISOString();\n    \n    if (isUpdate) {\n      return {\n        ...data,\n        updated_at: timestamp,\n      };\n    }\n    \n    return {\n      ...data,\n      created_at: timestamp,\n      updated_at: timestamp,\n    };\n  }\n\n  /**\n   * Add user context to data\n   */\n  static addUserContext(data: Record<string, any>, userId: string): Record<string, any> {\n    return {\n      ...data,\n      user_id: userId,\n    };\n  }\n\n  /**\n   * Add security classification\n   */\n  static addSecurityClassification(\n    data: Record<string, any>,\n    classification: 'public' | 'internal' | 'confidential' | 'restricted' = 'internal'\n  ): Record<string, any> {\n    return {\n      ...data,\n      security_classification: classification,\n    };\n  }\n}\n\n/**\n * Rate limiting for sensitive operations\n */\nexport class SecurityRateLimiter {\n  private static attempts: Map<string, number[]> = new Map();\n\n  /**\n   * Check if operation is allowed based on rate limiting\n   */\n  static isAllowed(\n    key: string,\n    maxAttempts: number,\n    windowMs: number\n  ): boolean {\n    const now = Date.now();\n    const windowStart = now - windowMs;\n    \n    // Get existing attempts for this key\n    const keyAttempts = this.attempts.get(key) || [];\n    \n    // Filter out attempts outside the window\n    const validAttempts = keyAttempts.filter(time => time > windowStart);\n    \n    // Check if limit exceeded\n    if (validAttempts.length >= maxAttempts) {\n      DatabaseAuditor.logSecurityViolation('rate_limit_exceeded', {\n        key,\n        attempts: validAttempts.length,\n        maxAttempts,\n        windowMs,\n      });\n      return false;\n    }\n    \n    // Add current attempt\n    validAttempts.push(now);\n    this.attempts.set(key, validAttempts);\n    \n    return true;\n  }\n\n  /**\n   * Get remaining attempts for a key\n   */\n  static getRemainingAttempts(\n    key: string,\n    maxAttempts: number,\n    windowMs: number\n  ): number {\n    const now = Date.now();\n    const windowStart = now - windowMs;\n    const keyAttempts = this.attempts.get(key) || [];\n    const validAttempts = keyAttempts.filter(time => time > windowStart);\n    \n    return Math.max(0, maxAttempts - validAttempts.length);\n  }\n}\n\n/**\n * Security checks for common operations\n */\nexport class SecurityChecks {\n  /**\n   * Check if user can access resource\n   */\n  static canAccessResource(\n    userId: string,\n    resourceOwnerId: string,\n    userRole?: string\n  ): boolean {\n    // Users can access their own resources\n    if (userId === resourceOwnerId) {\n      return true;\n    }\n    \n    // Admins can access all resources\n    if (userRole === 'admin' || userRole === 'security_admin') {\n      return true;\n    }\n    \n    return false;\n  }\n\n  /**\n   * Validate data before database operation\n   */\n  static validateForDatabase(\n    data: Record<string, any>,\n    requiredFields: string[] = []\n  ): { isValid: boolean; errors: string[] } {\n    const errors: string[] = [];\n    \n    // Check required fields\n    for (const field of requiredFields) {\n      if (!(field in data) || data[field] === null || data[field] === undefined) {\n        errors.push(`Missing required field: ${field}`);\n      }\n    }\n    \n    // Validate string fields\n    for (const [key, value] of Object.entries(data)) {\n      if (typeof value === 'string') {\n        // Check for SQL injection patterns\n        if (/['\"\\\\;]|union|select|insert|update|delete|drop|exec|script/gi.test(value)) {\n          errors.push(`Potentially malicious content in field: ${key}`);\n        }\n        \n        // Check for XSS patterns\n        if (/<script|javascript:|on\\w+\\s*=/gi.test(value)) {\n          errors.push(`Potentially malicious script content in field: ${key}`);\n        }\n      }\n    }\n    \n    return {\n      isValid: errors.length === 0,\n      errors,\n    };\n  }\n\n  /**\n   * Check if operation is safe to perform\n   */\n  static isSafeOperation(\n    operation: string,\n    table: string,\n    filters: Record<string, any> = {}\n  ): boolean {\n    // Prevent mass deletion\n    if (operation === 'DELETE' && Object.keys(filters).length === 0) {\n      DatabaseAuditor.logSecurityViolation('mass_deletion_attempt', {\n        operation,\n        table,\n      });\n      return false;\n    }\n    \n    // Prevent updating all records\n    if (operation === 'UPDATE' && Object.keys(filters).length === 0) {\n      DatabaseAuditor.logSecurityViolation('mass_update_attempt', {\n        operation,\n        table,\n      });\n      return false;\n    }\n    \n    return true;\n  }\n}\n\n/**\n * Main security wrapper for database operations\n */\nexport const DatabaseSecurity = {\n  Validator: SecurityValidator,\n  Auditor: DatabaseAuditor,\n  Metadata: SecurityMetadata,\n  RateLimiter: SecurityRateLimiter,\n  Checks: SecurityChecks,\n};\n\nexport default DatabaseSecurity;\n","usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/lib/database-security.ts","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":117,"column":7,"nodeType":"MemberExpression","endLine":117,"endColumn":30},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":333,"column":10,"nodeType":"MemberExpression","endLine":333,"endColumn":34}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Enhanced Database Security Layer\n * Implements input validation, sanitization, and security logging\n */\n\nimport { supabase } from '@/integrations/supabase/client';\nimport { SecurityLogger, sanitizeSqlInput } from './security';\n\n/**\n * Database security utilities and helpers\n */\nexport class DatabaseSecurity {\n  private static instance: DatabaseSecurity;\n  \n  private constructor() {}\n  \n  public static getInstance(): DatabaseSecurity {\n    if (!DatabaseSecurity.instance) {\n      DatabaseSecurity.instance = new DatabaseSecurity();\n    }\n    return DatabaseSecurity.instance;\n  }\n\n  /**\n   * Validate and sanitize input for database operations\n   */\n  public validateInput(input: any): any {\n    if (typeof input === 'string') {\n      return sanitizeSqlInput(input);\n    }\n    \n    if (Array.isArray(input)) {\n      return input.map(item => this.validateInput(item));\n    }\n    \n    if (typeof input === 'object' && input !== null) {\n      const sanitized: Record<string, any> = {};\n      for (const [key, value] of Object.entries(input)) {\n        sanitized[this.validateColumnName(key)] = this.validateInput(value);\n      }\n      return sanitized;\n    }\n    \n    return input;\n  }\n\n  /**\n   * Validate column name to prevent SQL injection\n   */\n  public validateColumnName(column: string): string {\n    // Allow only alphanumeric characters and underscores\n    if (!/^[a-zA-Z_][a-zA-Z0-9_]*$/.test(column)) {\n      throw new Error(`Invalid column name: ${column}`);\n    }\n    return column;\n  }\n\n  /**\n   * Log database operations for security audit\n   */\n  public logOperation(operation: string, table: string, data?: any): void {\n    SecurityLogger.logEvent('database_operation', {\n      operation,\n      table,\n      timestamp: new Date().toISOString(),\n      dataKeys: data ? Object.keys(data) : [],\n    });\n  }\n\n  /**\n   * Validate user permissions for database operation\n   */\n  public async validateUserPermissions(\n    operation: string, \n    table: string, \n    userId?: string\n  ): Promise<boolean> {\n    SecurityLogger.logEvent('permission_check', {\n      operation,\n      table,\n      userId,\n      timestamp: new Date().toISOString(),\n    });\n    \n    // Add your permission logic here\n    return true;\n  }\n\n  /**\n   * Add security metadata to insert/update operations\n   */\n  public addSecurityMetadata(data: Record<string, any>, isUpdate = false): Record<string, any> {\n    const timestamp = new Date().toISOString();\n    \n    if (isUpdate) {\n      return {\n        ...data,\n        updated_at: timestamp,\n      };\n    }\n    \n    return {\n      ...data,\n      created_at: timestamp,\n      updated_at: timestamp,\n    };\n  }\n\n  /**\n   * Sanitize filter conditions\n   */\n  public sanitizeFilters(filters: Record<string, any>): Record<string, any> {\n    const sanitized: Record<string, any> = {};\n    \n    for (const [key, value] of Object.entries(filters)) {\n      const sanitizedKey = this.validateColumnName(key);\n      sanitized[sanitizedKey] = this.validateInput(value);\n    }\n    \n    return sanitized;\n  }\n}\n\n/**\n * Secure wrapper functions for common database operations\n */\nexport const SecureDB = {\n  /**\n   * Secure select operation with validation\n   */\n  async select(\n    table: 'vulnerabilities' | 'security_scans' | 'pipeline_metrics' | 'pipeline_runs',\n    options: {\n      select?: string;\n      filters?: Record<string, any>;\n      orderBy?: { column: string; ascending?: boolean };\n      limit?: number;\n    } = {}\n  ) {\n    const db = DatabaseSecurity.getInstance();\n    \n    try {\n      // Log the operation\n      db.logOperation('SELECT', table, options.filters);\n      \n      // Build query\n      let query = supabase.from(table);\n      \n      // Add select fields if specified\n      if (options.select) {\n        query = query.select(options.select);\n      } else {\n        query = query.select('*');\n      }\n      \n      // Add filters\n      if (options.filters) {\n        const sanitizedFilters = db.sanitizeFilters(options.filters);\n        for (const [key, value] of Object.entries(sanitizedFilters)) {\n          query = query.eq(key, value);\n        }\n      }\n      \n      // Add ordering\n      if (options.orderBy) {\n        const sanitizedColumn = db.validateColumnName(options.orderBy.column);\n        query = query.order(sanitizedColumn, { ascending: options.orderBy.ascending ?? true });\n      }\n      \n      // Add limit\n      if (options.limit) {\n        query = query.limit(Math.min(options.limit, 1000)); // Max 1000 records\n      }\n      \n      return await query;\n    } catch (error) {\n      SecurityLogger.logEvent('database_error', {\n        operation: 'SELECT',\n        table,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n      throw error;\n    }\n  },\n\n  /**\n   * Secure insert operation with validation\n   */\n  async insert(\n    table: 'vulnerabilities' | 'security_scans' | 'pipeline_metrics' | 'pipeline_runs',\n    data: Record<string, any>\n  ) {\n    const db = DatabaseSecurity.getInstance();\n    \n    try {\n      // Validate and sanitize input\n      const sanitizedData = db.validateInput(data);\n      const dataWithMetadata = db.addSecurityMetadata(sanitizedData);\n      \n      // Log the operation\n      db.logOperation('INSERT', table, dataWithMetadata);\n      \n      return await supabase\n        .from(table)\n        .insert(dataWithMetadata)\n        .select()\n        .single();\n    } catch (error) {\n      SecurityLogger.logEvent('database_error', {\n        operation: 'INSERT',\n        table,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n      throw error;\n    }\n  },\n\n  /**\n   * Secure update operation with validation\n   */\n  async update(\n    table: 'vulnerabilities' | 'security_scans' | 'pipeline_metrics' | 'pipeline_runs',\n    data: Record<string, any>,\n    filters: Record<string, any>\n  ) {\n    const db = DatabaseSecurity.getInstance();\n    \n    try {\n      // Validate and sanitize input\n      const sanitizedData = db.validateInput(data);\n      const dataWithMetadata = db.addSecurityMetadata(sanitizedData, true);\n      const sanitizedFilters = db.sanitizeFilters(filters);\n      \n      // Log the operation\n      db.logOperation('UPDATE', table, { data: dataWithMetadata, filters: sanitizedFilters });\n      \n      let query = supabase.from(table).update(dataWithMetadata);\n      \n      // Apply filters\n      for (const [key, value] of Object.entries(sanitizedFilters)) {\n        query = query.eq(key, value);\n      }\n      \n      return await query.select();\n    } catch (error) {\n      SecurityLogger.logEvent('database_error', {\n        operation: 'UPDATE',\n        table,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n      throw error;\n    }\n  },\n\n  /**\n   * Secure delete operation with validation\n   */\n  async delete(\n    table: 'vulnerabilities' | 'security_scans' | 'pipeline_metrics' | 'pipeline_runs',\n    filters: Record<string, any>\n  ) {\n    const db = DatabaseSecurity.getInstance();\n    \n    try {\n      // Prevent accidental deletion of all records\n      if (Object.keys(filters).length === 0) {\n        throw new Error('Delete operation requires at least one filter');\n      }\n      \n      const sanitizedFilters = db.sanitizeFilters(filters);\n      \n      // Log the operation\n      db.logOperation('DELETE', table, sanitizedFilters);\n      \n      let query = supabase.from(table).delete();\n      \n      // Apply filters\n      for (const [key, value] of Object.entries(sanitizedFilters)) {\n        query = query.eq(key, value);\n      }\n      \n      return await query.select();\n    } catch (error) {\n      SecurityLogger.logEvent('database_error', {\n        operation: 'DELETE',\n        table,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n      throw error;\n    }\n  },\n};\n\n/**\n * RLS (Row Level Security) Policy Templates\n * These should be applied in Supabase dashboard or migration scripts\n */\nexport const RLS_POLICIES = {\n  // User-specific data access\n  USER_OWNED_DATA: `\n    CREATE POLICY \"Users can only access their own data\" ON {table}\n    FOR ALL USING (auth.uid() = user_id);\n  `,\n  \n  // Read-only public data\n  PUBLIC_READ: `\n    CREATE POLICY \"Public read access\" ON {table}\n    FOR SELECT USING (true);\n  `,\n  \n  // Admin-only access\n  ADMIN_ONLY: `\n    CREATE POLICY \"Admin only access\" ON {table}\n    FOR ALL USING (\n      auth.jwt() ->> 'role' = 'admin' OR\n      auth.jwt() ->> 'user_metadata' ->> 'role' = 'admin'\n    );\n  `,\n  \n  // Time-based access (e.g., only recent data)\n  TIME_BASED: `\n    CREATE POLICY \"Time-based access\" ON {table}\n    FOR SELECT USING (\n      created_at > NOW() - INTERVAL '30 days'\n    );\n  `,\n};\n\n/**\n * Generate RLS policy for a table\n */\nexport function generateRLSPolicy(table: string, policyType: keyof typeof RLS_POLICIES): string {\n  return RLS_POLICIES[policyType].replace(/{table}/g, table);\n}\n\nexport default DatabaseSecurity;\n","usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/lib/icons.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/lib/security.ts","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":327,"column":10,"nodeType":"MemberExpression","endLine":327,"endColumn":35}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Comprehensive Security Configuration and Utilities\n * Enhanced security hardening for production deployment\n */\n\n// Session management configuration\nexport const SESSION_CONFIG = {\n  // Session timeout in milliseconds (30 minutes)\n  TIMEOUT: 30 * 60 * 1000,\n  // Refresh token before expiry (5 minutes buffer)\n  REFRESH_BUFFER: 5 * 60 * 1000,\n  // Maximum session duration (24 hours)\n  MAX_DURATION: 24 * 60 * 60 * 1000,\n  // Session storage key\n  STORAGE_KEY: 'sfa_session',\n} as const;\n\n// Rate limiting configuration\nexport const RATE_LIMITS = {\n  // API requests per minute\n  API_REQUESTS: 100,\n  // Authentication attempts per hour\n  AUTH_ATTEMPTS: 5,\n  // File uploads per minute\n  FILE_UPLOADS: 10,\n  // Search queries per minute\n  SEARCH_QUERIES: 50,\n} as const;\n\n// Password strength requirements\nexport const PASSWORD_REQUIREMENTS = {\n  MIN_LENGTH: 12,\n  REQUIRE_UPPERCASE: true,\n  REQUIRE_LOWERCASE: true,\n  REQUIRE_NUMBERS: true,\n  REQUIRE_SYMBOLS: true,\n  BANNED_PATTERNS: [\n    'password',\n    '123456',\n    'qwerty',\n    'admin',\n    'letmein',\n    'welcome',\n    'monkey',\n    'dragon',\n  ],\n} as const;\n\n// MFA configuration\nexport const MFA_CONFIG = {\n  ENABLED: true,\n  BACKUP_CODES_COUNT: 8,\n  TOTP_WINDOW: 1,\n  SMS_ENABLED: false, // Disabled for security - TOTP only\n  EMAIL_ENABLED: true,\n} as const;\n\n/**\n * Enhanced password validation with comprehensive security checks\n */\nexport function validatePassword(password: string): {\n  isValid: boolean;\n  errors: string[];\n  strength: 'weak' | 'medium' | 'strong' | 'very-strong';\n} {\n  const errors: string[] = [];\n  let score = 0;\n\n  // Length check\n  if (password.length < PASSWORD_REQUIREMENTS.MIN_LENGTH) {\n    errors.push(`Password must be at least ${PASSWORD_REQUIREMENTS.MIN_LENGTH} characters long`);\n  } else {\n    score += 1;\n  }\n\n  // Character requirements\n  if (PASSWORD_REQUIREMENTS.REQUIRE_UPPERCASE && !/[A-Z]/.test(password)) {\n    errors.push('Password must contain at least one uppercase letter');\n  } else {\n    score += 1;\n  }\n\n  if (PASSWORD_REQUIREMENTS.REQUIRE_LOWERCASE && !/[a-z]/.test(password)) {\n    errors.push('Password must contain at least one lowercase letter');\n  } else {\n    score += 1;\n  }\n\n  if (PASSWORD_REQUIREMENTS.REQUIRE_NUMBERS && !/\\d/.test(password)) {\n    errors.push('Password must contain at least one number');\n  } else {\n    score += 1;\n  }\n\n  if (PASSWORD_REQUIREMENTS.REQUIRE_SYMBOLS && !/[!@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?]/.test(password)) {\n    errors.push('Password must contain at least one special character');\n  } else {\n    score += 1;\n  }\n\n  // Check for banned patterns\n  const lowerPassword = password.toLowerCase();\n  for (const pattern of PASSWORD_REQUIREMENTS.BANNED_PATTERNS) {\n    if (lowerPassword.includes(pattern)) {\n      errors.push(`Password cannot contain common patterns like \"${pattern}\"`);\n      score -= 1;\n    }\n  }\n\n  // Determine strength\n  let strength: 'weak' | 'medium' | 'strong' | 'very-strong' = 'weak';\n  if (score >= 5) strength = 'very-strong';\n  else if (score >= 4) strength = 'strong';\n  else if (score >= 3) strength = 'medium';\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n    strength,\n  };\n}\n\n/**\n * Input sanitization to prevent XSS attacks\n */\nexport function sanitizeInput(input: string): string {\n  return input\n    .replace(/[<>]/g, '') // Remove angle brackets\n    .replace(/javascript:/gi, '') // Remove javascript: protocol\n    .replace(/on\\w+\\s*=/gi, '') // Remove event handlers\n    .trim();\n}\n\n/**\n * SQL injection prevention - parameterized query helper\n */\nexport function sanitizeSqlInput(input: string): string {\n  return input\n    .replace(/['\"\\\\;]/g, '') // Remove dangerous SQL characters\n    .replace(/(\\b(union|select|insert|update|delete|drop|exec|script)\\b)/gi, '') // Remove SQL keywords\n    .trim();\n}\n\n/**\n * Enhanced session timeout management\n */\nexport class SessionManager {\n  private timeoutId: NodeJS.Timeout | null = null;\n  private warningTimeoutId: NodeJS.Timeout | null = null;\n  private lastActivity: number = Date.now();\n\n  constructor(\n    private onTimeout: () => void,\n    private onWarning: () => void,\n    private timeoutDuration: number = SESSION_CONFIG.TIMEOUT\n  ) {\n    this.resetTimeout();\n    this.setupActivityListeners();\n  }\n\n  private setupActivityListeners(): void {\n    const events = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart', 'click'];\n    \n    events.forEach(event => {\n      document.addEventListener(event, this.handleActivity.bind(this), true);\n    });\n  }\n\n  private handleActivity(): void {\n    this.lastActivity = Date.now();\n    this.resetTimeout();\n  }\n\n  private resetTimeout(): void {\n    // Clear existing timeouts\n    if (this.timeoutId) clearTimeout(this.timeoutId);\n    if (this.warningTimeoutId) clearTimeout(this.warningTimeoutId);\n\n    // Set warning timeout (5 minutes before session expires)\n    this.warningTimeoutId = setTimeout(() => {\n      this.onWarning();\n    }, this.timeoutDuration - 5 * 60 * 1000);\n\n    // Set session timeout\n    this.timeoutId = setTimeout(() => {\n      this.onTimeout();\n    }, this.timeoutDuration);\n  }\n\n  public extendSession(): void {\n    this.resetTimeout();\n  }\n\n  public destroy(): void {\n    if (this.timeoutId) clearTimeout(this.timeoutId);\n    if (this.warningTimeoutId) clearTimeout(this.warningTimeoutId);\n  }\n}\n\n/**\n * Content Security Policy headers\n */\nexport const generateSecureCSP = (): string => {\n  const directives = [\n    \"default-src 'self'\",\n    \"script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net https://unpkg.com\",\n    \"style-src 'self' 'unsafe-inline' https://fonts.googleapis.com\",\n    \"font-src 'self' https://fonts.gstatic.com\",\n    \"img-src 'self' data: https: blob:\",\n    \"connect-src 'self' wss: https:\",\n    \"frame-ancestors 'none'\",\n    \"base-uri 'self'\",\n    \"form-action 'self'\",\n    \"upgrade-insecure-requests\"\n  ];\n  \n  return directives.join('; ');\n};\n\n/**\n * Security headers for production\n */\nexport const SECURITY_HEADERS = {\n  'Content-Security-Policy': generateSecureCSP(),\n  'X-Frame-Options': 'DENY',\n  'X-Content-Type-Options': 'nosniff',\n  'X-XSS-Protection': '1; mode=block',\n  'Referrer-Policy': 'strict-origin-when-cross-origin',\n  'Permissions-Policy': 'camera=(), microphone=(), geolocation=()',\n  'Strict-Transport-Security': 'max-age=31536000; includeSubDomains; preload',\n} as const;\n\n/**\n * API request rate limiter\n */\nexport class RateLimiter {\n  private requests: Map<string, number[]> = new Map();\n\n  public isAllowed(key: string, limit: number, windowMs: number): boolean {\n    const now = Date.now();\n    const windowStart = now - windowMs;\n    \n    // Get existing requests for this key\n    const keyRequests = this.requests.get(key) || [];\n    \n    // Filter out requests outside the window\n    const validRequests = keyRequests.filter(time => time > windowStart);\n    \n    // Check if limit exceeded\n    if (validRequests.length >= limit) {\n      return false;\n    }\n    \n    // Add current request\n    validRequests.push(now);\n    this.requests.set(key, validRequests);\n    \n    return true;\n  }\n\n  public getRemainingRequests(key: string, limit: number, windowMs: number): number {\n    const now = Date.now();\n    const windowStart = now - windowMs;\n    const keyRequests = this.requests.get(key) || [];\n    const validRequests = keyRequests.filter(time => time > windowStart);\n    \n    return Math.max(0, limit - validRequests.length);\n  }\n}\n\n/**\n * Secure local storage wrapper with encryption\n */\nexport class SecureStorage {\n  private static encoder = new TextEncoder();\n  private static decoder = new TextDecoder();\n\n  public static async setItem(key: string, value: string): Promise<void> {\n    try {\n      // Simple encryption using Web Crypto API\n      const data = this.encoder.encode(value);\n      const cryptoKey = await window.crypto.subtle.generateKey(\n        { name: 'AES-GCM', length: 256 },\n        false,\n        ['encrypt']\n      );\n      \n      const iv = window.crypto.getRandomValues(new Uint8Array(12));\n      const encrypted = await window.crypto.subtle.encrypt(\n        { name: 'AES-GCM', iv },\n        cryptoKey,\n        data\n      );\n      \n      const combined = new Uint8Array(iv.length + encrypted.byteLength);\n      combined.set(iv);\n      combined.set(new Uint8Array(encrypted), iv.length);\n      \n      localStorage.setItem(key, btoa(String.fromCharCode(...combined)));\n    } catch (error) {\n      console.error('SecureStorage: Failed to encrypt data', error);\n      // Fallback to regular storage\n      localStorage.setItem(key, value);\n    }\n  }\n\n  public static getItem(key: string): string | null {\n    return localStorage.getItem(key);\n  }\n\n  public static removeItem(key: string): void {\n    localStorage.removeItem(key);\n  }\n}\n\n/**\n * Environment variable validator\n */\nexport function validateEnvironment(): { isValid: boolean; errors: string[] } {\n  const errors: string[] = [];\n  const required = [\n    'VITE_SUPABASE_URL',\n    'VITE_SUPABASE_ANON_KEY',\n  ];\n\n  for (const variable of required) {\n    if (!import.meta.env[variable]) {\n      errors.push(`Missing required environment variable: ${variable}`);\n    }\n  }\n\n  // Validate URL formats\n  if (import.meta.env.VITE_SUPABASE_URL && !isValidUrl(import.meta.env.VITE_SUPABASE_URL)) {\n    errors.push('Invalid SUPABASE_URL format');\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n  };\n}\n\nfunction isValidUrl(string: string): boolean {\n  try {\n    new URL(string);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Security event logger\n */\nexport class SecurityLogger {\n  public static logEvent(event: string, details: Record<string, unknown> = {}): void {\n    const logEntry = {\n      timestamp: new Date().toISOString(),\n      event,\n      details,\n      userAgent: navigator.userAgent,\n      url: window.location.href,\n      sessionId: SessionManager.prototype.constructor.name,\n    };\n\n    // Log to console in development\n    if (import.meta.env.DEV) {\n      console.warn('🔒 Security Event:', logEntry);\n    }\n\n    // In production, send to monitoring service\n    if (import.meta.env.PROD) {\n      // TODO: Integrate with your monitoring service\n      fetch('/api/security-events', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(logEntry),\n      }).catch(console.error);\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/pages/Auth.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/pages/Index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/pages/Monitoring.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/pages/NotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/pages/Profile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/pages/SecurityReport.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/pages/Settings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/pages/VulnerabilityDetail.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/services/realPipelineService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/services/realSecurityService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/services/securityScanService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/test/basic.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/test/components.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/test/hooks.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/test/security-test-utils.ts","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":200,"column":14,"nodeType":"MemberExpression","endLine":200,"endColumn":29},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":200,"column":33,"nodeType":"MemberExpression","endLine":200,"endColumn":48}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Security-focused test utilities and enhanced testing infrastructure\n * Provides tools for testing authentication, authorization, input validation, and security features\n */\n\nimport { vi, expect } from 'vitest';\nimport { validatePassword, RateLimiter } from '@/lib/security';\nimport { DatabaseSecurity } from '@/lib/database-security-simple';\n\n/**\n * Mock security logger for testing\n */\nexport const mockSecurityLogger = {\n  events: [] as any[],\n  logEvent: vi.fn((event: string, details: any) => {\n    mockSecurityLogger.events.push({ event, details, timestamp: new Date().toISOString() });\n  }),\n  clearEvents: () => {\n    mockSecurityLogger.events = [];\n    mockSecurityLogger.logEvent.mockClear();\n  },\n};\n\n/**\n * Security test utilities\n */\nexport const SecurityTestUtils = {\n  /**\n   * Test input sanitization\n   */\n  testInputSanitization: {\n    sqlInjectionPayloads: [\n      \"'; DROP TABLE users; --\",\n      \"' OR '1'='1\",\n      \"UNION SELECT * FROM users\",\n      \"'; INSERT INTO users VALUES ('hacker', 'password'); --\",\n    ],\n    \n    xssPayloads: [\n      \"<script>alert('XSS')</script>\",\n      \"javascript:alert('XSS')\",\n      \"<img src=x onerror=alert('XSS')>\",\n      \"<svg onload=alert('XSS')>\",\n    ],\n    \n    pathTraversalPayloads: [\n      \"../../../etc/passwd\",\n      \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n      \"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\",\n    ],\n\n    async testSanitization(input: string, sanitizeFunction: (input: string) => string) {\n      const sanitized = sanitizeFunction(input);\n      \n      // Should not contain dangerous patterns\n      expect(sanitized).not.toMatch(/[<>]/);\n      expect(sanitized).not.toMatch(/javascript:/i);\n      expect(sanitized).not.toMatch(/on\\w+\\s*=/i);\n      expect(sanitized).not.toMatch(/['\"\\\\;]/);\n      expect(sanitized).not.toMatch(/\\b(union|select|insert|update|delete|drop|exec|script)\\b/i);\n      \n      return sanitized;\n    },\n  },\n\n  /**\n   * Test authentication security\n   */\n  testAuthentication: {\n    async testPasswordValidation(password: string) {\n      const result = validatePassword(password);\n      \n      // Test that validation function exists and returns expected structure\n      expect(result).toHaveProperty('isValid');\n      expect(result).toHaveProperty('errors');\n      expect(result).toHaveProperty('strength');\n      expect(Array.isArray(result.errors)).toBe(true);\n      \n      return result;\n    },\n\n    async testRateLimiting(identifier: string, attempts: number, limit: number) {\n      const rateLimiter = new RateLimiter();\n      const results = [];\n      \n      for (let i = 0; i < attempts; i++) {\n        const allowed = rateLimiter.isAllowed(identifier, limit, 60000); // 1 minute window\n        results.push(allowed);\n      }\n      \n      // First attempts should be allowed, later ones blocked\n      expect(results.slice(0, limit).every(r => r)).toBe(true);\n      if (attempts > limit) {\n        expect(results.slice(limit).every(r => !r)).toBe(true);\n      }\n      \n      return results;\n    },\n\n    mockAuthenticatedUser: {\n      id: 'test-user-123',\n      email: 'test@example.com',\n      role: 'user',\n      created_at: new Date().toISOString(),\n    },\n\n    mockAdminUser: {\n      id: 'admin-user-123',\n      email: 'admin@example.com',\n      role: 'admin',\n      created_at: new Date().toISOString(),\n    },\n  },\n\n  /**\n   * Test authorization and access control\n   */\n  testAuthorization: {\n    async testResourceAccess(userId: string, resourceOwnerId: string, userRole?: string) {\n      const canAccess = DatabaseSecurity.Checks.canAccessResource(userId, resourceOwnerId, userRole);\n      \n      if (userId === resourceOwnerId) {\n        expect(canAccess).toBe(true);\n      } else if (userRole === 'admin' || userRole === 'security_admin') {\n        expect(canAccess).toBe(true);\n      } else {\n        expect(canAccess).toBe(false);\n      }\n      \n      return canAccess;\n    },\n\n    async testDataValidation(data: Record<string, any>, requiredFields: string[]) {\n      const validation = DatabaseSecurity.Checks.validateForDatabase(data, requiredFields);\n      \n      expect(validation).toHaveProperty('isValid');\n      expect(validation).toHaveProperty('errors');\n      expect(Array.isArray(validation.errors)).toBe(true);\n      \n      return validation;\n    },\n  },\n\n  /**\n   * Test error handling and security logging\n   */\n  testErrorHandling: {\n    async testSecurityEventLogging(eventType: string, details: any) {\n      const initialEventCount = mockSecurityLogger.events.length;\n      \n      mockSecurityLogger.logEvent(eventType, details);\n      \n      expect(mockSecurityLogger.events).toHaveLength(initialEventCount + 1);\n      \n      const lastEvent = mockSecurityLogger.events[mockSecurityLogger.events.length - 1];\n      expect(lastEvent.event).toBe(eventType);\n      expect(lastEvent.details).toEqual(details);\n      \n      return lastEvent;\n    },\n\n    async testErrorBoundary() {\n      const consoleSpy = vi.spyOn(console, 'error').mockImplementation(() => {});\n      \n      try {\n        throw new Error('Test security error');\n      } catch (error) {\n        expect(error).toBeInstanceOf(Error);\n        expect((error as Error).message).toBe('Test security error');\n      }\n      \n      consoleSpy.mockRestore();\n    },\n  },\n\n  /**\n   * Security-focused validation testing\n   */\n  testSecureValidation: {\n    async testInputSecurity(input: string) {\n      // Test for dangerous patterns\n      const hasSqlInjection = /['\"\\\\;]|\\b(union|select|insert|update|delete|drop|exec|script)\\b/i.test(input);\n      const hasXss = /[<>]|javascript:|on\\w+\\s*=/i.test(input);\n      const hasPathTraversal = /\\.\\.\\/|\\.\\.\\\\|%2e%2e%2f/i.test(input);\n      \n      return {\n        isSafe: !hasSqlInjection && !hasXss && !hasPathTraversal,\n        threats: {\n          sqlInjection: hasSqlInjection,\n          xss: hasXss,\n          pathTraversal: hasPathTraversal,\n        },\n      };\n    },\n\n    async testFormValidation(formData: Record<string, any>, requiredFields: string[]) {\n      const errors = [];\n      \n      for (const field of requiredFields) {\n        if (!formData[field] || formData[field].trim() === '') {\n          errors.push(`${field} is required`);\n        }\n      }\n      \n      return {\n        isValid: errors.length === 0,\n        errors,\n      };\n    },\n  },\n\n  /**\n   * Performance and security monitoring tests\n   */\n  testMonitoring: {\n    async testPerformanceMetrics() {\n      const startTime = performance.now();\n      \n      // Simulate some work\n      await new Promise(resolve => setTimeout(resolve, 100));\n      \n      const endTime = performance.now();\n      const duration = endTime - startTime;\n      \n      // Performance should be within acceptable limits\n      expect(duration).toBeLessThan(5000); // 5 seconds max\n      \n      return duration;\n    },\n\n    async testSecurityHeaders(headers: Record<string, string>) {\n      // Check security headers\n      expect(headers['x-frame-options']).toBe('DENY');\n      expect(headers['x-content-type-options']).toBe('nosniff');\n      expect(headers['x-xss-protection']).toBe('1; mode=block');\n      expect(headers['strict-transport-security']).toContain('max-age');\n      expect(headers['content-security-policy']).toBeTruthy();\n      \n      return headers;\n    },\n  },\n};\n\n/**\n * Custom test matchers for security testing\n */\nexport const securityMatchers = {\n  toBeSecurePassword: (password: string) => {\n    const validation = validatePassword(password);\n    \n    return {\n      pass: validation.isValid,\n      message: () => validation.isValid \n        ? `Expected password to be insecure`\n        : `Expected password to be secure. Errors: ${validation.errors.join(', ')}`,\n    };\n  },\n\n  toBeSanitized: (input: string) => {\n    const hasDangerousContent = /[<>]|javascript:|on\\w+\\s*=|['\"\\\\;]|\\b(union|select|insert|update|delete|drop|exec|script)\\b/i.test(input);\n    \n    return {\n      pass: !hasDangerousContent,\n      message: () => hasDangerousContent \n        ? `Expected \"${input}\" to be sanitized but it contains dangerous content`\n        : `Expected \"${input}\" to contain dangerous content but it was properly sanitized`,\n    };\n  },\n\n  toHaveSecurityEvent: (events: any[], eventType: string) => {\n    const hasEvent = events.some(event => event.event === eventType);\n    \n    return {\n      pass: hasEvent,\n      message: () => hasEvent \n        ? `Expected events not to contain \"${eventType}\"`\n        : `Expected events to contain \"${eventType}\". Found: ${events.map(e => e.event).join(', ')}`,\n    };\n  },\n};\n\n/**\n * Test data generators for security testing\n */\nexport const SecurityTestData = {\n  generateMaliciousInputs: () => ({\n    sqlInjection: SecurityTestUtils.testInputSanitization.sqlInjectionPayloads,\n    xss: SecurityTestUtils.testInputSanitization.xssPayloads,\n    pathTraversal: SecurityTestUtils.testInputSanitization.pathTraversalPayloads,\n  }),\n\n  generateValidInputs: () => ({\n    email: 'test@example.com',\n    password: 'SecurePassword123!',\n    username: 'testuser123',\n    description: 'This is a safe test description',\n  }),\n\n  generateLargeInputs: () => ({\n    longString: 'a'.repeat(10000),\n    deepObject: Array(100).fill(null).reduce((obj, _, i) => ({ nested: obj }), {}),\n    largeArray: Array(1000).fill('test'),\n  }),\n};\n\nexport default SecurityTestUtils;\n","usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/test/setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/test/test-utils.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/test/utils.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/src/vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/supabase/functions/automated-remediation/index.ts","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":169,"column":16,"nodeType":"MemberExpression","endLine":169,"endColumn":39}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport \"https://deno.land/x/xhr@0.1.0/mod.ts\";\nimport { serve } from \"https://deno.land/std@0.168.0/http/server.ts\";\nimport { createClient } from 'https://esm.sh/@supabase/supabase-js@2.50.0';\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',\n};\n\ninterface RemediationRequest {\n  vulnerabilityIds: string[];\n  action: 'fix-all' | 'fix-single';\n  projectName?: string;\n}\n\nserve(async (req) => {\n  if (req.method === 'OPTIONS') {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  try {\n    const supabaseClient = createClient(\n      Deno.env.get('SUPABASE_URL') ?? '',\n      Deno.env.get('SUPABASE_ANON_KEY') ?? ''\n    );\n\n    const { vulnerabilityIds, action, projectName }: RemediationRequest = await req.json();\n    \n    console.log(`Starting ${action} for vulnerabilities:`, vulnerabilityIds);\n\n    // Fetch vulnerabilities to be remediated\n    const { data: vulnerabilities, error: fetchError } = await supabaseClient\n      .from('vulnerabilities')\n      .select('*')\n      .in('id', vulnerabilityIds)\n      .eq('status', 'open')\n      .eq('auto_fixable', true);\n\n    if (fetchError) {\n      throw new Error(`Failed to fetch vulnerabilities: ${fetchError.message}`);\n    }\n\n    const remediationResults = [];\n    \n    for (const vuln of vulnerabilities || []) {\n      console.log(`Processing vulnerability: ${vuln.title}`);\n      \n      // Create remediation activity record\n      const { data: remediationActivity, error: activityError } = await supabaseClient\n        .from('remediation_activities')\n        .insert({\n          vulnerability_id: vuln.id,\n          action_type: 'automated_fix',\n          status: 'in_progress',\n          started_at: new Date().toISOString(),\n        })\n        .select()\n        .single();\n\n      if (activityError) {\n        console.error(`Failed to create remediation activity for ${vuln.id}:`, activityError);\n        continue;\n      }\n\n      try {\n        // Simulate automated remediation process\n        const fixResult = await performAutomatedFix(vuln);\n        \n        // Update remediation activity\n        await supabaseClient\n          .from('remediation_activities')\n          .update({\n            status: fixResult.success ? 'completed' : 'failed',\n            completed_at: new Date().toISOString(),\n            pr_url: fixResult.prUrl,\n            fix_description: fixResult.description,\n          })\n          .eq('id', remediationActivity.id);\n\n        // Update vulnerability status if fix was successful\n        if (fixResult.success) {\n          await supabaseClient\n            .from('vulnerabilities')\n            .update({\n              status: 'fixed',\n              fixed_at: new Date().toISOString(),\n            })\n            .eq('id', vuln.id);\n        }\n\n        remediationResults.push({\n          vulnerabilityId: vuln.id,\n          success: fixResult.success,\n          prUrl: fixResult.prUrl,\n          description: fixResult.description,\n        });\n\n      } catch (error) {\n        console.error(`Failed to remediate vulnerability ${vuln.id}:`, error);\n        \n        await supabaseClient\n          .from('remediation_activities')\n          .update({\n            status: 'failed',\n            completed_at: new Date().toISOString(),\n            fix_description: `Remediation failed: ${error.message}`,\n          })\n          .eq('id', remediationActivity.id);\n      }\n    }\n\n    return new Response(JSON.stringify({\n      success: true,\n      results: remediationResults,\n      summary: {\n        total: vulnerabilityIds.length,\n        fixed: remediationResults.filter(r => r.success).length,\n        failed: remediationResults.filter(r => !r.success).length,\n      }\n    }), {\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n    });\n\n  } catch (error) {\n    console.error('Error in automated-remediation function:', error);\n    return new Response(JSON.stringify({ \n      error: error.message,\n      success: false \n    }), {\n      status: 500,\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n    });\n  }\n});\n\nasync function performAutomatedFix(vulnerability: { vulnerability_type: string; severity: string; cve_id: string; [key: string]: unknown }) {\n  // Simulate different types of fixes based on vulnerability type\n  const fixStrategies = {\n    'dependency': async () => {\n      // Simulate dependency update\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      return {\n        success: Math.random() > 0.1, // 90% success rate\n        prUrl: `https://github.com/example/repo/pull/${Math.floor(Math.random() * 1000)}`,\n        description: `Updated ${vulnerability.component} to latest secure version`,\n      };\n    },\n    'configuration': async () => {\n      // Simulate configuration fix\n      await new Promise(resolve => setTimeout(resolve, 1500));\n      return {\n        success: Math.random() > 0.05, // 95% success rate\n        prUrl: `https://github.com/example/repo/pull/${Math.floor(Math.random() * 1000)}`,\n        description: `Fixed security configuration in ${vulnerability.file_path}`,\n      };\n    },\n    'default': async () => {\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      return {\n        success: Math.random() > 0.2, // 80% success rate\n        prUrl: `https://github.com/example/repo/pull/${Math.floor(Math.random() * 1000)}`,\n        description: `Applied automated fix for ${vulnerability.title}`,\n      };\n    }\n  };\n\n  const strategy = vulnerability.component ? 'dependency' : 'default';\n  return await fixStrategies[strategy]();\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/supabase/functions/not-found-log/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/supabase/functions/notifications/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/supabase/functions/pipeline-trigger/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/supabase/functions/vulnerability-details/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/tailwind.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/vite.config.backup.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: ':' expected.","line":157,"column":36}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react-swc\";\nimport path from \"path\";\nimport { fileURLToPath } from 'url';\nimport os from 'os';\n\n// Cross-platform path resolution\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Platform-specific optimizations\nconst isWindows = os.platform() === 'win32';\nconst isDevelopment = process.env.NODE_ENV === 'development';\n\n// https://vitejs.dev/config/\nexport default defineConfig(({ mode }) => ({\n  base: process.env.NODE_ENV === 'production' ? '/secure-flow-automaton/' : '/',\n  server: {\n    host: process.env.HOST || (isWindows ? \"localhost\" : \"::\"),\n    port: parseInt(process.env.PORT || \"8080\"),\n    open: !process.env.CI, // Don't auto-open in CI environments\n    strictPort: false, // Allow port changes if busy\n    cors: true,\n    hmr: {\n      overlay: isDevelopment,\n    },\n  },\n  plugins: [\n    react(),\n  ].filter(Boolean),\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"./src\"),\n      // Cross-platform path aliases\n      \"~\": path.resolve(__dirname, \"./\"),\n    },\n  },\n  \n  build: {\n    // Cross-platform build optimizations\n    outDir: 'dist',\n    assetsDir: 'assets',\n    minify: mode === 'production' ? 'esbuild' : false,\n    cssMinify: mode === 'production',\n    sourcemap: mode === 'development' || process.env.GENERATE_SOURCEMAP === 'true',\n    target: ['esnext', 'edge88', 'firefox78', 'chrome87', 'safari13.1'],\n    \n    // Optimize for different platforms\n    rollupOptions: {\n      input: {\n        main: path.resolve(__dirname, 'index.html'),\n      },\n      output: {\n        // Platform-optimized chunking\n        manualChunks: (id: string) => {\n          // React ecosystem\n          if (id.includes('node_modules/react') || id.includes('node_modules/react-dom')) {\n            return 'react-vendor';\n          }\n          \n          // UI libraries\n          if (id.includes('@radix-ui') || id.includes('lucide-react')) {\n            return 'ui-vendor';\n          }\n          \n          // Security and monitoring utilities\n          if (id.includes('crypto') || id.includes('security') || id.includes('audit')) {\n            return 'security-vendor';\n          }\n          \n          // Large third-party libraries\n          if (id.includes('node_modules')) {\n            return 'vendor';\n          }\n        },\n        \n        // Optimize file naming for caching\n        entryFileNames: 'assets/[name].[hash].js',\n        chunkFileNames: (chunkInfo: any) => {\n          const facadeModuleId = chunkInfo.facadeModuleId ? chunkInfo.facadeModuleId.split('/').pop() : 'chunk';\n          return `assets/${facadeModuleId}.[hash].js`;\n        },\n        assetFileNames: 'assets/[name].[hash].[ext]',\n      },\n    },\n    \n    // Memory and performance optimizations\n    chunkSizeWarningLimit: 1000,\n    reportCompressedSize: false, // Faster builds\n  },\n  \n  // Development optimizations\n  optimizeDeps: {\n    include: [\n      'react',\n      'react-dom',\n      'react-router-dom',\n      'lucide-react',\n      '@supabase/supabase-js',\n    ],\n    exclude: ['@vite/client', '@vite/env'],\n  },\n  \n  // Cross-platform environment handling\n  define: {\n    __APP_VERSION__: JSON.stringify(process.env.npm_package_version || '1.0.0'),\n    __BUILD_TIME__: JSON.stringify(new Date().toISOString()),\n    __PLATFORM__: JSON.stringify(os.platform()),\n  },\n  \n  // ESBuild configuration for better performance\n  esbuild: {\n    logOverride: { 'this-is-undefined-in-esm': 'silent' },\n    target: 'esnext',\n  },\n  \n  build: {\n    // Cross-platform build optimizations\n    outDir: 'dist',\n    assetsDir: 'assets',\n    minify: mode === 'production' ? 'esbuild' : false,\n    cssMinify: mode === 'production',\n    sourcemap: mode === 'development' || process.env.GENERATE_SOURCEMAP === 'true',\n    target: ['esnext', 'edge88', 'firefox78', 'chrome87', 'safari13.1'],\n    \n    // Optimize for different platforms\n    rollupOptions: {\n      input: {\n        main: path.resolve(__dirname, 'index.html'),\n        ...(process.env.BUILD_PWA === 'true' && {\n          sw: path.resolve(__dirname, 'public/sw.js')\n        })\n      },\n      output: {\n        // Platform-optimized chunking\n        manualChunks: (id) => {\n          // React ecosystem\n          if (id.includes('node_modules/react') || id.includes('node_modules/react-dom')) {\n            return 'react-vendor';\n          }\n          \n          // UI libraries\n          if (id.includes('@radix-ui') || id.includes('lucide-react')) {\n            return 'ui-vendor';\n          }\n          \n          // Security and monitoring utilities\n          if (id.includes('crypto') || id.includes('security') || id.includes('audit')) {\n            return 'security-vendor';\n          }\n          \n          // Large third-party libraries\n          if (id.includes('node_modules')) {\n            return 'vendor';\n          }\n        },\n            '@radix-ui/react-switch',\n            '@radix-ui/react-progress',\n            '@radix-ui/react-hover-card',\n            '@radix-ui/react-popover',\n            '@radix-ui/react-menubar',\n            '@radix-ui/react-aspect-ratio',\n            '@radix-ui/react-slot',\n            'vaul',\n            'class-variance-authority',\n            'clsx',\n            'tailwind-merge',\n            'cmdk'\n          ],\n          \n          // Icons (lucide-react is quite large)\n          'icons': ['lucide-react'],\n          \n          // Chart library\n          'charts': ['recharts'],\n          \n          // Data fetching and state management\n          'data-vendor': [\n            '@tanstack/react-query',\n            '@supabase/supabase-js'\n          ],\n          \n          // Utilities and smaller libraries\n          'utils': [\n            'date-fns',\n            'react-day-picker',\n            'react-hook-form',\n            '@hookform/resolvers',\n            'zod'\n          ]\n        },\n        \n        // Optimize chunk naming for better caching\n        chunkFileNames: (chunkInfo) => {\n          const facadeModuleId = chunkInfo.facadeModuleId\n          if (facadeModuleId) {\n            // Create meaningful names for route-based chunks\n            if (facadeModuleId.includes('pages/')) {\n              const pageName = facadeModuleId.split('pages/')[1].split('.')[0].toLowerCase()\n              return `pages/${pageName}-[hash].js`\n            }\n            if (facadeModuleId.includes('components/')) {\n              return 'components/[name]-[hash].js'\n            }\n          }\n          return 'chunks/[name]-[hash].js'\n        },\n        \n        // Optimize asset naming\n        assetFileNames: (assetInfo) => {\n          if (!assetInfo.name) return 'assets/[name]-[hash][extname]'\n          const info = assetInfo.name.split('.')\n          const ext = info[info.length - 1]\n          if (/png|jpe?g|svg|gif|tiff|bmp|ico/i.test(ext)) {\n            return `images/[name]-[hash][extname]`\n          }\n          if (/css/i.test(ext)) {\n            return `styles/[name]-[hash][extname]`\n          }\n          return `assets/[name]-[hash][extname]`\n        }\n      }\n    },\n    \n    // Set chunk size warning limits\n    chunkSizeWarningLimit: 1000,\n    \n    // Enable advanced minification\n    terserOptions: {\n      compress: {\n        drop_console: true,\n        drop_debugger: true,\n        pure_funcs: ['console.log', 'console.info', 'console.debug'],\n      },\n    },\n    \n    // Optimize CSS\n    cssCodeSplit: true\n  },\n  \n  // Performance optimizations\n  optimizeDeps: {\n    include: [\n      'react',\n      'react-dom',\n      'react-router-dom',\n      '@tanstack/react-query',\n      '@supabase/supabase-js',\n      'lucide-react'\n    ],\n    exclude: ['@radix-ui/react-*']\n  },\n  \n  // Enable experimental features for better performance\n  esbuild: {\n    // Remove console logs in production\n    drop: ['console', 'debugger'],\n  }\n}));\n","usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/vite.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/reddy/clones/secure-flow-automaton/vitest.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]