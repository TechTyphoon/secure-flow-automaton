name: Security Scan

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  dependency-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Record Pipeline Start
        id: record_start
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
        run: |
          npm install @supabase/supabase-js
          
          cat > record-pipeline-start.cjs << 'EOF'
          const { createClient } = require('@supabase/supabase-js');
          
          async function recordPipelineStart() {
            try {
              const supabaseUrl = process.env.SUPABASE_URL;
              const supabaseKey = process.env.SUPABASE_SERVICE_KEY;
              
              if (!supabaseUrl || !supabaseKey) {
                console.log('Skipping pipeline tracking: Supabase credentials not found.');
                return;
              }
              
              const supabase = createClient(supabaseUrl, supabaseKey);
              
              const { data, error } = await supabase
                .from('pipeline_runs')
                .insert({
                  run_id: process.env.GITHUB_RUN_ID,
                  branch_name: process.env.GITHUB_REF_NAME,
                  status: 'In Progress',
                  started_at: new Date().toISOString()
                })
                .select('id')
                .single();
              
              if (error) {
                console.error('Error recording pipeline start:', error);
                process.exit(1);
              }
              
              console.log(`Pipeline run recorded with ID: ${data.id}`);
              console.log(`::set-output name=new_run_record_id::${data.id}`);
              
            } catch (err) {
              console.error('An unexpected error occurred:', err);
              process.exit(1);
            }
          }
          
          recordPipelineStart();
          EOF
          
          GITHUB_RUN_ID=${{ github.run_id }} GITHUB_REF_NAME=${{ github.ref_name }} node record-pipeline-start.cjs

      - name: Run Trivy scan on filesystem
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
          ignore-unfixed: true
          format: 'json'
          output: 'results.json'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Save to Supabase
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
        run: |
          npm install @supabase/supabase-js
          
          cat > save-to-supabase.cjs << 'EOF'
          const { createClient } = require('@supabase/supabase-js');
          const fs = require('fs');
          
          async function saveToSupabase() {
            try {
              const supabaseUrl = process.env.SUPABASE_URL;
              const supabaseKey = process.env.SUPABASE_SERVICE_KEY;
              
              if (!supabaseUrl || !supabaseKey) {
                console.log('Skipping database save: Supabase credentials not found.');
                return;
              }
              
              const supabase = createClient(supabaseUrl, supabaseKey);
              
              if (!fs.existsSync('results.json')) {
                console.log('No scan results file found. Nothing to save.');
                return;
              }

              const resultsFile = fs.readFileSync('results.json', 'utf8');
              const results = JSON.parse(resultsFile);
              
              const vulnerabilities = [];
              const currentTime = new Date().toISOString();
              
              if (results.Results && Array.isArray(results.Results)) {
                results.Results.forEach(result => {
                  if (result.Vulnerabilities && Array.isArray(result.Vulnerabilities)) {
                    result.Vulnerabilities.forEach(vuln => {
                      vulnerabilities.push({
                        vulnerability_id: vuln.VulnerabilityID,
                        package_name: vuln.PkgName,
                        installed_version: vuln.InstalledVersion,
                        fixed_version: vuln.FixedVersion,
                        severity: vuln.Severity,
                        title: vuln.Title,
                        status: 'new',
                        scanned_at: currentTime
                      });
                    });
                  }
                });
              }
              
              if (vulnerabilities.length === 0) {
                console.log('No vulnerabilities found in scan. Database not updated.');
                return;
              }
              
              console.log(`Found ${vulnerabilities.length} vulnerabilities. Attempting to save to Supabase...`);
              const { data, error } = await supabase
                .from('vulnerabilities')
                .insert(vulnerabilities);
              
              if (error) {
                console.error('Error saving to Supabase:', error);
                process.exit(1);
              }
              
              console.log(`Successfully saved ${vulnerabilities.length} vulnerabilities.`);
              
            } catch (err) {
              console.error('An unexpected error occurred in the script:', err);
              process.exit(1);
            }
          }
          
          saveToSupabase();
          EOF
          
          node save-to-supabase.cjs

      - name: Upload scan results as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-scan-results
          path: results.json

      - name: Record Pipeline End
        if: always()
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
        run: |
          npm install @supabase/supabase-js
          
          cat > record-pipeline-end.cjs << 'EOF'
          const { createClient } = require('@supabase/supabase-js');
          
          async function recordPipelineEnd() {
            try {
              const supabaseUrl = process.env.SUPABASE_URL;
              const supabaseKey = process.env.SUPABASE_SERVICE_KEY;
              const recordId = process.env.RECORD_ID;
              const jobStatus = process.env.JOB_STATUS;
              
              if (!supabaseUrl || !supabaseKey) {
                console.log('Skipping pipeline end tracking: Supabase credentials not found.');
                return;
              }
              
              if (!recordId) {
                console.log('No record ID found. Pipeline start may have failed.');
                return;
              }
              
              const supabase = createClient(supabaseUrl, supabaseKey);
              
              const { data, error } = await supabase
                .from('pipeline_runs')
                .update({
                  status: jobStatus,
                  completed_at: new Date().toISOString(),
                  stages: { "scan_status": jobStatus }
                })
                .eq('id', recordId);
              
              if (error) {
                console.error('Error recording pipeline end:', error);
                process.exit(1);
              }
              
              console.log(`Pipeline run ${recordId} updated with status: ${jobStatus}`);
              
            } catch (err) {
              console.error('An unexpected error occurred:', err);
              process.exit(1);
            }
          }
          
          recordPipelineEnd();
          EOF
          
          RECORD_ID=${{ steps.record_start.outputs.new_run_record_id }} JOB_STATUS=${{ job.status }} node record-pipeline-end.cjs
