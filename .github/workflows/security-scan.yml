<<<<<<< HEAD
# This is the name of our workflow. It will show up in the Actions tab.
name: Security Scan

# This section defines WHEN the workflow will run.
on:
  # This makes the workflow run on every "push" event.
  push:
    # We are only interested in pushes to the "main" branch.
    branches: [ main ]

# This section defines the actual JOBS that will run.
jobs:
  # We are defining a single job called "dependency-scan".
  dependency-scan:
    # This specifies that the job will run on a fresh, virtual computer
    # provided by GitHub, using the latest version of Ubuntu Linux.
    runs-on: ubuntu-latest

    # This section lists the individual STEPS in our job.
    # They run in order from top to bottom.
    steps:
      # Step 1: Check out your code
      # This action checks out your repository's code onto the virtual computer
      # so that Trivy can access your files (like package.json).
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Run the Trivy scanner
      # This uses a pre-built "action" for Trivy that makes scanning very easy.
      - name: Run Trivy scan on filesystem
        uses: aquasecurity/trivy-action@master
        with:
          # 'fs' means "filesystem". We are telling Trivy to scan the files in our project.
          scan-type: 'fs'
          
          # This tells Trivy to only report High and Critical severity vulnerabilities.
          # This helps us focus on the most important issues first.
          severity: 'CRITICAL,HIGH'
          
          # This tells Trivy to ignore vulnerabilities that don't have a fix available yet.
          # This reduces noise and makes the report more actionable.
          ignore-unfixed: true
          
          # This tells Trivy to output the results in a nice, clean table in the log.
          format: 'table'
=======
name: Security Scan

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  dependency-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy scan on filesystem
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
          ignore-unfixed: true
          format: 'json'
          output: 'results.json'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Save to Supabase
        run: |
          # Install Supabase client
          npm install @supabase/supabase-js
          
          # Create and run the script
          cat > save-to-supabase.js << 'EOF'
          const { createClient } = require('@supabase/supabase-js');
          const fs = require('fs');
          
          async function saveToSupabase() {
            try {
              // Initialize Supabase client
              const supabaseUrl = process.env.SUPABASE_URL;
              const supabaseKey = process.env.SUPABASE_SERVICE_KEY;
              
              if (!supabaseUrl || !supabaseKey) {
                console.log('Missing Supabase credentials. Skipping database save.');
                return;
              }
              
              const supabase = createClient(supabaseUrl, supabaseKey);
              
              // Read and parse the results file
              let results;
              try {
                const resultsFile = fs.readFileSync('results.json', 'utf8');
                results = JSON.parse(resultsFile);
              } catch (error) {
                console.log('No scan results found or invalid JSON format. Skipping database save.');
                return;
              }
              
              // Extract vulnerabilities from Trivy results
              const vulnerabilities = [];
              const currentTime = new Date().toISOString();
              
              if (results.Results && Array.isArray(results.Results)) {
                results.Results.forEach(result => {
                  if (result.Vulnerabilities && Array.isArray(result.Vulnerabilities)) {
                    result.Vulnerabilities.forEach(vuln => {
                      vulnerabilities.push({
                        vulnerability_id: vuln.VulnerabilityID || 'N/A',
                        package_name: vuln.PkgName || 'N/A',
                        installed_version: vuln.InstalledVersion || 'N/A',
                        fixed_version: vuln.FixedVersion || 'N/A',
                        severity: vuln.Severity || 'UNKNOWN',
                        title: vuln.Title || vuln.Description || 'N/A',
                        status: 'new',
                        scanned_at: currentTime
                      });
                    });
                  }
                });
              }
              
              if (vulnerabilities.length === 0) {
                console.log('No vulnerabilities found. Database not updated.');
                return;
              }
              
              // Insert vulnerabilities into Supabase
              const { data, error } = await supabase
                .from('vulnerabilities')
                .insert(vulnerabilities);
              
              if (error) {
                console.error('Error saving to Supabase:', error);
                process.exit(1);
              }
              
              console.log(`Successfully saved ${vulnerabilities.length} vulnerabilities to Supabase.`);
              
              // Log summary by severity
              const severityCounts = {};
              vulnerabilities.forEach(vuln => {
                severityCounts[vuln.severity] = (severityCounts[vuln.severity] || 0) + 1;
              });
              
              console.log('Vulnerability summary by severity:');
              Object.entries(severityCounts).forEach(([severity, count]) => {
                console.log(`  ${severity}: ${count}`);
              });
              
            } catch (error) {
              console.error('Unexpected error:', error);
              process.exit(1);
            }
          }
          
          saveToSupabase();
          EOF
          
          node save-to-supabase.js
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}

      - name: Upload scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-scan-results
          path: results.json
>>>>>>> cfe221b (Migrate to production: real data integration, remove demo code)
