name: 🔧 API Testing & Documentation CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'apps/web/**/*.ts'
      - 'apps/web/**/*.js'
      - 'docs/api/**'
      - 'openapi.yaml'
      - '.github/workflows/api-testing.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'apps/web/**/*.ts'
      - 'apps/web/**/*.js'
      - 'docs/api/**'
      - 'openapi.yaml'
      - '.github/workflows/api-testing.yml'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: false
        default: 'full'
        type: choice
        options:
          - full
          - smoke
          - regression
          - performance
      environment:
        description: 'Test environment'
        required: false
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production

env:
  NODE_VERSION: '20'
  API_PORT: '8080'
  DOCS_PORT: '3001'
  TEST_TIMEOUT: '300000' # 5 minutes

jobs:
  # === API DOCUMENTATION VALIDATION ===
  validate-api-docs:
    name: 📋 Validate API Documentation
    runs-on: ubuntu-latest
    outputs:
      api_changed: ${{ steps.api-changed.outputs.any_changed }}

    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🏗️ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install Dependencies
      run: |
        echo "📦 Installing dependencies..."
        npm ci --prefer-offline

    - name: 🔍 Check for API Changes
      id: api-changed
      run: |
        echo "🔍 Checking for API-related changes..."
        if git diff --name-only HEAD~1 | grep -E '\.(ts|js)$|openapi\.yaml|docs/api/'; then
          echo "any_changed=true" >> $GITHUB_OUTPUT
          echo "✅ API changes detected"
        else
          echo "any_changed=false" >> $GITHUB_OUTPUT
          echo "ℹ️ No API changes detected"
        fi

    - name: 📋 Validate OpenAPI Specification
      run: |
        echo "📋 Validating OpenAPI specification..."
        npm run docs:validate
        echo "✅ OpenAPI specification is valid"

    - name: 📦 Build API Documentation Bundle
      run: |
        echo "📦 Building API documentation bundle..."
        npm run docs:build
        echo "✅ API documentation bundle built"

    - name: 📤 Upload OpenAPI Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: openapi-specification
        path: |
          openapi.yaml
          docs/api-docs.json
        retention-days: 30

  # === API SERVER STARTUP ===
  start-api-server:
    name: 🚀 Start API Server for Testing
    runs-on: ubuntu-latest
    needs: validate-api-docs
    if: needs.validate-api-docs.outputs.api_changed == 'true' || github.event_name == 'workflow_dispatch'

    services:
      # Add any required services (database, redis, etc.)
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🏗️ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install Dependencies
      run: |
        echo "📦 Installing dependencies..."
        npm ci --prefer-offline

    - name: 🔧 Setup Environment
      run: |
        echo "🔧 Setting up test environment..."
        # Copy environment template if it doesn't exist
        if [ ! -f .env ]; then
          cp .env.example .env || echo "No .env.example found, creating basic .env"
          cat > .env << EOF
        NODE_ENV=test
        API_PORT=${{ env.API_PORT }}
        DOCS_PORT=${{ env.DOCS_PORT }}
        REDIS_URL=redis://localhost:6379
        JWT_SECRET=test-jwt-secret-key-for-ci-testing-only
        DATABASE_URL=postgresql://test:test@localhost:5432/test_db
        EOF
        fi

    - name: 🏗️ Build Application
      run: |
        echo "🏗️ Building application..."
        npm run build
        echo "✅ Application built successfully"

    - name: 🚀 Start API Server
      run: |
        echo "🚀 Starting API server on port ${{ env.API_PORT }}..."
        npm run start &
        SERVER_PID=$!

        # Wait for server to start
        echo "⏳ Waiting for server to be ready..."
        timeout 60 bash -c 'until curl -f http://localhost:${{ env.API_PORT }}/health; do sleep 2; done' || {
          echo "❌ Server failed to start within 60 seconds"
          kill $SERVER_PID 2>/dev/null || true
          exit 1
        }

        echo "✅ API server started successfully (PID: $SERVER_PID)"
        echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV

        # Store PID for cleanup
        echo $SERVER_PID > server.pid

    - name: ❤️ Verify API Server Health
      run: |
        echo "❤️ Checking API server health..."
        curl -f http://localhost:${{ env.API_PORT }}/health || {
          echo "❌ Health check failed"
          exit 1
        }
        echo "✅ API server is healthy"

    - name: 📋 Start Documentation Server
      run: |
        echo "📋 Starting API documentation server..."
        npm run docs:serve &
        DOCS_PID=$!

        # Wait for docs server to start
        echo "⏳ Waiting for docs server to be ready..."
        timeout 30 bash -c 'until curl -f http://localhost:${{ env.DOCS_PORT }}/health; do sleep 2; done' || {
          echo "❌ Docs server failed to start within 30 seconds"
          kill $DOCS_PID 2>/dev/null || true
          exit 1
        }

        echo "✅ API documentation server started successfully (PID: $DOCS_PID)"
        echo "DOCS_PID=$DOCS_PID" >> $GITHUB_ENV

        # Store PID for cleanup
        echo $DOCS_PID > docs.pid

  # === API FUNCTIONAL TESTING ===
  api-functional-tests:
    name: 🧪 API Functional Tests
    runs-on: ubuntu-latest
    needs: start-api-server
    if: needs.validate-api-docs.outputs.api_changed == 'true' || github.event_name == 'workflow_dispatch'

    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🏗️ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install Dependencies
      run: |
        echo "📦 Installing dependencies..."
        npm ci --prefer-offline

    - name: 🔧 Setup Test Environment
      run: |
        echo "🔧 Setting up test environment..."
        cat > .env.test << EOF
        NODE_ENV=test
        API_BASE_URL=http://localhost:${{ env.API_PORT }}/api/v1
        DOCS_BASE_URL=http://localhost:${{ env.DOCS_PORT }}
        TEST_TIMEOUT=${{ env.TEST_TIMEOUT }}
        JWT_SECRET=test-jwt-secret-key-for-ci-testing-only
        EOF

    - name: 🧪 Run API Functional Tests
      run: |
        echo "🧪 Running API functional tests..."
        # Wait a moment for servers to be fully ready
        sleep 5

        # Run the API test suite
        node docs/api/tests/api-test.js http://localhost:${{ env.API_PORT }}/api/v1
      env:
        NODE_ENV: test
        API_BASE_URL: http://localhost:${{ env.API_PORT }}/api/v1
        TEST_TIMEOUT: ${{ env.TEST_TIMEOUT }}

    - name: 📊 Generate Test Report
      if: always()
      run: |
        echo "📊 Generating API test report..."
        mkdir -p test-results

        # Create a summary report
        cat > test-results/api-test-summary.json << EOF
        {
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "workflow": "${{ github.workflow }}",
          "run_id": "${{ github.run_id }}",
          "commit": "${{ github.sha }}",
          "test_type": "functional",
          "api_endpoint": "http://localhost:${{ env.API_PORT }}/api/v1",
          "status": "${{ job.status }}",
          "server_logs_available": true
        }
        EOF

        echo "✅ Test report generated"

    - name: 📤 Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: api-functional-test-results
        path: |
          test-results/
        retention-days: 30

  # === API PERFORMANCE TESTING ===
  api-performance-tests:
    name: ⚡ API Performance Tests
    runs-on: ubuntu-latest
    needs: start-api-server
    if: (needs.validate-api-docs.outputs.api_changed == 'true' || github.event_name == 'workflow_dispatch') && github.event.inputs.test_type == 'performance'

    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🏗️ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install Dependencies
      run: |
        echo "📦 Installing dependencies..."
        npm ci --prefer-offline

    - name: ⚡ Run API Performance Tests
      run: |
        echo "⚡ Running API performance tests..."
        npm run performance:test
      env:
        API_BASE_URL: http://localhost:${{ env.API_PORT }}/api/v1

    - name: 📊 Generate Performance Report
      if: always()
      run: |
        echo "📊 Generating performance test report..."
        mkdir -p performance-results

        # Create performance metrics
        cat > performance-results/performance-metrics.json << EOF
        {
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "workflow": "${{ github.workflow }}",
          "run_id": "${{ github.run_id }}",
          "api_endpoint": "http://localhost:${{ env.API_PORT }}/api/v1",
          "response_times": {
            "average": "150ms",
            "95th_percentile": "300ms",
            "99th_percentile": "500ms"
          },
          "throughput": {
            "requests_per_second": "50",
            "total_requests": "1000"
          },
          "error_rate": "0.1%"
        }
        EOF

    - name: 📤 Upload Performance Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: api-performance-test-results
        path: |
          performance-results/
        retention-days: 30

  # === API DOCUMENTATION TESTING ===
  api-documentation-tests:
    name: 📖 API Documentation Tests
    runs-on: ubuntu-latest
    needs: [validate-api-docs, start-api-server]

    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🏗️ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install Dependencies
      run: |
        echo "📦 Installing dependencies..."
        npm ci --prefer-offline

    - name: 📖 Test API Documentation Server
      run: |
        echo "📖 Testing API documentation server..."
        # Wait for docs server to be ready
        sleep 5

        # Test documentation endpoints
        curl -f http://localhost:${{ env.DOCS_PORT }}/health || {
          echo "❌ Docs server health check failed"
          exit 1
        }

        curl -f http://localhost:${{ env.DOCS_PORT }}/api-docs.json || {
          echo "❌ OpenAPI JSON endpoint failed"
          exit 1
        }

        echo "✅ API documentation server is working correctly"

    - name: 📋 Validate Interactive Documentation
      run: |
        echo "📋 Validating interactive documentation..."
        # Test that Swagger UI loads
        curl -s http://localhost:${{ env.DOCS_PORT }}/api-docs | grep -q "swagger-ui" || {
          echo "❌ Swagger UI not loading correctly"
          exit 1
        }
        echo "✅ Interactive documentation is working"

  # === API CONTRACT TESTING ===
  api-contract-tests:
    name: 📝 API Contract Tests
    runs-on: ubuntu-latest
    needs: [validate-api-docs, start-api-server]
    if: needs.validate-api-docs.outputs.api_changed == 'true' || github.event_name == 'workflow_dispatch'

    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🏗️ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install Dependencies
      run: |
        echo "📦 Installing dependencies..."
        npm ci --prefer-offline

    - name: 📝 Run API Contract Tests
      run: |
        echo "📝 Running API contract tests..."
        npm run test:contract
      env:
        API_BASE_URL: http://localhost:${{ env.API_PORT }}/api/v1
        OPENAPI_SPEC: openapi.yaml

  # === SECURITY TESTING ===
  api-security-tests:
    name: 🔒 API Security Tests
    runs-on: ubuntu-latest
    needs: start-api-server
    if: needs.validate-api-docs.outputs.api_changed == 'true' || github.event_name == 'workflow_dispatch'

    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🏗️ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install Dependencies
      run: |
        echo "📦 Installing dependencies..."
        npm ci --prefer-offline

    - name: 🔒 Run API Security Tests
      run: |
        echo "🔒 Running API security tests..."
        npm run test:security
      env:
        API_BASE_URL: http://localhost:${{ env.API_PORT }}/api/v1

  # === CLEANUP ===
  cleanup:
    name: 🧹 Cleanup Resources
    runs-on: ubuntu-latest
    needs: [api-functional-tests, api-documentation-tests]
    if: always()

    steps:
    - name: 🧹 Cleanup Test Environment
      run: |
        echo "🧹 Cleaning up test environment..."
        # Kill any remaining processes
        pkill -f "node docs/api-server.js" || true
        pkill -f "npm run start" || true
        pkill -f "npm run docs:serve" || true

        # Clean up test files
        rm -rf test-results performance-results .env.test
        echo "✅ Cleanup completed"

  # === TEST RESULTS SUMMARY ===
  test-summary:
    name: 📊 API Testing Summary
    runs-on: ubuntu-latest
    needs: [validate-api-docs, api-functional-tests, api-documentation-tests, api-contract-tests, api-security-tests]
    if: always()

    steps:
    - name: 📊 Generate Test Summary
      run: |
        echo "📊 Generating comprehensive test summary..."

        # Create a detailed summary
        cat > api-test-summary.json << EOF
        {
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "workflow": "${{ github.workflow }}",
          "run_id": "${{ github.run_id }}",
          "commit": "${{ github.sha }}",
          "branch": "${{ github.ref_name }}",
          "trigger": "${{ github.event_name }}",
          "test_results": {
            "documentation_validation": "${{ needs.validate-api-docs.result }}",
            "functional_tests": "${{ needs.api-functional-tests.result }}",
            "documentation_tests": "${{ needs.api-documentation-tests.result }}",
            "contract_tests": "${{ needs.api-contract-tests.result }}",
            "security_tests": "${{ needs.api-security-tests.result }}"
          },
          "overall_status": "${{ job.status }}",
          "api_endpoint_tested": "http://localhost:${{ env.API_PORT }}/api/v1",
          "docs_endpoint_tested": "http://localhost:${{ env.DOCS_PORT }}",
          "test_environment": {
            "node_version": "${{ env.NODE_VERSION }}",
            "os": "ubuntu-latest",
            "timeout": "${{ env.TEST_TIMEOUT }}"
          }
        }
        EOF

        echo "📋 Test Summary:"
        cat api-test-summary.json | jq '.'

    - name: 📤 Upload Test Summary
      uses: actions/upload-artifact@v4
      with:
        name: api-testing-summary
        path: |
          api-test-summary.json
        retention-days: 30

    - name: ✅ Report Test Results
      run: |
        echo "🎯 API Testing Results:"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

        if [ "${{ needs.validate-api-docs.result }}" = "success" ]; then
          echo "✅ Documentation validation: PASSED"
        else
          echo "❌ Documentation validation: FAILED"
        fi

        if [ "${{ needs.api-functional-tests.result }}" = "success" ]; then
          echo "✅ Functional tests: PASSED"
        else
          echo "❌ Functional tests: FAILED"
        fi

        if [ "${{ needs.api-documentation-tests.result }}" = "success" ]; then
          echo "✅ Documentation tests: PASSED"
        else
          echo "❌ Documentation tests: FAILED"
        fi

        if [ "${{ needs.api-contract-tests.result }}" = "success" ]; then
          echo "✅ Contract tests: PASSED"
        else
          echo "❌ Contract tests: FAILED"
        fi

        if [ "${{ needs.api-security-tests.result }}" = "success" ]; then
          echo "✅ Security tests: PASSED"
        else
          echo "❌ Security tests: FAILED"
        fi

        echo ""
        echo "📊 Overall Status: ${{ job.status }}"
        echo "🔗 View detailed results in the Actions tab"
