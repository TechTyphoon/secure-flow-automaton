name: Cross-Platform CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  CACHE_KEY_PREFIX: 'secureflow-v1'

jobs:
  # Test on multiple platforms
  test-platforms:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: ['20', '21']
        exclude:
          # Reduce matrix size by excluding some combinations
          - os: windows-latest
            node-version: '21'
          - os: macos-latest
            node-version: '20'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: package-lock.json

    - name: Configure npm (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        npm config set script-shell bash
        npm config set fund false
        npm config set audit-level moderate

    - name: Configure npm (Unix)
      if: matrix.os != 'windows-latest'
      shell: bash
      run: |
        npm config set fund false
        npm config set audit-level moderate

    - name: Cache node_modules
      uses: actions/cache@v3
      with:
        path: |
          node_modules
          ~/.npm
          ${{ github.workspace }}/.npm
        key: ${{ env.CACHE_KEY_PREFIX }}-${{ matrix.os }}-${{ matrix.node-version }}-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ env.CACHE_KEY_PREFIX }}-${{ matrix.os }}-${{ matrix.node-version }}-
          ${{ env.CACHE_KEY_PREFIX }}-${{ matrix.os }}-

    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit

    - name: Run post-install verification
      run: node scripts/post-install-verify.js

    - name: Type checking
      run: npm run type-check

    - name: Lint check
      run: npm run lint

    - name: Run tests
      run: npm run test:coverage

    - name: Build application
      run: npm run build
      env:
        NODE_OPTIONS: --max-old-space-size=4096

    - name: Upload coverage reports
      if: matrix.os == 'ubuntu-latest' && matrix.node-version == '20'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        fail_ci_if_error: true

    - name: Upload build artifacts
      if: matrix.os == 'ubuntu-latest' && matrix.node-version == '20'
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ matrix.os }}
        path: |
          dist/
          system-report.txt
        retention-days: 5

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test-platforms
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit

    - name: Run security audit
      run: |
        npm audit --audit-level=critical
        npm run security:scan
      continue-on-error: true

    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: javascript,typescript

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  # Docker build test
  docker-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: test-platforms
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image (development)
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.dev
        push: false
        tags: secureflow-automaton:dev
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build Docker image (production)
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: secureflow-automaton:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker container
      run: |
        docker run --rm -d -p 8080:80 --name test-container secureflow-automaton:latest
        sleep 10
        curl -f http://localhost:8080 || exit 1
        docker stop test-container

  # Cross-platform setup validation
  setup-validation:
    name: Setup Script Validation
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Test setup script (Unix)
      if: matrix.os != 'windows-latest'
      shell: bash
      run: |
        chmod +x quick-setup.sh
        # Run setup script in non-interactive mode
        echo "n" | bash quick-setup.sh || true

    - name: Test setup script (Windows)
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        # Windows Git Bash execution
        echo "n" | bash quick-setup.sh || true

    - name: Verify setup completion
      run: |
        test -f .env || echo "Environment file created"
        test -d node_modules || echo "Dependencies installed"
        test -f system-report.txt || echo "System report generated"

  # Performance benchmarks
  performance-test:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: test-platforms
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --prefer-offline

    - name: Build for production
      run: npm run build
      env:
        NODE_OPTIONS: --max-old-space-size=4096

    - name: Run bundle analyzer
      run: |
        npm run analyze > bundle-analysis.txt 2>&1 || true
        ls -la dist/

    - name: Upload performance artifacts
      uses: actions/upload-artifact@v4
      with:
        name: performance-report
        path: |
          bundle-analysis.txt
          dist/
        retention-days: 3

  # Deployment readiness check
  deployment-check:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [test-platforms, security-scan, docker-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --prefer-offline

    - name: Production build test
      run: |
        npm run build:prod
        npm run preview &
        sleep 10
        curl -f http://localhost:8080 || exit 1
      env:
        NODE_OPTIONS: --max-old-space-size=4096

    - name: Create deployment artifacts
      run: |
        tar -czf secureflow-automaton-dist.tar.gz dist/
        echo "Build completed at $(date)" > deployment-info.txt
        echo "Commit: ${{ github.sha }}" >> deployment-info.txt
        echo "Branch: ${{ github.ref_name }}" >> deployment-info.txt

    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deployment-ready
        path: |
          secureflow-automaton-dist.tar.gz
          deployment-info.txt
        retention-days: 30

  # Create release on tag
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [deployment-check]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download deployment artifacts
      uses: actions/download-artifact@v4
      with:
        name: deployment-ready

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: SecureFlow Automaton ${{ github.ref }}
        body: |
          ## üöÄ SecureFlow Automaton Release
          
          ### üì¶ Installation
          ```bash
          git clone https://github.com/TechTyphoon/secure-flow-automaton.git
          cd secure-flow-automaton
          bash quick-setup.sh
          ```
          
          ### üê≥ Docker
          ```bash
          docker run -p 8080:80 ghcr.io/techtyphoon/secureflow-automaton:${{ github.ref_name }}
          ```
          
          ### üìã What's Changed
          - Cross-platform compatibility improvements
          - Enhanced security scanning
          - Performance optimizations
          - Updated dependencies
          
          Built from commit: ${{ github.sha }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./secureflow-automaton-dist.tar.gz
        asset_name: secureflow-automaton-${{ github.ref_name }}.tar.gz
        asset_content_type: application/gzip
